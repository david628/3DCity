!function(e,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r(require("THREE"));else if("function"==typeof define&&define.amd)define(["THREE"],r);else{var t="object"==typeof exports?r(require("THREE")):r(e.THREE);for(var n in t)("object"==typeof exports?exports:e)[n]=t[n]}}(window,function(e){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var a=r[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=40)}([function(r,t){r.exports=e},,,,,function(e,r){e.exports="varying vec2 vUv;\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}"},,,,,,,,,,function(e,r){e.exports="#include <logdepthbuf_pars_fragment>\r\nuniform float alpha;\r\nuniform vec3 color;\r\nvoid main() {\r\n    #include <logdepthbuf_fragment>\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"},function(e,r){e.exports="#include <common>\r\n#include <logdepthbuf_pars_vertex>\r\nvoid main() {\r\n   vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n    gl_Position = projectionMatrix * mvPosition;\r\n    #include <logdepthbuf_vertex>\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nvarying vec3 vWorldPosition1;\r\nvoid main() {\r\n    vUv = uv;\r\n    vWorldPosition1 = position.xyz;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}"},function(e,r){e.exports="uniform sampler2D tDiffuse;\r\nuniform sampler2D scheme;\r\nuniform vec4 boundingBox[30];\r\nvarying vec2 vUv;\r\nvarying vec3 vWorldPosition1;\r\nuniform vec4 color;\r\nfloat distanceToPoint(vec4 boundingBox0, vec3 pt){\r\n    vec3 normal = vec3(boundingBox0.x, boundingBox0.y, boundingBox0.z);\r\n    normal = normalize(normal);\r\n    float constant = boundingBox0.w;\r\n    float dis0 = -dot(normal, pt) + constant;\r\n    return dis0;\r\n}\r\nvoid main() {\r\n    vec4 tex = texture2D( tDiffuse, vUv );\r\n    float flag = 0.0;\r\n            float dis = vWorldPosition1.y - 0.05;\r\n            if(dis < 0.0) {\r\n                flag = -1.0;\r\n            }\r\n    vec4 schemeTex = vec4(0.0);\r\n    if(flag == 0.0) {\r\n        schemeTex = texture2D(scheme, vUv) * color;\r\n    }\r\n    gl_FragColor = tex + schemeTex;\r\n}"},function(e,r){e.exports="uniform sampler2D tex;\r\nuniform vec4 color;\r\nuniform vec4 texSize;\r\nuniform float blendSpace;\r\nuniform vec2 center;\r\nuniform float yRatio;\r\nuniform float verticle;\r\nuniform float verticleAlpha;\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\tvec2 uv = vUv;\r\n    vec4 color0 = texture2D(tex, uv);\r\n    float ellipse = 0.0;\r\n    float alpha = 0.0;\r\n    if(verticle == 1.0) {\r\n        ellipse = 1.0;\r\n        alpha = 1.0;\r\n    } else {\r\n        ellipse = (uv.y - center.y - yRatio);\r\n        if(ellipse < 0.0) {\r\n            ellipse = 0.0;\r\n        }\r\n        alpha = (ellipse * ellipse) / blendSpace;\r\n    }\r\n    alpha *= verticleAlpha;\r\n    if(alpha >= 0.8) {\r\n        alpha = 0.8;\r\n    }\r\n    gl_FragColor = color0 * (1.0 - alpha) + color * alpha;\r\n\r\n}"},function(e,r){e.exports="uniform sampler2D tex;\r\nuniform vec4 texSize;\r\nuniform float space;\r\nuniform vec2 xRatio;\r\nuniform vec2 yRatio;\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\tvec2 uv = vUv;\r\n\tfloat count = 1.0 * 2.0 + 1.0; \r\n    count *= count;\r\n    vec2 maxX = 0.5 * xRatio;\r\n    vec2 maxY = 0.5 * yRatio;\r\n    vec2 dx = vec2(0.5) + maxX;\r\n    vec2 dy = vec2(0.5) + maxY;\r\n    float a = abs(maxX.y - maxX.x) / 2.0;\r\n    float b = abs(maxY.y - maxY.x) / 2.0;\r\n    float centerX = (dx.x + dx.y) / 2.0;\r\n    float centerY = (dy.x + dy.y) / 2.0;\r\n    float ellipse = (uv.x - centerX) * (uv.x - centerX) / (a * a) + (uv.y - centerY) * (uv.y - centerY) / (b * b);\r\n    vec4 color0 = texture2D(tex, uv);\r\n\t\r\n\tfloat rmax = sqrt(0.5);\r\n\tfloat blur = space;\r\n    vec4 colorTmp =vec4(0, 0, 0, 1);\r\n    for(int x = -1; x <= 1; x++) {\r\n        for(int y = -1; y <= 1; y++) {\r\n            vec4 color = texture2D(tex, uv + vec2(float(x) * blur / texSize.x, float(y) * blur / texSize.y));\r\n            colorTmp += color;\r\n        }\r\n    }\r\n\r\n    if(ellipse > 1.0){\r\n      gl_FragColor = colorTmp / count;\r\n    } else {\r\n      gl_FragColor = color0;\r\n    }\r\n}"},function(e,r){e.exports="uniform sampler2D tDiffuse;\r\nvarying vec2 vUv;\r\nuniform float brightness;\r\nuniform float contrast;\r\nuniform float exposure;\r\nuniform float gamma;\r\nuniform float saturation;\r\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\r\n\r\nvoid main() {\r\n    vec4 tex = texture2D(tDiffuse, vUv);\r\n    vec3 color = clamp(tex.rgb + vec3(brightness), 0.0, 1.0);\r\n    color = clamp((color - vec3(0.5)) * contrast + vec3(0.5), 0.0, 1.0);\r\n    color = clamp(color * pow(2.0, exposure), 0.0, 1.0);\r\n    color = clamp(pow(color, vec3(gamma)), 0.0, 1.0);\r\n    float luminance = dot(color, w);\r\n    color = mix(vec3(luminance), color, saturation);\r\n    gl_FragColor = vec4(color, tex.a);\r\n}"},function(e,r){e.exports="#define WT9_0 1.0\r\n#define WT9_1 0.8\r\n#define WT9_2 0.6\r\n#define WT9_3 0.4\r\n#define WT9_4 0.2\r\n#define WT9_NORMALIZE 5.2\r\nvarying vec2 vUv;\r\nuniform vec2 texSize;\r\nuniform float Stride;\r\nuniform float Glowness;\r\nuniform vec4 GlowColor;\r\nuniform sampler2D scene0;\r\nuniform sampler2D blurX;\r\nuniform sampler2D scene;\r\nvoid main() {\r\n    float TexelIncrement = 0.25 * Stride / texSize.y;\r\n    float colour = texture2D(blurX, vec2(vUv.x, vUv.y + TexelIncrement)).w * (0.8 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y + 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y + 3.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y + 4.0 * TexelIncrement)).w * (WT9_4 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y- 1.0 * TexelIncrement)).w * (WT9_1 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).w* (WT9_3 / WT9_NORMALIZE);\r\n  \tcolour += texture2D(blurX, vec2(vUv.x, vUv.y- 4.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n\r\n  \tTexelIncrement = 0.5 * Stride / texSize.y;\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + TexelIncrement)).w * (0.8 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 3.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 4.0 * TexelIncrement)).w * (WT9_4 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 1.0 * TexelIncrement)).w * (WT9_1 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 4.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    TexelIncrement = 0.75 * Stride / texSize.y;\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + TexelIncrement)).w * (0.8 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 3.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 4.0 * TexelIncrement)).w * (WT9_4 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 1.0 * TexelIncrement)).w * (WT9_1 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y- 4.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    TexelIncrement = Stride / texSize.y;\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + TexelIncrement)).w * (0.8 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 3.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y + 4.0 * TexelIncrement)).w * (WT9_4 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 1.0 * TexelIncrement)).w * (WT9_1 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 2.0 * TexelIncrement)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 3.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(blurX, vec2(vUv.x, vUv.y - 4.0 * TexelIncrement)).w * (WT9_3 / WT9_NORMALIZE);\r\n    vec4 OldCol = texture2D(scene, vec2(vUv.x, vUv.y));\r\n  \tvec4 glo = (0.25 * Glowness * colour) * OldCol;\r\n\r\n  \tgl_FragColor = texture2D(scene0, vUv) + vec4(OldCol.w * glo.xyz, 0);\r\n}"},function(e,r){e.exports="#define WT9_0 1.0\r\n#define WT9_1 0.8\r\n#define WT9_2 0.6\r\n#define WT9_3 0.4\r\n#define WT9_4 0.2\r\n#define WT9_NORMALIZE 5.2\r\nvarying vec2 vUv;\r\nuniform sampler2D scene;\r\nuniform vec2 texSize;\r\nuniform float Stride;\r\nvoid main() {\r\n    float TexelIncrement = 0.25 * Stride / texSize.x;\r\n    float colour = texture2D(scene, vec2(vUv.x + TexelIncrement, vUv.y)).w * (0.8 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 4.0 * TexelIncrement, vUv.y)).w * (WT9_4 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).w * (WT9_1 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n\r\n\tTexelIncrement = 0.5 * Stride / texSize.x;\r\n    colour += texture2D(scene, vec2(vUv.x + TexelIncrement, vUv.y) ).w * (0.8 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 4.0 * TexelIncrement, vUv.y)).w * (WT9_4 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).w * (WT9_1 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    TexelIncrement = 0.75 * Stride / texSize.x;\r\n    colour += texture2D(scene, vec2(vUv.x + TexelIncrement, vUv.y)).w * (0.8 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 4.0 * TexelIncrement, vUv.y)).w * (WT9_4 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).w * (WT9_1 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    TexelIncrement = Stride / texSize.x;\r\n    colour += texture2D(scene, vec2(vUv.x + TexelIncrement, vUv.y) ).w * (0.8 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x + 4.0 * TexelIncrement, vUv.y)).w * (WT9_4 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x, vUv.y)).w * (WT9_0 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 1.0 * TexelIncrement, vUv.y)).w * (WT9_1 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 2.0 * TexelIncrement, vUv.y)).w * (WT9_2 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 3.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n    colour += texture2D(scene, vec2(vUv.x - 4.0 * TexelIncrement, vUv.y)).w * (WT9_3 / WT9_NORMALIZE);\r\n\tfloat col = 1.0 - colour * 0.25;\r\n\tgl_FragColor = vec4(col, col, col, col);\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D texture;\r\nuniform sampler2D bloom;\r\n#ifdef LENSFLARE_ENABLED\r\nuniform sampler2D lensflare;\r\nuniform sampler2D lensdirt;\r\n#endif\r\n\r\n#ifdef LUM_ENABLED\r\nuniform sampler2D lum;\r\n#endif\r\n\r\n#ifdef LUT_ENABLED\r\nuniform sampler2D lut;\r\n#endif\r\nuniform float exposure;\r\nuniform float bloomIntensity;\r\nuniform float lensflareIntensity;\r\nvec4 sRGBToLinear(in vec4 value) {\r\n    return vec4(mix(pow(value.rgb * 0.9478672986 + vec3(0.0521327014), vec3(2.4)), value.rgb * 0.0773993808, vec3(lessThanEqual(value.rgb, vec3(0.04045)))), value.w);\r\n}\r\n\r\nvec4 linearTosRGB(in vec4 value) {\r\n    return vec4(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))), value.w);\r\n}\r\nvec3 ACESToneMapping(vec3 color) {\r\n    const float A = 2.51;\r\n    const float B = 0.03;\r\n    const float C = 2.43;\r\n    const float D = 0.59;\r\n    const float E = 0.14;\r\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\r\n}\r\n\r\nfloat eyeAdaption(float fLum) {\r\n    return mix(0.2, fLum, 0.5);\r\n}\r\n\r\n#ifdef LUT_ENABLED\r\nvec3 lutTransform(vec3 color) {\r\n    float blueColor = color.b * 63.0;\r\n\r\n    vec2 quad1;\r\n    quad1.y = floor(floor(blueColor) / 8.0);\r\n    quad1.x = floor(blueColor) - (quad1.y * 8.0);\r\n\r\n    vec2 quad2;\r\n    quad2.y = floor(ceil(blueColor) / 8.0);\r\n    quad2.x = ceil(blueColor) - (quad2.y * 8.0);\r\n\r\n    vec2 texPos1;\r\n    texPos1.x = (quad1.x * 0.125) + 0.5 / 512.0 + ((0.125 - 1.0 / 512.0) * color.r);\r\n    texPos1.y = (quad1.y * 0.125) + 0.5 / 512.0 + ((0.125 - 1.0 / 512.0) * color.g);\r\n\r\n    vec2 texPos2;\r\n    texPos2.x = (quad2.x * 0.125) + 0.5 / 512.0 + ((0.125 - 1.0 / 512.0) * color.r);\r\n    texPos2.y = (quad2.y * 0.125) + 0.5 / 512.0 + ((0.125 - 1.0 / 512.0) * color.g);\r\n\r\n    vec4 newColor1 = texture2D(lut, texPos1);\r\n    vec4 newColor2 = texture2D(lut, texPos2);\r\n\r\n    vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\r\n    return newColor.rgb;\r\n}\r\n#endif\r\nvec3 RGBMDecode(vec4 rgbm, float range) {\r\n  return range * rgbm.rgb * rgbm.a;\r\n}\r\nvec4 RGBMEncode(vec3 color, float range) {\r\n    if (dot(color, color) == 0.0) {\r\n        return vec4(0.0);\r\n    }\r\n    vec4 rgbm;\r\n    color /= range;\r\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\r\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\r\n    rgbm.rgb = color / rgbm.a;\r\n    return rgbm;\r\n}\r\nvec4 decodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 encodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvoid main() {\r\n     vec2 v_Texcoord = vUv;\r\n    vec4 texel = vec4(0.0);\r\n    vec4 originalTexel = vec4(0.0);\r\n    texel = decodeHDR(texture2D(texture, v_Texcoord));\r\n    originalTexel = texel;\r\n    vec4 bloomTexel = decodeHDR(texture2D(bloom, v_Texcoord));\r\n    texel.rgb += bloomTexel.rgb * bloomIntensity;\r\n    texel.a += bloomTexel.a * bloomIntensity;\r\n#ifdef LENSFLARE_ENABLED\r\n    texel += decodeHDR(texture2D(lensflare, v_Texcoord)) * texture2D(lensdirt, v_Texcoord) * lensflareIntensity;\r\n#endif\r\n    texel.a = min(texel.a, 1.0);\r\n#ifdef LUM_ENABLED\r\n    float fLum = texture2D(lum, vec2(0.5, 0.5)).r;\r\n    float adaptedLumDest = 3.0 / (max(0.1, 1.0 + 10.0 * eyeAdaption(fLum)));\r\n    float exposureBias = adaptedLumDest * exposure;\r\n#else\r\n    float exposureBias = exposure;\r\n#endif\r\n    texel.rgb *= exposureBias;\r\n    texel.rgb = ACESToneMapping(texel.rgb);\r\n    texel = linearTosRGB(texel);\r\n#ifdef LUT_ENABLED\r\n    texel.rgb = lutTransform(clamp(texel.rgb,vec3(0.0),vec3(1.0)));\r\n#endif\r\n\r\n#ifdef COLOR_CORRECTION\r\n    texel.rgb = clamp(texel.rgb + vec3(brightness), 0.0, 1.0);\r\n    texel.rgb = clamp((texel.rgb - vec3(0.5)) * contrast+vec3(0.5), 0.0, 1.0);\r\n    float lum = dot(texel.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n    texel.rgb = mix(vec3(lum), texel.rgb, saturation);\r\n#endif\r\n\r\n#ifdef VIGNETTE\r\n    vec2 uv = (v_Texcoord - vec2(0.5)) * vec2(vignetteOffset);\r\n    texel.rgb = mix(texel.rgb, vec3(1.0 - vignetteDarkness), dot(uv, uv));\r\n#endif\r\n    gl_FragColor = encodeHDR(texel);\r\n\r\n#ifdef DEBUG\r\n    #if DEBUG == 1\r\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(texture, v_Texcoord)));\r\n    #elif DEBUG == 2\r\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(bloom, v_Texcoord)) * bloomIntensity);\r\n    #elif DEBUG == 3\r\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(lensflare, v_Texcoord) * lensflareIntensity));\r\n    #endif\r\n#endif\r\n    if (originalTexel.a <= 0.01) {\r\n        gl_FragColor.a = dot(gl_FragColor.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n    }\r\n#ifdef PREMULTIPLY_ALPHA\r\n    gl_FragColor.rgb *= gl_FragColor.a;\r\n#endif\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D tex;\r\nuniform vec2 texSize;\r\nuniform float textureScale;\r\nvec3 RGBMDecode(vec4 rgbm, float range) {\r\n  return range * rgbm.rgb * rgbm.a;\r\n}\r\nvec4 RGBMEncode(vec3 color, float range) {\r\n    if (dot(color, color) == 0.0) {\r\n        return vec4(0.0);\r\n    }\r\n    vec4 rgbm;\r\n    color /= range;\r\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\r\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\r\n    rgbm.rgb = color / rgbm.a;\r\n    return rgbm;\r\n}\r\nvec4 decodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 encodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nfloat brightness(vec3 c) {\r\n    return max(max(c.r, c.g), c.b);\r\n}\r\nvec4 clampSample(sampler2D tex, vec2 coord) {\r\n    return texture2D(tex, coord);\r\n}\r\nvoid main() {\r\n    vec2 v_Texcoord = vUv;\r\n    vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) * textureScale / texSize.xyxy;\r\n    vec4 color = decodeHDR(clampSample(tex, v_Texcoord + d.xy));\r\n    color += decodeHDR(clampSample(tex, v_Texcoord + d.zy));\r\n    color += decodeHDR(clampSample(tex, v_Texcoord + d.xw));\r\n    color += decodeHDR(clampSample(tex, v_Texcoord + d.zw));\r\n    color *= 0.25;\r\n    gl_FragColor = encodeHDR(color);\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D tex;\r\nuniform float threshold;\r\nuniform float scale;\r\nuniform float textureScale;\r\nconst vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);\r\nvec3 RGBMDecode(vec4 rgbm, float range) {\r\n  return range * rgbm.rgb * rgbm.a;\r\n}\r\nvec4 RGBMEncode(vec3 color, float range) {\r\n    if (dot(color, color) == 0.0) {\r\n        return vec4(0.0);\r\n    }\r\n    vec4 rgbm;\r\n    color /= range;\r\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\r\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\r\n    rgbm.rgb = color / rgbm.a;\r\n    return rgbm;\r\n}\r\nvec4 decodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 encodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 median(vec4 a, vec4 b, vec4 c) {\r\n    return a + b + c - min(min(a, b), c) - max(max(a, b), c);\r\n}\r\n\r\nvoid main() {\r\n    vec2 v_Texcoord = vUv;\r\n    vec4 texel = texture2D(tex, v_Texcoord);\r\n    float lum = dot(texel.rgb, lumWeight);\r\n    vec4 color;\r\n    color = vec4(texel.rgb * scale, texel.a * scale);\r\n    gl_FragColor = color;\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D tex;\r\nuniform float blurSize;\r\nuniform vec2 texSize;\r\nuniform float textureScale;\r\nuniform float blurDir;\r\nvec3 RGBMDecode(vec4 rgbm, float range) {\r\n  return range * rgbm.rgb * rgbm.a;\r\n}\r\nvec4 RGBMEncode(vec3 color, float range) {\r\n    if (dot(color, color) == 0.0) {\r\n        return vec4(0.0);\r\n    }\r\n    vec4 rgbm;\r\n    color /= range;\r\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\r\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\r\n    rgbm.rgb = color / rgbm.a;\r\n    return rgbm;\r\n}\r\nvec4 decodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 encodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 clampSample(sampler2D tex, vec2 coord) {\r\n    return texture2D(tex, coord);\r\n}\r\nvoid main() {\r\n    vec2 v_Texcoord = vUv;\r\n    vec2 off = 2.0 * blurSize * textureScale / texSize.xy;\r\n    off *= vec2(1.0 - blurDir, blurDir);\r\n    vec4 texel = vec4(0.0);\r\n    float weightAll = 1.0;\r\n    texel += texture2D(tex, v_Texcoord - 4.0 * off) * 0.07;\r\n    texel += texture2D(tex, v_Texcoord - 3.0 * off) * 0.09;\r\n    texel += texture2D(tex, v_Texcoord - 2.0 * off) * 0.12;\r\n    texel += texture2D(tex, v_Texcoord - 1.0 * off) * 0.14;\r\n    texel += texture2D(tex, v_Texcoord) * 0.16;\r\n    texel += texture2D(tex, v_Texcoord + 1.0 * off) * 0.14;\r\n    texel += texture2D(tex, v_Texcoord + 2.0 * off) * 0.12;\r\n    texel += texture2D(tex, v_Texcoord + 3.0 * off) * 0.09;\r\n    texel += texture2D(tex, v_Texcoord + 4.0 * off) * 0.07;\r\n    gl_FragColor = texel / max(weightAll, 0.01);\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D texture1;\r\nuniform float weight1;\r\n\r\nuniform sampler2D texture2;\r\nuniform float weight2;\r\nvec3 RGBMDecode(vec4 rgbm, float range) {\r\n  return range * rgbm.rgb * rgbm.a;\r\n}\r\nvec4 RGBMEncode(vec3 color, float range) {\r\n    if (dot(color, color) == 0.0) {\r\n        return vec4(0.0);\r\n    }\r\n    vec4 rgbm;\r\n    color /= range;\r\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\r\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\r\n    rgbm.rgb = color / rgbm.a;\r\n    return rgbm;\r\n}\r\nvec4 decodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 encodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvoid main() {\r\n    vec2 v_Texcoord = vUv;\r\n    vec4 tex = vec4(0.0);\r\n\r\n    tex += texture2D(texture1, v_Texcoord) * weight1;\r\n    tex += texture2D(texture2, v_Texcoord) * weight2;\r\n\r\n    gl_FragColor = tex;\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D scene;\r\nuniform sampler2D maskMap;\r\nuniform sampler2D background;\r\nuniform sampler2D otherObjs;\r\nuniform\tfloat darkFactor;\r\nuniform\tvec4 inputColor;\r\nuniform float brightFactor;\r\nvoid main() {\r\n\tvec2 uv = vUv;\r\n\tvec4 sceneColor = texture2D(scene, uv);\r\n\tvec4 maskMapColor = texture2D(maskMap, uv);\r\n    vec4 backgroundColor = texture2D(background, uv);\r\n    vec4 otherObjsColor = texture2D(otherObjs, uv);\r\n\r\n\tif(maskMapColor.r == 1.0) {\r\n        gl_FragColor = vec4(brightFactor * (sceneColor.rgb * (1.0 - otherObjsColor.a) + otherObjsColor.rgb * otherObjsColor.a), 1.0);\r\n\t} else {\r\n        gl_FragColor = vec4((backgroundColor.rgb * darkFactor * (1.0 - otherObjsColor.a) + otherObjsColor.rgb * darkFactor * otherObjsColor.a), 1.0);\r\n\t}\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D tex0;\r\nuniform sampler2D tex1;\r\nuniform float BlurStart;\r\nuniform float BlurWidth;\r\nuniform float CX;\r\nuniform float CY;\r\nuniform float Intensity;\r\nuniform float GlowGamma;\r\n\r\nvoid main() {\r\n\tvec2 uv = vUv;\r\n    vec2 ctrPt = vec2(CX, CY);\r\n\r\n\tfloat scale = BlurStart + BlurWidth * 1.0;\r\n\tvec2 tmp = (uv - ctrPt) * scale + ctrPt;\r\n\tvec4 blurred = texture2D(tex0, tmp);\r\n\t\r\n    blurred.rgb = pow(blurred.rgb, vec3(GlowGamma));\r\n\t\r\n    blurred.rgb *= Intensity;\r\n\t\r\n    blurred.rgb = clamp(blurred.rgb, 0.0, 1.0);\r\n\r\n    vec4 origTex = texture2D(tex1, uv);\r\n \r\n\tvec4 blurResult = origTex + blurred;\r\n    \r\n\tvec2 dir = uv - ctrPt;\r\n\t\r\n\tfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\r\n\t\r\n    float t = dist * 1.0;\r\n\t\r\n    t = clamp(t, 0.0, 1.0);\r\n\r\n    gl_FragColor = mix(origTex, blurResult, t);\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D scene;\r\nuniform sampler2D blurMap;\r\nuniform float BlurStart;\r\nuniform float BlurWidth;\r\nuniform float CX;\r\nuniform float CY;\r\nuniform float Intensity;\r\nuniform float GlowGamma;\r\n\r\nvoid main() {\r\n    vec2 texCoord = vUv;\r\n    vec2 ctrPt = vec2(CX, CY);\r\n    vec4 blurred = texture2D(blurMap, texCoord);\r\n    for(float i = 0.0; i < 31.0; i++) {\r\n    \tfloat scale = BlurStart + BlurWidth * ((31.0 - i) / (31.0 - 1.0));\r\n\t\tvec2 tmp = (texCoord - ctrPt) * scale + ctrPt;\r\n\t\tvec4 tmpc = texture2D(blurMap, tmp) * (i / 31.0) * (i / 31.0);\r\n\t\tblurred += tmpc / 31.0;\r\n    }\r\n\r\n    blurred.r = pow(blurred.r, GlowGamma);\r\n    blurred.g = pow(blurred.g, GlowGamma);\r\n    blurred.b = pow(blurred.b, GlowGamma);\r\n    blurred.rgb *= Intensity;\r\n    blurred.rgb = clamp(blurred.rgb, 0.0, 1.0);\r\n\r\n    vec4 origTex = texture2D(blurMap, texCoord);\r\n\tvec4 blurResult = origTex + blurred;\r\n\r\n\tvec4 baseTex = texture2D(scene, texCoord);\r\n\r\n\tvec2 dir = texCoord - ctrPt;\r\n\tfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\r\n    float t = dist * 1.0;\r\n    t = clamp(t, 0.0, 1.0);\r\n\r\n    gl_FragColor = baseTex + blurResult * t;\r\n\r\n\r\n}"},function(e,r){e.exports="varying vec2 vUv;\r\nuniform sampler2D texture1;\r\nuniform float weight1;\r\n\r\nuniform sampler2D texture2;\r\nuniform float weight2;\r\nvec3 RGBMDecode(vec4 rgbm, float range) {\r\n  return range * rgbm.rgb * rgbm.a;\r\n}\r\nvec4 RGBMEncode(vec3 color, float range) {\r\n    if (dot(color, color) == 0.0) {\r\n        return vec4(0.0);\r\n    }\r\n    vec4 rgbm;\r\n    color /= range;\r\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\r\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\r\n    rgbm.rgb = color / rgbm.a;\r\n    return rgbm;\r\n}\r\nvec4 decodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvec4 encodeHDR(vec4 color) {\r\n    return color;\r\n}\r\nvoid main() {\r\n    vec2 v_Texcoord = vUv;\r\n    vec4 tex = vec4(0.0);\r\n\r\n    tex += texture2D(texture1, v_Texcoord) * weight1;\r\n    tex += texture2D(texture2, v_Texcoord) * weight2;\r\n\r\n    gl_FragColor = tex;\r\n}"},,,,,,,,function(e,r,t){"use strict";t.r(r);var n=t(0),a={renderSize:[],scheme:"",debug:!1,disableEffect:!1,scene:null,camera:null,renderer:null,isWebGL2:!0,renderTarget:1,depth:null,_resultRenderTarget:null,oldStack:null,debugMode:{camera2D:null,scene:null},materialBuffer:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r},getKeys:function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=[];return e.forEach(function(e,n){-1!==n.indexOf(r)&&t.push(n)}),t}}}(),compositorPool:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r}}}(),compositorBuffer:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r}}}(),passBuffer:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r}}}(),compositorTextureBuffer:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r}}}(),compositorMaterialBuffer:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r}}}(),compositorStackBuffer:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r}}}(),compositorSchemeStrategyBuffer:function(){var e=new Map;return{get:function(r){return e.get(r)},delete:function(r){return e.delete(r)},add:function(r,t){e.set(r,t)},getAll:function(){var r=[];return e.forEach(function(e){r.push(e)}),r}}}(),effect:function(){var e={glow:new Set,innerGlow:new Set,outline:new Set,urealBloom:new Set,focusRegion:new Set,smallGlow:new Set,PostRadialBlur2:new Set,RadialOffset:new Set};return{get:function(r){return e[r]},add:function(r,t){void 0!==e[r]&&e[r].add(t)},delete:function(r,t){void 0!==e[r]&&e[r].has(t)&&e[r].delete(t)},getAll:function(){return e},deleteAll:function(){e={}}}}()},o={initTargetBuffer:function(){var e=a.renderSize[0],r=a.renderSize[1];this.createTextureBuffer("_result",e,r),this.createTextureBuffer("_result1",e,r);var t=this.createTargetBuffer("_source",e,r);this.setDepth(t)},setDepth:function(e){var r=a.renderTarget||1,t=a.depth;if(e.depthBuffer=!0,!t){if(1===r)t=a.renderer.getContext().createRenderbuffer();else(t=new n.DepthTexture).type=1015;a.depth=t}return 1===r?e.webglDepthRenderbuffer=t:e.depthTexture=t,t},createTargetBuffer:function(e,r,t,n){return 1===(a.renderTarget||1)?this.createMultisampleTextureBuffer(e,r,t,n):this.createTextureBuffer(e,r,t,n)},createTextureBuffer:function(e,r,t,o,i){o=o||{minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat,stencilBuffer:!1,depthBuffer:!1},i=i||!1;var s=new n.WebGLRenderTarget(r,t,o);return s.texture.name=e,s.texture.generateMipmaps=i,a.compositorTextureBuffer.add(e,s),s},createMultisampleTextureBuffer:function(e,r,t,o,i){if(n.WebGLMultisampleRenderTarget){if(a.isWebGL2){o=o||{minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat,stencilBuffer:!1,depthBuffer:!1},i=i||!1;var s=new n.WebGLMultisampleRenderTarget(r,t,o);return s.samples=5,s.texture.name=e,s.texture.generateMipmaps=i,a.compositorTextureBuffer.add(e,s),s}return this.createTextureBuffer(e,r,t,o,i)}return this.createTextureBuffer(e,r,t,o,i)}},i=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}();var s=function(){function e(r,t){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t||n.Math.generateUUID(),this._composer=r,this.stack=[],this.allCompositorSign="",this.allCompositorObjects={},a.compositorStackBuffer.add(t,this)}return i(e,[{key:"render",value:function(){this._composer.clearAllPass(),this._update()}},{key:"setSize",value:function(e,r){this._composer.setSize(e,r)}},{key:"update",value:function(){this.stack.map(function(e){e.update&&e.update()})}},{key:"_update",value:function(e){var r=this;if(!a.disableEffect&&this.stack.length>0)for(var t=0;t<this.stack.length;t++)if(this.stack[t]&&this.stack[t].enable&&this.stack[t].passes.length>0)for(var n=0;n<this.stack[t].passes.length;n++)this._composer.addPass(this.stack[t].passes[n]);this._composer.passes.map(function(e,t){t===r._composer.passes.length-1?e.renderToScreen=!0:e.renderToScreen=!1}),this._composer.render()}},{key:"addCompositor",value:function(e,r){var t=a.compositorBuffer.get(e);t&&(void 0!==r&&null!==r&&""!==r||(r=this.stack.length),this.stack.length?this.stack[this.stack.length-1].name!==t.name&&this.stack.splice(r,0,t):t&&this.stack.splice(r,0,t))}},{key:"_checkScheme",value:function(){var e=this;this.allCompositorSign="";var r=this.stack;if(r.length>0)for(var t=0;t<r.length;t++)if(r[t]&&r[t].enable){var n=r[t].passes;if(n.length>0)for(var o=0;o<n.length;o++){var i=n[o].schemeName||n[o].visibilityFlags||"";-1===this.allCompositorSign.indexOf(i)&&(this.allCompositorSign+=","+i,this.allCompositorObjects[i]=[])}}a.scene.traverse(function(r){if(r.visibilityFlags&&-1!==e.allCompositorSign.indexOf(r.visibilityFlags))e.allCompositorObjects[r.visibilityFlags].push(r);else if(r.t3dMaterial)for(var t=r.t3dMaterial.getTechnique(),n=0,a=t.length;n<a;n++)t[n].getSchemeName()&&-1!==e.allCompositorSign.indexOf(t[n].getSchemeName())&&e.allCompositorObjects[t[n].getSchemeName()].push(r);else r._schemeName&&-1!==e.allCompositorSign.indexOf(r._schemeName)&&e.allCompositorObjects[r._schemeName].push(r)})}},{key:"removeCompositor",value:function(e){for(var r=0;r<this.stack.length;r++)this.stack[r].name===e&&this.stack.splice(r,1)}}]),e}(),l={FocusRegion:{meta:{description:"",version:"1.0"},name:"FocusRegion",type:"compositor",nodes:[{name:"focusRegion",shader:"focusRegion",inputs:{scene:"source",schemeName:"focusRegion",maskMap:"scheme",visibility_mask:1024,background:"visibility",visibility_mask1:2,otherObjs:"visibility1"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{darkFactor:"0.5",inputColor:"[0, 0, 1, 1]",brightFactor:"1.2"},defines:{}}]},PostRadialBlur2:{meta:{description:"",version:"1.0"},name:"PostRadialBlur2",type:"compositor",nodes:[{name:"radialBlur",shader:"radialBlur",inputs:{schemeName:"PostRadialBlur2",scene:"source",blurMap:"scheme"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",BlurStart:"1.0",BlurWidth:"-0.1",CX:"0.5",CY:"0.5",Intensity:"10.0",GlowGamma:"0.8"},defines:{}}]},RadialOffset:{meta:{description:"",version:"1.0"},name:"RadialOffset",type:"compositor",nodes:[{name:"radialOffset",shader:"radialOffset",inputs:{schemeName:"RadialOffset",tex0:"scheme",tex1:"source"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{BlurStart:"1.0",BlurWidth:"-0.1",CX:"0.5",CY:"0.5",Intensity:"3.0",GlowGamma:"1.0"},defines:{}}]},Glow:{meta:{description:"",version:"1.0"},name:"Glow",type:"compositor",nodes:[{name:"HighPass",shader:"LuminosityHighPassShader",inputs:{schemeName:"glow",tDiffuse:"scheme"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{luminosityThreshold:"0.2",smoothWidth:"0.01"},defines:{}},{name:"BlurX0",shader:"SeperableBlurShader",inputs:{colorTexture:"HighPass"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{texSize:"expr[0.5, 0.5]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"3",SIGMA:"3"}},{name:"BlurY0",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX0"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{texSize:"expr[0.5, 0.5]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"3",SIGMA:"3"}},{name:"BlurX1",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY0"},outputs:{color:{parameters:{width:"expr0.25",height:"expr0.25"}}},parameters:{texSize:"expr[0.25, 0.25]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"5",SIGMA:"5"}},{name:"BlurY1",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX1"},outputs:{color:{parameters:{width:"expr0.25",height:"expr0.25"}}},parameters:{texSize:"expr[0.25, 0.25]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"5",SIGMA:"5"}},{name:"BlurX2",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY1"},outputs:{color:{parameters:{width:"expr0.125",height:"expr0.125"}}},parameters:{texSize:"expr[0.125, 0.125]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"7",SIGMA:"7"}},{name:"BlurY2",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX2"},outputs:{color:{parameters:{width:"expr0.125",height:"expr0.125"}}},parameters:{texSize:"expr[0.125, 0.125]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"7",SIGMA:"7"}},{name:"BlurX3",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY2"},outputs:{color:{parameters:{width:"expr0.0625",height:"expr0.0625"}}},parameters:{texSize:"expr[0.0625, 0.0625]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"9",SIGMA:"9"}},{name:"BlurY3",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX3"},outputs:{color:{parameters:{width:"expr0.0625",height:"expr0.0625"}}},parameters:{texSize:"expr[0.0625, 0.0625]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"9",SIGMA:"9"}},{name:"BlurX4",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY3"},outputs:{color:{parameters:{width:"expr0.03125",height:"expr0.03125"}}},parameters:{texSize:"expr[0.03125, 0.03125]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"11",SIGMA:"11"}},{name:"BlurY4",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX4"},outputs:{color:{parameters:{width:"expr0.03125",height:"expr0.03125"}}},parameters:{texSize:"expr[0.03125, 0.03125]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"11",SIGMA:"11"}},{name:"Bloom",shader:"BloomBlendShader",inputs:{blurTexture1:"BlurY0",blurTexture2:"BlurY1",blurTexture3:"BlurY2",blurTexture4:"BlurY3",blurTexture5:"BlurY4"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{bloomStrength:"1.5",bloomRadius:"0.4",bloomTintColors:"[1, 1, 1]"},defines:{NUM_MIPS:"5"}},{name:"BloomResult",shader:"blend",inputs:{texture1:"source",texture2:"Bloom"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{weight1:"1.0",weight2:"1.0"},defines:{}}]},SmallGlow:{meta:{description:"",version:"1.0"},name:"SmallGlow",type:"compositor",nodes:[{name:"HighPass",shader:"LuminosityHighPassShader",inputs:{schemeName:"smallGlow",tDiffuse:"scheme"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{luminosityThreshold:"0.2",smoothWidth:"0.01"},defines:{}},{name:"BlurX0",shader:"SeperableBlurShader",inputs:{colorTexture:"HighPass"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{texSize:"expr[0.5, 0.5]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"3",SIGMA:"3"}},{name:"BlurY0",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX0"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{texSize:"expr[0.5, 0.5]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"3",SIGMA:"3"}},{name:"BlurX1",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY0"},outputs:{color:{parameters:{width:"expr0.25",height:"expr0.25"}}},parameters:{texSize:"expr[0.25, 0.25]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"5",SIGMA:"5"}},{name:"BlurY1",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX1"},outputs:{color:{parameters:{width:"expr0.25",height:"expr0.25"}}},parameters:{texSize:"expr[0.25, 0.25]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"5",SIGMA:"5"}},{name:"BlurX2",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY1"},outputs:{color:{parameters:{width:"expr0.125",height:"expr0.125"}}},parameters:{texSize:"expr[0.125, 0.125]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"7",SIGMA:"7"}},{name:"BlurY2",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX2"},outputs:{color:{parameters:{width:"expr0.125",height:"expr0.125"}}},parameters:{texSize:"expr[0.125, 0.125]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"7",SIGMA:"7"}},{name:"BlurX3",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY2"},outputs:{color:{parameters:{width:"expr0.0625",height:"expr0.0625"}}},parameters:{texSize:"expr[0.0625, 0.0625]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"9",SIGMA:"9"}},{name:"BlurY3",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX3"},outputs:{color:{parameters:{width:"expr0.0625",height:"expr0.0625"}}},parameters:{texSize:"expr[0.0625, 0.0625]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"9",SIGMA:"9"}},{name:"BlurX4",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurY3"},outputs:{color:{parameters:{width:"expr0.03125",height:"expr0.03125"}}},parameters:{texSize:"expr[0.03125, 0.03125]",direction:"[1, 0]"},defines:{KERNEL_RADIUS:"11",SIGMA:"11"}},{name:"BlurY4",shader:"SeperableBlurShader",inputs:{colorTexture:"BlurX4"},outputs:{color:{parameters:{width:"expr0.03125",height:"expr0.03125"}}},parameters:{texSize:"expr[0.03125, 0.03125]",direction:"[0, 1]"},defines:{KERNEL_RADIUS:"11",SIGMA:"11"}},{name:"Bloom",shader:"BloomBlendShader",inputs:{blurTexture1:"BlurY0",blurTexture2:"BlurY1",blurTexture3:"BlurY2",blurTexture4:"BlurY3",blurTexture5:"BlurY4"},outputs:{color:{parameters:{width:"expr0.5",height:"expr0.5"}}},parameters:{bloomStrength:"1.5",bloomRadius:"0.4",bloomTintColors:"[1, 1, 1]"},defines:{NUM_MIPS:"5"}},{name:"BloomResult",shader:"blend",inputs:{texture1:"source",texture2:"Bloom"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{weight1:"1.0",weight2:"1.0"},defines:{}}]},UrealBloom:{meta:{description:"",version:"1.0"},name:"UrealBloom",type:"compositor",nodes:[{name:"source_half",shader:"downSample",inputs:{schemeName:"urealBloom",tex:"scheme"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",textureScale:"1.0"},defines:{}},{name:"bright",shader:"bright",inputs:{tex:"source_half"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",threshold:"2.0",scale:"4.0",textureScale:"2.0"},defines:{}},{name:"bright_upsample_full_blur_h",shader:"blur",inputs:{tex:"bright"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"0.0",textureScale:"2.0"},defines:{}},{name:"bright_upsample_full_blur_v",shader:"blur",inputs:{tex:"bright_upsample_full_blur_h"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"1.0",textureScale:"2.0"},defines:{}},{name:"bright_downsample_4",shader:"downSample",inputs:{tex:"bright"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",textureScale:"2.0"},defines:{}},{name:"bright_upsample_2_blur_h",shader:"blur",inputs:{tex:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"0.0",textureScale:"4.0"},defines:{}},{name:"bright_upsample_2_blur_v",shader:"blur",inputs:{tex:"bright_upsample_2_blur_h"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"1.0",textureScale:"4.0"},defines:{}},{name:"bright_upsample_2_blend",shader:"blend",inputs:{texture1:"bright_upsample_2_blur_v",texture2:"bright_upsample_4_blend"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{weight1:"0.3",weight2:"0.7"},defines:{}},{name:"bright_downsample_8",shader:"downSample",inputs:{tex:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",textureScale:"4.0"},defines:{}},{name:"bright_upsample_4_blur_h",shader:"blur",inputs:{tex:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"0.0",textureScale:"8.0"},defines:{}},{name:"bright_upsample_4_blur_v",shader:"blur",inputs:{tex:"bright_upsample_4_blur_h"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"1.0",textureScale:"8.0"},defines:{}},{name:"bright_upsample_4_blend",shader:"blend",inputs:{texture1:"bright_upsample_4_blur_v",texture2:"bright_upsample_8_blend"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{weight1:"0.3",weight2:"0.7"},defines:{}},{name:"bright_downsample_16",shader:"downSample",inputs:{tex:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",textureScale:"8.0"},defines:{}},{name:"bright_upsample_8_blur_h",shader:"blur",inputs:{tex:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"0.0",textureScale:"16.0"},defines:{}},{name:"bright_upsample_8_blur_v",shader:"blur",inputs:{tex:"bright_upsample_8_blur_h"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"1.0",textureScale:"16.0"},defines:{}},{name:"bright_upsample_8_blend",shader:"blend",inputs:{texture1:"bright_upsample_8_blur_v",texture2:"bright_upsample_16_blur_v"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{weight1:"0.3",weight2:"0.7"},defines:{}},{name:"bright_downsample_32",shader:"downSample",inputs:{tex:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",textureScale:"16.0"},defines:{}},{name:"bright_upsample_16_blur_h",shader:"blur",inputs:{tex:"bright_downsample_32"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"0.0",textureScale:"32.0"},defines:{}},{name:"bright_upsample_16_blur_v",shader:"blur",inputs:{tex:"bright_upsample_16_blur_h"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",blurSize:"1.0",blurDir:"1.0",textureScale:"32.0"},defines:{}},{name:"bloom_composite_hdr",shader:"blend",inputs:{texture1:"bright_upsample_full_blur_v",texture2:"bright_upsample_2_blend"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{weight1:"0.3",weight2:"1.0"},defines:{}},{name:"bloom_composite_hdr1",shader:"blend",inputs:{texture1:"source",texture2:"bloom_composite_hdr"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{weight1:"1.0",weight2:"1.5"},defines:{}}]},InnerGlow:{meta:{description:"",version:"1.0"},name:"InnerGlow",type:"compositor",nodes:[{name:"GlowInsetA",shader:"glowInset_psx",inputs:{schemeName:"innerGlow",scene:"scheme"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",Stride:"10.0"},defines:{}},{name:"GlowInsetB",shader:"glowInset_psy",inputs:{scene0:"source",blurX:"GlowInsetA",scene:"scheme"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",Stride:"10.0",Glowness:"2.0",GlowColor:"[1.0, 0.0, 0.0, 1.0]"},defines:{}}]},ColorAdjust:{meta:{description:"",version:"1.0"},name:"ColorAdjust",type:"compositor",nodes:[{name:"colorAdjustment",shader:"colorAdjustment",inputs:{tDiffuse:"source"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{brightness:"0.0",contrast:"1.15",exposure:"0.0",gamma:"1.0",saturation:"1.2"},defines:{}}]},SimpleBlur:{meta:{description:"",version:"1.0"},name:"SimpleBlur",type:"compositor",nodes:[{name:"simpleBlur",shader:"simpleBlur",inputs:{tex:"source"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",space:"4.0",xRatio:"[-2.0, 2.0]",yRatio:"[-2.0, 2.0]"},defines:{}}]},SimpleFog:{meta:{description:"",version:"1.0"},name:"SimpleFog",type:"compositor",nodes:[{name:"simpleFog",shader:"simpleFog",inputs:{tex:"source"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{texSize:"expr[1.0, 1.0]",yRatio:"0.1",center:"[0.0,0.0]",blendSpace:"4.0",color:"[1.0,0.0,0.0,1.0]",verticle:"0.0",verticleAlpha:"1.0"},defines:{}}]},ColorRegion:{meta:{description:"",version:"1.0"},name:"ColorRegion",type:"compositor",nodes:[{name:"colorRegion",shader:"colorRegion",inputs:{tDiffuse:"source",schemeName:"colorRegion",scheme:"scheme"},outputs:{color:{parameters:{width:"expr1.0",height:"expr1.0"}}},parameters:{color:"[1.0,0.0,0.0,1.0]"},defines:{}}]}},u={uniforms:{tDiffuse:{type:"t",value:null},luminosityThreshold:{type:"f",value:1},smoothWidth:{type:"f",value:1},defaultColor:{type:"c",value:new n.Color(0)},defaultOpacity:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec3 defaultColor;","uniform float defaultOpacity;","uniform float luminosityThreshold;","uniform float smoothWidth;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float v = dot( texel.xyz, luma );","vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );","float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );","gl_FragColor = mix( outputColor, texel, alpha );","}"].join("\n")},c={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")},d={defines:{KERNEL_RADIUS:3,SIGMA:3},uniforms:{colorTexture:{value:null},texSize:{value:new n.Vector2(.5,.5)},direction:{value:new n.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }",fragmentShader:"#include <common>            varying vec2 vUv;\n            uniform sampler2D colorTexture;\n            uniform vec2 texSize;            uniform vec2 direction;                        float gaussianPdf(in float x, in float sigma) {                return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;            }            void main() {\n                vec2 invSize = 1.0 / texSize;                float fSigma = float(SIGMA);                float weightSum = gaussianPdf(0.0, fSigma);                vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;                for( int i = 1; i < KERNEL_RADIUS; i ++ ) {                    float x = float(i);                    float w = gaussianPdf(x, fSigma);                    vec2 uvOffset = direction * invSize * x;                    vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;                    vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;                    diffuseSum += (sample1 + sample2) * w;                    weightSum += 2.0 * w;                }                gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n            }"},f={defines:{NUM_MIPS:5},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }",fragmentShader:"varying vec2 vUv;            uniform sampler2D blurTexture1;            uniform sampler2D blurTexture2;            uniform sampler2D blurTexture3;            uniform sampler2D blurTexture4;            uniform sampler2D blurTexture5;            uniform sampler2D dirtTexture;            uniform float bloomStrength;            uniform float bloomRadius;            uniform float bloomFactors[NUM_MIPS];            uniform vec3 bloomTintColors[NUM_MIPS];                        float lerpBloomFactor(const in float factor) {                 float mirrorFactor = 1.2 - factor;                return mix(factor, mirrorFactor, bloomRadius);            }                        void main() {                gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +                                                  lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +                                                  lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +                                                  lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +                                                  lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );            }"},h={defines:{KERNEL_RADIUS:4,DEPTH_PACKING:1,PERSPECTIVE_CAMERA:1},uniforms:{tDiffuse:{type:"t",value:null},size:{type:"v2",value:new n.Vector2(512,512)},sampleUvOffsets:{type:"v2v",value:[new n.Vector2(0,0)]},sampleWeights:{type:"1fv",value:[1]},tDepth:{type:"t",value:null},cameraNear:{type:"f",value:10},cameraFar:{type:"f",value:1e3},depthCutoff:{type:"f",value:10}},vertexShader:["#include <common>","uniform vec2 size;","varying vec2 vUv;","varying vec2 vInvSize;","void main() {","\tvUv = uv;","\tvInvSize = 1.0 / size;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#include <common>","#include <packing>","uniform sampler2D tDiffuse;","uniform sampler2D tDepth;","uniform float cameraNear;","uniform float cameraFar;","uniform float depthCutoff;","uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];","uniform float sampleWeights[ KERNEL_RADIUS + 1 ];","varying vec2 vUv;","varying vec2 vInvSize;","float getDepth( const in vec2 screenPosition ) {","\t#if DEPTH_PACKING == 1","\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );","\t#else","\treturn texture2D( tDepth, screenPosition ).x;","\t#endif","}","float getViewZ( const in float depth ) {","\t#if PERSPECTIVE_CAMERA == 1","\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","\t#else","\treturn orthoDepthToViewZ( depth, cameraNear, cameraFar );","\t#endif","}","void main() {","\tfloat depth = getDepth( vUv );","\tif( depth >= ( 1.0 - EPSILON ) ) {","\t\tdiscard;","\t}","\tfloat centerViewZ = -getViewZ( depth );","\tbool rBreak = false, lBreak = false;","\tfloat weightSum = sampleWeights[0];","\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;","\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {","\t\tfloat sampleWeight = sampleWeights[i];","\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;","\t\tvec2 sampleUv = vUv + sampleUvOffset;","\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );","\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;","\t\tif( ! rBreak ) {","\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;","\t\t\tweightSum += sampleWeight;","\t\t}","\t\tsampleUv = vUv - sampleUvOffset;","\t\tviewZ = -getViewZ( getDepth( sampleUv ) );","\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;","\t\tif( ! lBreak ) {","\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;","\t\t\tweightSum += sampleWeight;","\t\t}","\t}","\tgl_FragColor = diffuseSum / weightSum;","}"].join("\n")},m=t(32),v=t.n(m),p={uniforms:{tDiffuse:{value:null},resolution:{value:new n.Vector2(1/1024,1/512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:v.a,defines:{FXAA_QUALITY_PRESET:39}},g=t(5),x=t.n(g),T=t(31),b=t.n(T),S=t(30),y=t.n(S),w=t(29),_=t.n(w),B=t(28),M=t.n(B),R=t(27),D=t.n(R),U=t(26),C=t.n(U),E=t(25),I=t.n(E),A=t(24),L=t.n(A),P=t(23),W=t.n(P),N=t(22),O=t.n(N),z=t(21),F=t.n(z),G=t(20),V=t.n(G),X=t(19),Z=t.n(X),j=t(18),q=t.n(j),H=t(17),Y=t.n(H),K={radialBlur:[x.a,b.a],radialOffset:[x.a,y.a],focusRegion:[x.a,_.a],blend:[x.a,M.a],blur:[x.a,D.a],bright:[x.a,C.a],downSample:[x.a,I.a],hdr:[x.a,L.a],glowInset_psx:[x.a,W.a],glowInset_psy:[x.a,O.a],colorAdjustment:[x.a,F.a],simpleBlur:[x.a,V.a],simpleFog:[x.a,Z.a],colorRegion:[Y.a,q.a]},Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},J={shaderList:{LuminosityHighPassShader:u,CopyShader:c,SeperableBlurShader:d,BloomBlendShader:f,DepthLimitedBlurShader:h,FXAA3Shader:p},createShaders:function(e){var r="";return this.shaderList[e]?r=this.clone(this.shaderList[e]):K[e]&&(r=this.initShader(K[e][0],K[e][1])),r},initShader:function(e,r,t){t=t||{};var n=this.processUniforms(e,r);return this.clone({defines:t,uniforms:n,vertexShader:e,fragmentShader:r})},clone:function(e){var r={};for(var t in e instanceof Array&&(r=[]),e){var n=e[t];"object"===(void 0===n?"undefined":Q(n))?r[t]=this.clone(n):r[t]=n}return r},processUniforms:function(e,r){for(var t,a,o,i=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,s=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,l={sampler2D:{type:"t",value:function(){return null}},bool:{type:"b",value:function(){return 0}},int:{type:"i",value:function(){return 0}},float:{type:"f",value:function(){return 0}},vec2:{type:"v2",value:function(){return new n.Vector2}},vec3:{type:"v3",value:function(){return new n.Vector3}},vec4:{type:"v4",value:function(){return new n.Vector4}},bvec2:{type:"v2",value:function(){return new n.Vector2}},bvec3:{type:"v3",value:function(){return new n.Vector3}},bvec4:{type:"v4",value:function(){return new n.Vector4}},ivec2:{type:"v2",value:function(){return new n.Vector2}},ivec3:{type:"v3",value:function(){return new n.Vector3}},ivec4:{type:"v4",value:function(){return new n.Vector4}},mat2:{type:"v2",value:function(){return new n.Matrix2}},mat3:{type:"v3",value:function(){return new n.Matrix3}},mat4:{type:"v4",value:function(){return new n.Matrix4}}},u={float:{type:"fv",value:function(){return[]}},vec2:{type:"v2v",value:function(){return[]}},vec3:{type:"v3v",value:function(){return[]}},vec4:{type:"v4v",value:function(){return[]}}},c={};null!==(t=i.exec(r));)t.index===i.lastIndex&&i.lastIndex++,a=t[1],c[o=t[2]]={type:l[a].type,value:l[a].value()};for(;null!==(t=s.exec(r));)t.index===i.lastIndex&&i.lastIndex++,a=t[1],o=t[2],t[3],c[o]={type:u[a].type,value:u[a].value()};return c}},$=function(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1};Object.assign($.prototype,{setSize:function(e,r){},render:function(e,r,t,n,a){console.error("THREE.Pass: .render() must be implemented in derived pass.")}});var ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},re=function(e,r,t,o){this.name="BLOOM",$.call(this),this.strength=void 0!==r?r:1,this.radius=t,this.threshold=o,this.resolution=void 0!==e?new n.Vector2(e.x,e.y):new n.Vector2(256,256),this.renderTargetInfo={renderTarget:[],MSAA:[]};var i={minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat};this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;var s=Math.round(this.resolution.x/2),l=Math.round(this.resolution.y/2);this.renderTargetBright=new n.WebGLRenderTarget(s,l,i),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1,this.renderTargetInfo.renderTarget.push(this.renderTargetBright),this.resultTargetBuffer=a.compositorTextureBuffer.get("_result");for(var d=0;d<this.nMips;d++){var f;(f=new n.WebGLRenderTarget(s,l,i)).texture.name="UnrealBloomPass.h"+d,f.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(f),(f=new n.WebGLRenderTarget(s,l,i)).texture.name="UnrealBloomPass.v"+d,f.texture.generateMipmaps=!1,this.renderTargetsVertical.push(f),s=Math.round(s/2),l=Math.round(l/2),this.renderTargetInfo.renderTarget.push(this.renderTargetsHorizontal),this.renderTargetInfo.renderTarget.push(this.renderTargetsVertical)}void 0===u&&console.error("THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader");var h=u;this.highPassUniforms=n.UniformsUtils.clone(h.uniforms),this.highPassUniforms.luminosityThreshold.value=o,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new n.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:h.vertexShader,fragmentShader:h.fragmentShader,defines:{}}),this.separableBlurMaterials=[];var m=[3,5,7,9,11];for(s=Math.round(this.resolution.x/2),l=Math.round(this.resolution.y/2),d=0;d<this.nMips;d++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(m[d])),this.separableBlurMaterials[d].uniforms.texSize.value=new n.Vector2(s,l),s=Math.round(s/2),l=Math.round(l/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=r,this.compositeMaterial.uniforms.bloomRadius.value=.1,this.compositeMaterial.needsUpdate=!0;this.compositeMaterial.uniforms.bloomFactors.value=[1,.8,.6,.4,.2],this.bloomTintColors=[new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,void 0===c&&console.error("THREE.BloomPass relies on THREE.CopyShader");var v=c;this.copyUniforms=n.UniformsUtils.clone(v.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new n.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:v.vertexShader,fragmentShader:v.fragmentShader,blending:n.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this.oldClearColor=new n.Color,this.oldClearAlpha=1,this.camera=new n.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new n.Scene,this.basic=new n.MeshBasicMaterial,this.quad=new n.Mesh(new n.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad)};re.prototype=Object.assign(Object.create($.prototype),{constructor:re,dispose:function(){for(var e=0;e<this.renderTargetsHorizontal.length;e++)this.renderTargetsHorizontal[e].dispose();for(e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose()},getRenderTargetInfo:function(){return this.renderTargetInfo},setSize:function(e,r){var t=Math.round(e/2),a=Math.round(r/2);this.renderTargetBright.setSize(t,a);for(var o=0;o<this.nMips;o++)this.renderTargetsHorizontal[o].setSize(t,a),this.renderTargetsVertical[o].setSize(t,a),this.separableBlurMaterials[o].uniforms.texSize.value=new n.Vector2(t,a),t=Math.round(t/2),a=Math.round(a/2)},render:function(e,r,t,a,o){this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha();var i=e.autoClear;e.autoClear=!1,e.setClearColor(new n.Color(0,0,0),0),o&&e.context.disable(e.context.STENCIL_TEST),this.renderToScreen&&(this.quad.material=this.basic,this.basic.map=this.resultTargetBuffer.texture,e.setRenderTarget(null),e.clear(),e.render(this.scene,this.camera)),this.highPassUniforms.tDiffuse.value=this.resultTargetBuffer.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.quad.material=this.materialHighPassFilter,e.setRenderTarget(this.renderTargetBright),e.clear(),e.render(this.scene,this.camera);for(var s=this.renderTargetBright,l=0;l<this.nMips;l++)this.quad.material=this.separableBlurMaterials[l],this.separableBlurMaterials[l].uniforms.colorTexture.value=s.texture,this.separableBlurMaterials[l].uniforms.direction.value=re.BlurDirectionX,e.setRenderTarget(this.renderTargetsHorizontal[l]),e.clear(),e.render(this.scene,this.camera),this.separableBlurMaterials[l].uniforms.colorTexture.value=this.renderTargetsHorizontal[l].texture,this.separableBlurMaterials[l].uniforms.direction.value=re.BlurDirectionY,e.setRenderTarget(this.renderTargetsVertical[l]),e.clear(),e.render(this.scene,this.camera),s=this.renderTargetsVertical[l];this.quad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,e.setRenderTarget(this.renderTargetsHorizontal[0]),e.clear(),e.render(this.scene,this.camera),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,o&&e.context.enable(e.context.STENCIL_TEST),this.renderToScreen?(e.setRenderTarget(null),e.render(this.scene,this.camera)):(e.setRenderTarget(this.resultTargetBuffer),e.render(this.scene,this.camera)),e.setClearColor(this.oldClearColor,this.oldClearAlpha),e.autoClear=i},getSeperableBlurMaterial:function(e){var r=new n.ShaderMaterial(this.clone(d));return r.defines.KERNEL_RADIUS=e,r.defines.SIGMA=e,r},getCompositeMaterial:function(e){var r=new n.ShaderMaterial(this.clone(f));return r.defines.NUM_MIPS=e,r},clone:function(e){var r={};for(var t in e instanceof Array&&(r=[]),e){var n=e[t];"object"===(void 0===n?"undefined":ee(n))?r[t]=this.clone(n):r[t]=n}return r}}),re.BlurDirectionX=new n.Vector2(1,0),re.BlurDirectionY=new n.Vector2(0,1);var te={DEFAULT:1,SPRITE:2},ne={getStrategy:function(e,r,t){if(!r)return null;var n=a.compositorBuffer.get(e).schemeStrategy.get(r);return this.createDefaultStrategy(e,n,t),n},createDefaultStrategy:function(e,r){if(!r.getCustom()){if("InnerGlow"===e&&(r.processSchemeStrategy=function(e,r,t){var n=t;return"[object Boolean]"===toString.call(n)&&(n=[1,1,1,1]),this.createMaterial(n,te.DEFAULT,n.toString()+"_defaultScheme")},r.processNonSchemeStrategy=function(e,r){return null}),"PostRadialBlur2"===e&&(r.processNonSchemeStrategy=function(e,r){return null}),"RadialOffset"===e)r.processNonSchemeStrategy=function(e,r){return null};else if(-1!==e.indexOf("Outline")||-1!==e.indexOf("outline"))r.processSchemeStrategy=function(e,r,t){var n=[1,1,1,1];return this.createMaterial(n,te.DEFAULT,n.toString()+"_defaultScheme")},r.processNonSchemeStrategy=function(e,r){return null};else if("Glow"===e||"SmallGlow"===e){r.processSchemeStrategy=function(r,t,n){var o=a.compositorBuffer.get(e).defaultProgramParameter,i=!0===n?n*o:n;if(!isNaN(parseFloat(i))){var s=Math.abs(parseFloat(i));return 1===s?t:this.cloneMaterial(t,s,t.uuid)}},2===a.compositorBuffer.get(e).schemeTarget?r.processNonSchemeStrategy=function(e,r){return null}:r.processNonSchemeStrategy=null}else"UrealBloom"===e?(r.processSchemeStrategy=function(e,r,t){if(!isNaN(parseFloat(t))){var n=Math.abs(parseFloat(t));return 1===n?r:this.cloneMaterial(r,n,r.uuid)}},r.processNonSchemeStrategy=function(e,r){return null}):"FocusRegion"===e&&(r.processNonSchemeStrategy=function(e,r){return null},r.processSchemeStrategy=function(e,r){if("MeshLineMaterial"===r.type)return r;var t=[1,1,1,1];return this.createMaterial(t,te.DEFAULT,t.toString()+"_defaultScheme")});a.compositorSchemeStrategyBuffer.add(e,r)}}},ae=function(e,r,t){this.name="Outline",this.isUpdate=!0,this.renderScene=a.scene,this.renderCamera=a.camera,this.schemeName=r,this.selectedObjects=void 0!==t?t:[],this.edgeGlow=0,this.edgeColor=new n.Color(0,1,0),this.edgeThickness=1,this.edgeStrength=1,this.downSampleRatio=2,this.pulsePeriod=0,this.targetNums=5,this.renderTargetInfo={renderTarget:[],MSAA:[]},$.call(this),this.resolution=void 0!==e?new n.Vector2(e.x,e.y):new n.Vector2(256,256);var i={minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat,stencilBuffer:!1},s=Math.round(this.resolution.x/this.downSampleRatio),l=Math.round(this.resolution.y/this.downSampleRatio);this.maskBufferMaterial=new n.MeshBasicMaterial({color:16777215}),this.maskBufferMaterial.side=n.DoubleSide,this.renderTargetMaskBuffer=o.createTargetBuffer("scheme_Outline",this.resolution.x,this.resolution.y,i),this.renderTargetInfo.MSAA.push(this.renderTargetMaskBuffer),this.resultRenderTarget=a.compositorTextureBuffer.get("_result"),o.setDepth(this.renderTargetMaskBuffer),this.depthMaterial=new n.MeshDepthMaterial,this.depthMaterial.side=n.DoubleSide,this.depthMaterial.depthPacking=n.RGBADepthPacking,this.depthMaterial.blending=n.NoBlending,this.renderTargetMaskDownSampleBuffer=new n.WebGLRenderTarget(s,l,i),this.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample",this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=!1,this.renderTargetInfo.renderTarget.push(this.renderTargetMaskDownSampleBuffer),this.renderTargetBlurBuffer1=new n.WebGLRenderTarget(s,l,i),this.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1",this.renderTargetBlurBuffer1.texture.generateMipmaps=!1,this.renderTargetBlurBuffer2=new n.WebGLRenderTarget(Math.round(s/2),Math.round(l/2),i),this.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2",this.renderTargetBlurBuffer2.texture.generateMipmaps=!1,this.renderTargetInfo.renderTarget.push(this.renderTargetBlurBuffer1),this.renderTargetInfo.renderTarget.push(this.renderTargetBlurBuffer2),this.edgeDetectionMaterial=this.getEdgeDetectionMaterial(),this.renderTargetEdgeBuffer1=new n.WebGLRenderTarget(s,l,i),this.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1",this.renderTargetEdgeBuffer1.texture.generateMipmaps=!1,this.renderTargetEdgeBuffer2=new n.WebGLRenderTarget(Math.round(s/2),Math.round(l/2),i),this.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2",this.renderTargetEdgeBuffer2.texture.generateMipmaps=!1,this.renderTargetInfo.renderTarget.push(this.renderTargetEdgeBuffer1),this.renderTargetInfo.renderTarget.push(this.renderTargetEdgeBuffer2);this.separableBlurMaterial1=this.getSeperableBlurMaterial(4),this.separableBlurMaterial1.uniforms.texSize.value=new n.Vector2(s,l),this.separableBlurMaterial1.uniforms.kernelRadius.value=1,this.separableBlurMaterial2=this.getSeperableBlurMaterial(4),this.separableBlurMaterial2.uniforms.texSize.value=new n.Vector2(Math.round(s/2),Math.round(l/2)),this.separableBlurMaterial2.uniforms.kernelRadius.value=4,this.resultTargetBuffer=a.compositorTextureBuffer.get("_result"),this.resultTargetBuffer1=new n.WebGLRenderTarget(s,l,i),this.overlayMaterial=this.getOverlayMaterial(),void 0===c&&console.error("THREE.OutlinePass relies on THREE.CopyShader");var u=c;this.copyUniforms=n.UniformsUtils.clone(u.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new n.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:n.NoBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this.oldClearColor=new n.Color,this.oldClearAlpha=1,this.camera=new n.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new n.Scene,this.quad=new n.Mesh(new n.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad),this.tempPulseColor1=new n.Color,this.tempPulseColor2=new n.Color,this.textureMatrix=new n.Matrix4};ae.prototype=Object.assign(Object.create($.prototype),{constructor:ae,dispose:function(){this.renderTargetMaskBuffer.dispose(),this.renderTargetMaskDownSampleBuffer.dispose(),this.renderTargetBlurBuffer1.dispose(),this.renderTargetBlurBuffer2.dispose(),this.renderTargetEdgeBuffer1.dispose(),this.renderTargetEdgeBuffer2.dispose()},getRenderTargetInfo:function(){return this.renderTargetInfo},setSize:function(e,r){this.renderTargetMaskBuffer.setSize(e,r);var t=Math.round(e/this.downSampleRatio),a=Math.round(r/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(t,a),this.renderTargetBlurBuffer1.setSize(t,a),this.renderTargetEdgeBuffer1.setSize(t,a),this.separableBlurMaterial1.uniforms.texSize.value=new n.Vector2(t,a),t=Math.round(t/2),a=Math.round(a/2),this.renderTargetBlurBuffer2.setSize(t,a),this.renderTargetEdgeBuffer2.setSize(t,a),this.separableBlurMaterial2.uniforms.texSize.value=new n.Vector2(t,a)},updateRenderTargetMaskBuffer:function(e){e.setClearColor(16777215,0);var r=this.renderScene.background;(this.renderScene.background=null,this.schemeName)&&(ne.getStrategy(this.name,this.schemeName).getRenderStrategy(),e.materialManager.setMode(this.schemeName),e.setRenderTarget(this.renderTargetMaskBuffer),e.clear(),e.initRenderList=!1,e.render(this.renderScene,this.renderCamera),e.initRenderList=!0,e.materialManager.setMode(0));this.renderScene.background=r},update:function(){this.isUpdate=!0},render:function(e,r,t,a,o){if(this.isUpdate){this.updateRenderTargetMaskBuffer(e),this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha();var i=e.autoClear;e.autoClear=!1,o&&e.context.disable(e.context.STENCIL_TEST),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetMaskBuffer.texture,e.setRenderTarget(this.renderTargetMaskDownSampleBuffer),e.clear(),e.render(this.scene,this.camera),this.quad.material=this.edgeDetectionMaterial,this.edgeDetectionMaterial.uniforms.maskTexture.value=this.renderTargetMaskDownSampleBuffer.texture,this.edgeDetectionMaterial.uniforms.texSize.value=new n.Vector2(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height),this.edgeDetectionMaterial.uniforms.edgeColor.value=this.edgeColor,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),e.render(this.scene,this.camera),this.quad.material=this.separableBlurMaterial1,this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=ae.BlurDirectionX,this.separableBlurMaterial1.uniforms.kernelRadius.value=this.edgeThickness,e.setRenderTarget(this.renderTargetBlurBuffer1),e.clear(),e.render(this.scene,this.camera),this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetBlurBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=ae.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),e.render(this.scene,this.camera),this.quad.material=this.separableBlurMaterial2,this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial2.uniforms.direction.value=ae.BlurDirectionX,e.setRenderTarget(this.renderTargetBlurBuffer2),e.clear(),e.render(this.scene,this.camera),this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetBlurBuffer2.texture,this.separableBlurMaterial2.uniforms.direction.value=ae.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer2),e.clear(),e.render(this.scene,this.camera),this.isUpdate=!1}this.quad.material=this.overlayMaterial,this.overlayMaterial.uniforms.maskTexture.value=this.renderTargetMaskBuffer.texture,this.overlayMaterial.uniforms.edgeTexture1.value=this.renderTargetEdgeBuffer1.texture,this.overlayMaterial.uniforms.edgeTexture2.value=this.renderTargetEdgeBuffer2.texture,this.overlayMaterial.uniforms.tex.value=this.resultRenderTarget.texture,this.overlayMaterial.uniforms.edgeStrength.value=this.edgeStrength,this.overlayMaterial.uniforms.edgeGlow.value=this.edgeGlow,o&&e.context.enable(e.context.STENCIL_TEST),this.renderToScreen?(e.setRenderTarget(null),e.clear(),e.render(this.scene,this.camera)):(e.setRenderTarget(t),e.clear(),e.render(this.scene,this.camera),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=t.texture,e.setRenderTarget(this.resultRenderTarget),e.clear(),e.render(this.scene,this.camera)),e.setClearColor(this.oldClearColor,this.oldClearAlpha),e.autoClear=i},getEdgeDetectionMaterial:function(){return new n.ShaderMaterial({uniforms:{maskTexture:{value:null},texSize:{value:new n.Vector2(.5,.5)},edgeColor:{value:new n.Vector3(1,1,1)}},vertexShader:"varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }",fragmentShader:"varying vec2 vUv;                uniform sampler2D maskTexture;                uniform vec2 texSize;                uniform vec3 edgeColor;                                void main() {\n                    vec2 invSize = 1.0 / texSize;                    vec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);                    vec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);                    vec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);                    vec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);                    vec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);                    float b1 = max(c1.a, c2.a);                    float b2 = max(c3.a, c4.a);                    float a = max(b1, b2);                    gl_FragColor = vec4(edgeColor, a);                }"})},getSeperableBlurMaterial:function(e){return new n.ShaderMaterial({defines:{MAX_RADIUS:e},uniforms:{colorTexture:{value:null},texSize:{value:new n.Vector2(.5,.5)},direction:{value:new n.Vector2(.5,.5)},kernelRadius:{value:1}},vertexShader:"varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }",fragmentShader:"#include <common>                varying vec2 vUv;                uniform sampler2D colorTexture;                uniform vec2 texSize;                uniform vec2 direction;                uniform float kernelRadius;                                float gaussianPdf(in float x, in float sigma) {                    return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;                }                void main() {                    vec2 invSize = 1.0 / texSize;                    float weightSum = gaussianPdf(0.0, kernelRadius);                    vec4 diffuseColor = texture2D( colorTexture, vUv);                    vec4 diffuseSum = diffuseColor * weightSum;                    vec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);                    vec2 uvOffset = delta;                    for( int i = 1; i <= MAX_RADIUS; i ++ ) {                        float w = gaussianPdf(uvOffset.x, kernelRadius);                        vec4 sample1 = texture2D( colorTexture, vUv + uvOffset);                        vec4 sample2 = texture2D( colorTexture, vUv - uvOffset);                        diffuseSum += ((sample1 + sample2) * w);                        weightSum += (2.0 * w);                        uvOffset += delta;                    }                    vec4 color = diffuseSum/weightSum;                     gl_FragColor = color;                }"})},getOverlayMaterial:function(){return new n.ShaderMaterial({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},tex:{value:null},edgeStrength:{value:1},edgeGlow:{value:1}},vertexShader:"varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }",fragmentShader:"varying vec2 vUv;                uniform sampler2D maskTexture;                uniform sampler2D edgeTexture1;                uniform sampler2D edgeTexture2;                uniform sampler2D tex;                uniform float edgeStrength;                uniform float edgeGlow;                                void main() {                    vec4 edgeValue1 = texture2D(edgeTexture1, vUv);                    vec4 edgeValue2 = texture2D(edgeTexture2, vUv);                    vec4 maskColor = texture2D(maskTexture, vUv);                    vec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;                    vec4 texColor = texture2D(tex, vUv);                    vec4 finalColor = edgeStrength * edgeValue;                    float a = finalColor.a * (1.0 - maskColor.b);                    gl_FragColor = vec4(finalColor.rgb*a, a) + texColor*(1.0-a);                }",blending:n.NormalBlending,depthTest:!1,depthWrite:!1,transparent:!0})}}),ae.BlurDirectionX=new n.Vector2(1,0),ae.BlurDirectionY=new n.Vector2(0,1);var oe=new n.Color,ie=function(e,r,t){$.call(this),this.textureID=void 0!==r?r:"tDiffuse",this.blending=void 0!==t?t:1,e instanceof n.ShaderMaterial?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=n.UniformsUtils.clone(e.uniforms),this.material=new n.ShaderMaterial({defines:e.defines||{},uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.material.blending=this.blending),this.camera=new n.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new n.Scene,this.quad=new n.Mesh(new n.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad),this.resultTargetBuffer=a.compositorTextureBuffer.get("_result")};ie.prototype=Object.assign(Object.create($.prototype),{constructor:ie,render:function(e,r,t,n,a){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=this.resultTargetBuffer.texture),this.quad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),e.render(this.scene,this.camera)):(e.setRenderTarget(r||null),this.clear&&e.clear(),e.render(this.scene,this.camera))},splitRender:function(e,r,t,n,a){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=t.texture);var o=e.getClearAlpha(),i=e.autoClear;e.autoClear=!1,this.clear&&(oe.copy(e.getClearColor()),e.setClearColor(this.clearColor,this.clearAlpha)),this.quad.material=this.material,e.setRenderTarget(r),this.clear&&e.clear(),e.render(this.scene,this.camera),this.clear&&e.setClearColor(oe,o),e.autoClear=i}});var se=function(e,r){this.name="RectBlurEffect";var t={minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat};this.renderTargetInfo={renderTarget:[],MSAA:[]},this.resultRenderTarget=a.compositorTextureBuffer.get("_result"),this.resultRenderTarget1=a.compositorTextureBuffer.get("_result1"),this.tempRenderTarget=new n.WebGLRenderTarget(e,r,t),this.tempRenderTarget2=new n.WebGLRenderTarget(e,r,t),this.renderTargetInfo.renderTarget.push(this.tempRenderTarget),this.renderTargetInfo.renderTarget.push(this.tempRenderTarget2),this.tempRenderTarget3=new n.WebGLRenderTarget(e,r,t),this.tempRenderTarget4=new n.WebGLRenderTarget(e,r,t),this.renderTargetInfo.renderTarget.push(this.tempRenderTarget3),this.renderTargetInfo.renderTarget.push(this.tempRenderTarget4),this.blurPass=new ie(ue),this.blendPass=new ie(le),this.blendPass.uniforms.blendTexture.value=this.tempRenderTarget.texture;var o=J.createShaders("CopyShader");this.copyPass=new ie(o),this.bounds=[[0,0,1,1]],this.radius=5,this.targetNums=4};se.prototype=Object.assign(Object.create($.prototype),{constructor:se,dispose:function(){this.tempRenderTarget.dispose(),this.tempRenderTarget2.dispose(),this.tempRenderTarget3.dispose(),this.tempRenderTarget4.dispose()},setSize:function(e,r){this.tempRenderTarget.setSize(e,r),this.tempRenderTarget2.setSize(e,r),this.tempRenderTarget3.setSize(e,r),this.tempRenderTarget4.setSize(e,r)},getRenderTargetInfo:function(){return this.renderTargetInfo},render:function(e,r,t,n,o){for(var i=this,s=this.tempRenderTarget3.width,l=this.tempRenderTarget3.height,u=2+2*Math.floor(this.radius/2),c=0;c<u;c++){this.blurPass.uniforms.resolution.value.set(1/s,1/l);var d=this.radius*(c+1)/u;c%2==0?(this.blurPass.uniforms.direction.value.set(d,0),this.blurPass.splitRender(e,this.tempRenderTarget2,0===c?this.resultRenderTarget:this.tempRenderTarget)):(this.blurPass.uniforms.direction.value.set(0,d),this.blurPass.splitRender(e,this.tempRenderTarget,this.tempRenderTarget2))}this.copyPass.splitRender(e,this.resultRenderTarget1,this.resultRenderTarget);var f=this.resultRenderTarget1,h=this.tempRenderTarget3,m=void 0;this.bounds.forEach(function(r,t){i.blendPass.uniforms.bounds.value.fromArray(r),i.blendPass.splitRender(e,t===i.bounds.length-1?i.resultRenderTarget:h,f),m=f,f=h,h=0===t?i.tempRenderTarget4:m}),this.renderToScreen&&(a._resultRenderTarget&&a._resultRenderTarget.isWebGLRenderTarget&&(this.copyPass.clear=!0,this.copyPass.render(e,a._resultRenderTarget),this.copyPass.clear=!1),this.copyPass.render(e))}});var le={defines:{},uniforms:{tDiffuse:{value:null},bounds:{value:new n.Vector4(0,0,1,1)},blendTexture:{value:null}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",fragmentShader:"\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform sampler2D blendTexture;\n\n\t\tuniform vec4 bounds;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\t\t\tvec4 color = texture2D(tDiffuse, vUv);\n            vec3 color2 = texture2D(blendTexture, vUv).rgb;\n\n            float blend = step(vUv.x, bounds.z) \n                * step(bounds.x, vUv.x)\n                * step(1. - bounds.w, vUv.y) \n                * step(vUv.y, 1. - bounds.y);\n\n\t\t\tcolor.rgb = mix(color.rgb, color2, blend);\n\t\t\tgl_FragColor = color;\n\t\t}\n    "},ue={defines:{SAMPLERS:9},uniforms:{tDiffuse:{value:null},resolution:{value:new n.Vector2(1/1024,1/512)},direction:{value:new n.Vector2(1,0)}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n    ",fragmentShader:"\n        uniform sampler2D tDiffuse;\n        uniform vec2 resolution;\n        uniform vec2 direction;\n        varying vec2 vUv;\n\n        #if (SAMPLERS == 5) \n            vec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n                vec4 color = vec4(0.0);\n                vec2 off1 = vec2(1.3333333333333333) * direction;\n                color += texture2D(image, uv) * 0.29411764705882354;\n                color += texture2D(image, uv + (off1 * resolution)) * 0.35294117647058826;\n                color += texture2D(image, uv - (off1 * resolution)) * 0.35294117647058826;\n                return color; \n            }\n        #endif\n        #if (SAMPLERS == 9)\n            vec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n                vec4 color = vec4(0.0);\n                vec2 off1 = vec2(1.3846153846) * direction;\n                vec2 off2 = vec2(3.2307692308) * direction;\n                color += texture2D(image, uv) * 0.2270270270;\n                color += texture2D(image, uv + (off1 * resolution)) * 0.3162162162;\n                color += texture2D(image, uv - (off1 * resolution)) * 0.3162162162;\n                color += texture2D(image, uv + (off2 * resolution)) * 0.0702702703;\n                color += texture2D(image, uv - (off2 * resolution)) * 0.0702702703;\n                return color;\n            }\n        #endif\n        #if (SAMPLERS == 13)\n            vec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n                vec4 color = vec4(0.0);\n                vec2 off1 = vec2(1.411764705882353) * direction;\n                vec2 off2 = vec2(3.2941176470588234) * direction;\n                vec2 off3 = vec2(5.176470588235294) * direction;\n                color += texture2D(image, uv) * 0.1964825501511404;\n                color += texture2D(image, uv + (off1 * resolution)) * 0.2969069646728344;\n                color += texture2D(image, uv - (off1 * resolution)) * 0.2969069646728344;\n                color += texture2D(image, uv + (off2 * resolution)) * 0.09447039785044732;\n                color += texture2D(image, uv - (off2 * resolution)) * 0.09447039785044732;\n                color += texture2D(image, uv + (off3 * resolution)) * 0.010381362401148057;\n                color += texture2D(image, uv - (off3 * resolution)) * 0.010381362401148057;\n                return color;\n            }\n        #endif\n\n        void main() {\n            gl_FragColor = blur(tDiffuse, vUv, resolution, direction);\n        }\n    "},ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},de=function(e,r){if($.call(this),""!==e){var t=(e=this._parseInitialisePass(e)).nodes;r=r||e.name,this.name=r,this.type="InitialisePass",this.isUpdate=!0,this.bigUpdate=!1,this.renderTargets={},this.passes=t,this.renderScene=a.scene,this.renderCamera=a.camera,this.renderTargetInfo={renderTarget:[],MSAA:[]},this.schemeName="";var i=a.renderSize[0],s=a.renderSize[1];this.renderTargetSourceBuffer=a.compositorTextureBuffer.get("_source");this.renderTargetSourceBuffer.webglDepthRenderbuffer;"FocusRegion"===r?this.schemeTargetBuffer=o.createTextureBuffer("scheme_"+r,i,s):(this.schemeTargetBuffer=o.createTargetBuffer("scheme_"+r,i,s),o.setDepth(this.schemeTargetBuffer)),"FocusRegion"===r?this.renderTargetInfo.renderTarget.push(this.schemeTargetBuffer):"Glow"!==r&&"SmallGlow"!==r&&"UrealBloom"!==r&&"InnerGlow"!==r&&"PostRadialBlur2"!==r||this.renderTargetInfo.MSAA.push(this.schemeTargetBuffer),this.visibilityTargetBuffer=o.createTextureBuffer("visibility",i,s),this.visibilityTargetBuffer.depthBuffer=!0,this.visibilityTargetBuffer1=o.createTargetBuffer("visibility1",i,s),o.setDepth(this.visibilityTargetBuffer1),this.visibilityTargetBuffer1.depthBuffer=!0,"FocusRegion"===r&&(this.renderTargetInfo.renderTarget.push(this.visibilityTargetBuffer),this.renderTargetInfo.MSAA.push(this.visibilityTargetBuffer1)),this.resultTargetBuffer=a.compositorTextureBuffer.get("_result"),this.resultTargetBuffer1=a.compositorTextureBuffer.get("_result1"),this.schemeTextureName="",this.updateSchemeTexture=!1,this.depthMaterial=new n.MeshDepthMaterial,this.depthMaterial.side=n.DoubleSide,this.depthMaterial.depthPacking=n.RGBADepthPacking,this.depthMaterial.blending=n.NoBlending;for(var l=0;l<t.length;l++){var u=t[l],c=u.outputs.color.parameters.width,d=u.outputs.color.parameters.height,f=o.createTextureBuffer(u.name,c,d);this.renderTargets[u.name]=f,this.renderTargetInfo.renderTarget.push(f)}for(var h=0;h<t.length;h++){var m=t[h],v=J.createShaders(m.shader),p=new n.ShaderMaterial(v),g=m.parameters,x=m.defines;for(var T in g){if("ColorRegion"===this.name){for(var b=[],S=0;S<30;S++)b.push(new n.Vector4(0,0,0,0));p.uniforms.boundingBox.value=b}p.uniforms[T]&&void 0!==p.uniforms[T].value&&(p.uniforms[T].value=g[T])}p.defines=x;var y=m.inputs;for(var w in y)p.uniforms[w]={value:""},"source"===y[w]?p.uniforms[w].value=this.resultTargetBuffer.texture:"result"===y[w]?p.uniforms[w].value=this.resultTargetBuffer.texture:"visibility_mask"===w?this.visibilityFlags=parseInt(y[w]):"visibility_mask1"===w?this.visibilityFlags1=parseInt(y[w]):"visibility"===y[w]?p.uniforms[w].value=this.visibilityTargetBuffer.texture:"visibility1"===y[w]?p.uniforms[w].value=this.visibilityTargetBuffer1.texture:"origin"===y[w]?p.uniforms[w].value=this.renderTargetSourceBuffer.texture:"schemeName"===w?this.schemeName=y[w]:"scheme"===y[w]?(p.uniforms[w].value=this.schemeTargetBuffer.texture,this.schemeTextureName=w):"depth"===y[w]?p.uniforms.depthTexture.value=this.depthTexture:this.renderTargets[y[w]]&&(p.uniforms[w].value=this.renderTargets[y[w]].texture);p.blending=n.NoBlending,p.needsUpdate=!0,m.material=p,a.compositorMaterialBuffer.add(r+"_"+m.name,p)}var _=J.createShaders("CopyShader");this.copyUniforms=n.UniformsUtils.clone(_.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new n.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:_.vertexShader,fragmentShader:_.fragmentShader,blending:n.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.oldClearColor=new n.Color,this.oldClearAlpha=1,this.camera=new n.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new n.Scene,this.basic=new n.MeshBasicMaterial,this.quad=new n.Mesh(new n.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad),this.targetNums=Object.getOwnPropertyNames(this.renderTargets).length}};de.prototype=Object.assign(Object.create($.prototype),{constructor:de,dispose:function(){var e=this.renderTargets;for(var r in e)e[r].dispose()},setSchemeName:function(e){this.schemeName&&(this.schemeName=e)},getRenderTargetInfo:function(){return this.renderTargetInfo},setSchemeMultisampleTextureBuffer:function(e){},clone:function(e){var r={};for(var t in e instanceof Array&&(r=[]),e){var n=e[t];"object"===(void 0===n?"undefined":ce(n))?r[t]=this.clone(n):r[t]=n}return r},setSize:function(e,r){for(var t=this._parseInitialisePass(this.clone(this.data)).nodes,n=0;n<t.length;n++){var a=t[n],o=a.outputs.color.parameters.width,i=a.outputs.color.parameters.height;this.renderTargets[a.name].setSize(o,i);var s=this.passes[n].material;s.uniforms.texSize&&(s.uniforms.texSize.value=a.parameters.texSize),s.needsUpdate=!0}},_updateReadBuffer:function(e){var r=this.schemeName;if(r){ne.getStrategy(this.name,r).getRenderStrategy(),e.materialManager.setMode(r),e.setRenderTarget(this.schemeTargetBuffer);var t=a.compositorBuffer.get(this.name);"glow"===r||"smallGlow"===r||"PostRadialBlur2"===r?2===t.schemeTarget?e.clear(!0,!1,!0):e.clear(!0,!0,!0):"focusRegion"===r||"RadialOffset"===r?e.clear(!0,!0,!0):e.clear(!0,!1,!0),e.initRenderList=!1,e.render(this.renderScene,this.renderCamera),e.initRenderList=!0,e.materialManager.setMode(0)}},_updateFocusRegionVisibilityBuffer:function(e,r,t,n){t&&(e.materialManager.hasStrategy(t)||e.materialManager.addStrategy(t,function(e,r,t,a,o,i){return 2===n?1024===this.visibilityFlags?null:"BackgroundCubeMaterial"===o.type?null:o:this.visibilityFlags===n?o:"BackgroundCubeMaterial"===o.type?o:null}),e.materialManager.setMode(t),e.setRenderTarget(r),e.clear(),e.initRenderList=!1,e.render(this.renderScene,this.renderCamera),e.initRenderList=!0,e.materialManager.setMode(0))},_updateLastPassBuffer:function(e,r){this._updateReadBuffer(e);for(var t=this.passes,n=0;n<t.length;n++){var a=t[n],o=a.name;this.quad.material=a.material,n==t.length-1?(e.setRenderTarget(r),e.render(this.scene,this.camera)):(e.setRenderTarget(this.renderTargets[o]),e.clear(),e.render(this.scene,this.camera))}},render:function(e,r,t,o,i){this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha();var s=this.renderScene.autoUpdate,l=e.initRenderList,u=e.autoClear,c=this.renderScene.background;e.autoClear=!1,this.renderScene.background=null,this.renderScene.autoUpdate=!1,e.setClearColor(new n.Color(0,0,0),0);var d=this.passes;if(this.isUpdate){if("FocusRegion"===this.name&&(this._updateFocusRegionVisibilityBuffer(e,this.visibilityTargetBuffer1,this.visibilityFlags1,2),e.renderCustom1=!0,this.renderScene.background=c,this._updateFocusRegionVisibilityBuffer(e,this.visibilityTargetBuffer,this.visibilityFlags,1024),this.renderScene.background=null,e.renderCustom1=!1),this._updateReadBuffer(e,t),d.length>1)for(var f=0;f<d.length-1;f++){var h=d[f],m=h.name;this.quad.material=h.material,e.setRenderTarget(this.renderTargets[m]),e.clear(),e.render(this.scene,this.camera)}"FocusRegion"!==this.name&&"Glow"!==this.name&&"SmallGlow"!==this.name&&"InnerGlow"!==this.name&&"UrealBloom"!==this.name&&"PostRadialBlur2"!==this.name||(this.isUpdate=!1)}var v=d[d.length-1],p=v.name;this.quad.material=v.material,e.setRenderTarget(this.renderTargets[p]),e.clear(),e.render(this.scene,this.camera),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargets[p].texture,e.setRenderTarget(this.resultTargetBuffer),e.clear(),e.render(this.scene,this.camera),this.renderToScreen&&(this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.resultTargetBuffer.texture,a._resultRenderTarget&&a._resultRenderTarget.isWebGLRenderTarget&&(e.setRenderTarget(a._resultRenderTarget),e.clear(),e.render(this.scene,this.camera)),e.setRenderTarget(null),e.clear(),e.render(this.scene,this.camera)),this.renderScene.autoUpdate=s,this.renderScene.background=c,e.setClearColor(this.oldClearColor,this.oldClearAlpha),e.autoClear=u,e.initRenderList=l},_debug:function(e,r,t,n,a){this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetSourceBuffer.texture;for(var o=0;o<10;o++)e.setRenderTarget(this.resultTargetBuffer),e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(this.resultTargetBuffer1),e.clear(),e.render(this.scene,this.camera);this.renderToScreen&&(this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.resultTargetBuffer.texture,e.setRenderTarget(null),e.clear(),e.render(this.scene,this.camera)),this.renderScene.autoUpdate=r,this.renderScene.background=t,e.setClearColor(this.oldClearColor,this.oldClearAlpha),e.autoClear=n,e.initRenderList=a},update:function(){this.isUpdate=!0},_parseInitialisePass:function(e){var r=e.nodes,t=this._parsePassData(r);return e.nodes=t,e},_parsePassData:function(e){for(var r=[],t=0;t<e.length;t++){var n=e[t],o=n.parameters,i=n.defines;for(var s in i)i[s]=this._parseParameterData(i[s]);for(var l in o)o[l]=this._parseParameterData(o[l]);n.outputs.color.parameters.width=Math.round(n.outputs.color.parameters.width.split("expr")[1]*a.renderSize[0]),n.outputs.color.parameters.height=Math.round(n.outputs.color.parameters.height.split("expr")[1]*a.renderSize[1]),r.push(n)}return r},_parseParameterData:function(e){var r=a.renderSize[0],t=a.renderSize[1];if("string"==typeof e){var o;if((e=e.split("expr")).length>1){var i=JSON.parse(e[1]);o=i.length&&i.length>1?new n.Vector2(Math.round(i[0]*r),Math.round(i[1]*t)):i*r}else o=this._parseBaseData(JSON.parse(e[0]));return o}console.log("the data is not a string")},_parseBaseData:function(e,r){return r=r||1,e.length?2==e.length?new n.Vector2(e[0]*r,e[1]*r):3==e.length?new n.Vector3(e[0]*r,e[1]*r,e[2]*r):4==e.length?new n.Vector4(e[0]*r,e[1]*r,e[2]*r,e[3]*r):e[0]*r:e*r}});var fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},he={initT3dPassPool:function(){var e={},r=void 0;for(var t in l)e[(r=l[t]).name]=r;a.compositorPool.add("initialisePool",e)},clone:function(e){var r={};for(var t in e instanceof Array&&(r=[]),e){var n=e[t];"object"===(void 0===n?"undefined":fe(n))?r[t]=this.clone(n):r[t]=n}return r},createPass:function(e,r,t){var o=a.compositorPool.get("initialisePool"),i=null,s=a.renderSize[0],l=a.renderSize[1],u=o[e];if(u)(i=new de(this.clone(u))).specialID="initial",i.data=u,t&&i.setSchemeName(t),this._createSpecialUniform(e);else switch(e){case"BLOOM":i=new re(new n.Vector2(s,l),1.5,.4,.2);break;case"Outline":t=void 0===t?"outline":t,(i=new ae(new n.Vector2(s,l),t)).edgeColor=new n.Color(0,1,0),i.hiddenEdgeColor=new n.Color(0,.2,0),i.edgeGlow=0,i.edgeThickness=1,i.edgeStrength=1.5;break;case"RectBlurEffect":i=new se(s,l);break;case"FXAA":(i=new ie(J.createShaders("FXAA3Shader"),"tDiffuse",n.AdditiveBlending)).material.uniforms.resolution.value=new n.Vector2(1/s,1/l),i.renderToScreen=!0;break;case"Copy":i=new ie(J.createShaders("CopyShader"))}return r&&(i.name=r,e=r),a.passBuffer.get(e)||a.passBuffer.add(e,i),i},_createSpecialUniform:function(e){var r=void 0;switch(e){default:break;case"Glow":(r=a.compositorMaterialBuffer.get("Glow_Bloom")).uniforms.bloomFactors.value=[1,.8,.6,.4,.2],r.uniforms.bloomTintColors.value=[new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1)];break;case"SmallGlow":(r=a.compositorMaterialBuffer.get("SmallGlow_Bloom")).uniforms.bloomFactors.value=[1,.8,.6,.4,.2],r.uniforms.bloomTintColors.value=[new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1),new n.Vector3(1,1,1)]}},getPass:function(e){return this.passes[e]}},me=t(16),ve=t.n(me),pe=t(15),ge=t.n(pe),xe=function e(r){var t=r.target;t.removeEventListener("dispose",e),a.materialBuffer.getKeys(t.uuid).map(function(e){a.materialBuffer.get(e).dispose(),a.materialBuffer.delete(e)})},Te={createMaterial:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[0,0,0,1],r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:te.DEFAULT,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n.Math.generateUUID();if(Array.isArray(e))3===e.length&&e.push(1);else{var o=new n.Color(e);e=[o.r,o.g,o.b,1]}var i=a.materialBuffer.get(t);if(!i){switch(r){case 1:var s={color:{type:"c",value:new n.Color(e[0],e[1],e[2])},alpha:{value:e[3]}};i=new n.ShaderMaterial({uniforms:s,vertexShader:ve.a,fragmentShader:ge.a});break;case 2:(i=new n.SpriteMaterial({color:new n.Color(e[0],e[1],e[2])})).opacity=e[3]}a.materialBuffer.add(t,i)}return i},cloneMaterial:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t=arguments[2];t=t||n.Math.generateUUID(),t+=r.toString();var o=a.materialBuffer.get(t);return o||(e.addEventListener("dispose",xe),(o=e.clone()).isShaderMaterial&&o.uniforms.strength?o.uniforms.strength.value=r:(r<1&&o.transparent?(o.opacity=r,o.defines=o.defines||{},o.defines.PREMULTIPLIED_ALPHA=!0,o.blending=n.CustomBlending,o.blendEquation=n.AddEquation,o.blendSrc=n.OneFactor,o.blendDst=n.ZeroFactor,o.blendSrcAlpha=n.ZeroFactor,o.blendDstAlpha=n.OneFactor):o.color&&(o.color.r*=r,o.color.g*=r,o.color.b*=r),o.envMap=null),a.materialBuffer.add(t,o)),o},getMaterialStrategyBySchemeName:function(e,r){return"string"==typeof e?"true"===e?"scheme":"skip"===e?"skip":"nonScheme":!0===e?"scheme":"nonScheme"}},be=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}();var Se=function(){function e(r,t,n){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=r,this.schemeName=t||"",this.processStrategy=null,this.processSchemeStrategy=null,this.processNonSchemeStrategy=null,this.renderer=n,this.custom=!1,a.compositorSchemeStrategyBuffer.add(this.name+"_"+this.schemeName,this)}return be(e,[{key:"getMaterial",value:function(e,r){var t=void 0,n=e.technique?e.technique[this.schemeName]:null,a=null,o=!1;return n&&("[object Object]"===toString.call(n)?(a=n.value,o=n.skip):a=n),"skip"===a&&(o=!0,a=null),this.processStrategy?this.processStrategy(e,r,a,o):(a?this.processSchemeStrategy?t=this.processSchemeStrategy(e,r,a):(t=r,e.technique1={},e.technique1[this.schemeName]=!0):t=o?null:this.getNonSchemeMaterial(e,r),t)}},{key:"getNonSchemeMaterial",value:function(e,r){if(this.processNonSchemeStrategy)return this.processNonSchemeStrategy(e,r);if(1024===e.visibilityFlags)return null;var t=void 0;return(t=e.isSprite?r.transparent&&1!==r.opacity?this.createMaterial([0,0,0,1],te.SPRITE,"_defaultNonSchemeTransSprite"):this.createMaterial([0,0,0,1],te.SPRITE,"_defaultNonSchemeSprite"):r.transparent&&1!==r.opacity?this.createMaterial([0,0,0,0],te.DEFAULT,"_defaultNonSchemeTransparent"):this.createMaterial([0,0,0,1],te.DEFAULT,"_defaultNonScheme")).depthTest=r.depthTest,t.depthWrite=r.depthWrite,t.side=r.side,t.transparent=r.transparent,t}},{key:"setSchemeStrategy",value:function(e){this.processStrategy=e}},{key:"createMaterial",value:function(e,r,t){return Te.createMaterial(e,r,this.name+"_"+t)}},{key:"cloneMaterial",value:function(e,r,t){return Te.cloneMaterial(e,r,t)}},{key:"getRenderStrategy",value:function(){var e=this.renderer,r=this.schemeName,t=this;e.materialManager.hasStrategy(r)||e.materialManager.addStrategy(r,function(e,r,n,a,o,i){var s=void 0;return s=this.t3dMaterial?this.t3dMaterial.getTechnique(0).getPass(0).material:o,t.getMaterial(this,s)})}},{key:"setCustom",value:function(e){this.custom=e||!1}},{key:"getCustom",value:function(){return this.custom}}]),e}(),ye=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}();var we=function(){function e(r){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=r||n.Math.generateUUID(),this.enable=!1,this.passes=[],this.schemeName=[],this.defaultProgramParameter=1,this.schemeStrategy=new Map,this.updateNums=0,this.schemeTarget=2,this.sprite=null,a.compositorBuffer.add(r,this)}return ye(e,[{key:"forceUpdate",value:function(e){e.length&&e.map(function(e){e.update&&e.update()})}},{key:"addPass",value:function(e,r){var t=a.passBuffer.get(r);if(t||(t=he.createPass(e,r)),t&&t.schemeName){var n=t.schemeName;this.schemeName.push(n),this.schemeStrategy.set(n,new Se(this.name,n,a.renderer))}this.passes.push(t)}},{key:"getPass",value:function(e){return void 0===e||null===e?this.passes:this.passes[e]}},{key:"removePass",value:function(e){}},{key:"setEnabled",value:function(e){this.enable=e||!1,this.update()}},{key:"setGpuProgramParameter",value:function(e,r,t,o){var i=a.compositorMaterialBuffer.get(this.name+"_"+e);if(i){var s=i.uniforms;s[r]&&(s[r].value=2==o?new n.Vector2(t[0],t[1]):3==o?new n.Vector3(t[0],t[1],t[2]):4==o?new n.Vector4(t[0],t[1],t[2],t[3]):t)}}},{key:"update",value:function(){this.forceUpdate(this.passes)}},{key:"setDefaultProgramParameter",value:function(){var e=1;arguments.length&&void 0!==arguments[0]&&(e=arguments[0]),this.defaultProgramParameter=e}},{key:"dispose",value:function(){this.passes.map(function(e){e.dispose()})}},{key:"changeToSchemeTarget",value:function(){this.schemeTarget=1,this.update()}},{key:"changeToRenderBufferTarget",value:function(){this.schemeTarget=2,this.update()}},{key:"getRenderTargetNums",value:function(){var e=0;return this.passes.map(function(r){var t=r.targetNums||0;e+=t}),e}},{key:"getRenderTargetInfo",value:function(){return this.passes[0].getRenderTargetInfo?this.passes[0].getRenderTargetInfo():{renderTarget:[],MSAA:[]}}},{key:"getRenderTargetMemory",value:function(){var e=this.getRenderTargetInfo(),r=0;return e.renderTarget.map(function(e){r+=e.width*e.height*4*2}),e.MSAA.map(function(e){r+=e.width*e.height*4*e.samples+e.width*e.height}),(r=(r/=1048576).toFixed(1))+"M"}},{key:"showScheme",value:function(){var e=!0;if(arguments.length&&void 0!==arguments[0]&&(e=arguments[0]),e){var r=this.passes[0].schemeTargetBuffer;if(!this.sprite){var t=new n.SpriteMaterial({map:r.texture});this.sprite=new n.Sprite(t),this.sprite.scale.set(r.width,r.height,1),this.sprite.position.set(0,0,-10),a.debugMode.scene=new n.Scene,a.debugMode.scene.add(this.sprite);var o=a.renderSize;a.debugMode.camera2D=new n.OrthographicCamera(-o[0]/2,o[0]/2,o[1]/2,-o[1]/2,.1,100)}}else a.debugMode.scene&&this.sprite&&(a.debugMode.scene.remove(this.sprite),this.sprite=null,a.debugMode.scene=null,a.debugMode.camera2D=null)}}]),e}(),_e=function(e,r){if(this.renderer=e,void 0===r){var t={minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat,stencilBuffer:!1},o=e.getDrawingBufferSize(new n.Vector2);(r=new n.WebGLRenderTarget(o.width,o.height,t)).texture.name="EffectComposer.rt1"}this.renderTarget1=r,this.renderTarget2=r.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,a.compositorTextureBuffer.add("_defaultReadBuffer",this.readBuffer),a.compositorTextureBuffer.add("_defaultWriteBuffer",this.writeBuffer),this.passes=[],void 0===c&&console.error("THREE.EffectComposer relies on THREE.CopyShader"),void 0===ie&&console.error("THREE.EffectComposer relies on THREE.ShaderPass"),this.copyPass=new ie(c),this._previousFrameTime=Date.now()};Object.assign(_e.prototype,{clearAllPass:function(){var e=this.passes;e.length>1&&e.splice(1,e.length-1)},swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e},addPass:function(e){this.passes.push(e)},insertPass:function(e,r){this.passes.splice(r,0,e)},render:function(e){void 0===e&&(e=.001*(Date.now()-this._previousFrameTime)),this._previousFrameTime=Date.now();var r,t,o=!1,i=this.passes.length;for(t=0;t<i;t++)if(!1!==(r=this.passes[t]).enabled){if(r.render(this.renderer,this.writeBuffer,this.readBuffer,e,o),r.needsSwap){if(o){var s=this.renderer.context;s.stencilFunc(s.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),s.stencilFunc(s.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==n.MaskPass&&(r instanceof n.MaskPass?o=!0:r instanceof ClearMaskPass&&(o=!1))}this.renderer.renderCustom1=!0,a.debugMode.scene&&(this.renderer.clear(!0,!0,!0),this.renderer.render(a.debugMode.scene,a.debugMode.camera2D))},reset:function(e){if(void 0===e){var r=this.renderer.getDrawingBufferSize(new n.Vector2);(e=this.renderTarget1.clone()).setSize(r.width,r.height)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(e,r){a.renderSize=[e,r];for(var t=a.compositorTextureBuffer.getAll(),n=0;n<t.length;n++)t[n].setSize(e,r);var o=a.compositorStackBuffer.get("_defaultStack");o&&o.stack.map(function(t){t.passes.map(function(t){t.setSize(e,r)})})}});var Be=function(e,r,t,o,i){$.call(this),this.renderScene=e,this.renderCamera=r,this.overrideMaterial=t,this.clearColor=o,this.clearAlpha=void 0!==i?i:0,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this.saveSourceTarget=!0;var s=J.createShaders("CopyShader");this.copyUniforms=n.UniformsUtils.clone(s.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new n.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,blending:n.NoBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.camera=new n.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new n.Scene,this.basic=new n.MeshBasicMaterial,this.quad=new n.Mesh(new n.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad),this.resultTargetBuffer=a.compositorTextureBuffer.get("_result"),this.sourceTargetBuffer=a.compositorTextureBuffer.get("_source")};Be.prototype=Object.assign(Object.create($.prototype),{constructor:Be,render:function(e,r,t,n,o){e.renderCustom1=!0;var i,s,l=e.autoClear;e.autoClear=!1,this.clearColor&&(i=e.getClearColor().getHex(),s=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha),e.setRenderTarget(this.resultTargetBuffer),e.clear()),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:this.sourceTargetBuffer),this.clear&&e.clear(),e.render(this.renderScene,this.renderCamera),this.renderToScreen?a._resultRenderTarget&&(this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.sourceTargetBuffer.texture,a._resultRenderTarget.isWebGLRenderTarget&&(e.setRenderTarget(a._resultRenderTarget),e.clear(),e.render(this.scene,this.camera))):(this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.sourceTargetBuffer.texture,e.setRenderTarget(this.resultTargetBuffer),e.clear(),e.render(this.scene,this.camera)),this.clearColor&&e.setClearColor(i,s),this.scene.overrideMaterial=null,e.autoClear=l,e.renderCustom1=!1}});var Me={init:function(){o.initTargetBuffer();var e=new _e(a.renderer);e.setSize(a.renderSize[0],a.renderSize[1]);var r=new Be(a.scene,a.camera,null,new n.Color(0,0,0),0);e.addPass(r),new s(e,"_defaultStack")},createCompositorCache:function(){he.initT3dPassPool(),this.init(),new we("Copy").addPass("Copy"),new we("BLOOM").addPass("BLOOM"),new we("FXAA").addPass("FXAA"),new we("Outline").addPass("Outline"),new we("RectBlurEffect").addPass("RectBlurEffect");var e=a.compositorPool.get("initialisePool");for(var r in e){new we(r).addPass(r)}}},Re={render:function(){a.compositorStackBuffer.get("_defaultStack").render()},setSize:function(e,r){a.compositorStackBuffer.get("_defaultStack").setSize(e,r)},update:function(){a.compositorStackBuffer.get("_defaultStack").update()}},De={loadCache:function(){Me.createCompositorCache()},toString:function(){return"compositorManager"},addCompositor:function(e,r,t,n){a.compositorStackBuffer.get("_defaultStack").addCompositor(e,r)},removeCompositor:function(e,r,t){a.compositorStackBuffer.get("_defaultStack").removeCompositor(e)},setCompositorEnabled:function(e,r,t,n){var o=a.compositorBuffer.get(e);o&&(r=r||!1,o.setEnabled(r),r&&Re.update())},setParameter:function(e,r,t,n,o){var i=a.compositorBuffer.get(e);i&&(i.setGpuProgramParameter(r,t,n,o),this.update())},update:function(e){if(void 0!==e){var r=this.getCompositor(e);r&&r.update()}else Re.update()},getCompositor:function(e){return a.compositorBuffer.get(e)},getCompositorStack:function(){return a.compositorStackBuffer.get("_defaultStack")},getBuffer:function(){return a},init:function(e){var r=this;["Glow","SmallGlow","UrealBloom","Outline","InnerGlow","RadialOffset","FocusRegion","BLOOM","ColorAdjust","ColorAdjust","SimpleBlur","RectBlurEffect","FXAA","PostRadialBlur2"].forEach(function(e){r.addCompositor(e,""),r.setCompositorEnabled(e,!1)})},setFXAA:function(e){this.setCompositorEnabled("FXAA",e)},createCompositor:function(e,r,t){var n=a.compositorBuffer.get(e);return n||(n=new we(e),he.createPass(r,e,t),n.addPass(r,e),ne.getStrategy(e,t)),n},getCompositorBySchemeName:function(e){var r=a.compositorBuffer.getAll(),t=null,n=function(){var n=r[k];n.schemeName.map(function(r){if(r===e)return t=n})};for(var o in r)n();return t},isCompositorAdded:function(e){for(var r=a.compositorStackBuffer.get("_defaultStack"),t=!1,n=0;n<r.stack.length;n++)if(r.stack[n].name==e){t=!0;break}return t},disableEffect:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];a.disableEffect=!!e},setDefaultProgramParameter:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t=a.compositorBuffer.get(e);t&&(t.setDefaultProgramParameter(r),t.update())},setRenderTarget:function(e){a._resultRenderTarget=e},changeToNormalRenderer:function(){var e=a.compositorStackBuffer.get("_defaultStack");a.oldStack=e.stack,e.stack=[],e.update()},changeToCompositorRenderer:function(){var e=a.compositorStackBuffer.get("_defaultStack");a.oldStack&&(e.stack=a.oldStack),e.update()},dispose:function(){a.compositorStackBuffer.get("_defaultStack").stack.map(function(e){e.dispose()})},getRenderTargetNums:function(){var e={WebGLMultisampleRenderTarget:1,WebGLRenderTarget:0};return a.compositorStackBuffer.get("_defaultStack").stack.map(function(r){if(r.enable){var t=r.name;"Glow"===t||"UrealBloom"===t||"SmallGlow"===t?e.WebGLMultisampleRenderTarget+=1:-1!==t.indexOf("Outline")||-1!==t.indexOf("outline")?e.WebGLMultisampleRenderTarget+=1:"FocusRegion"===t&&(e.WebGLMultisampleRenderTarget+=2,e.WebGLRenderTarget+=1),e.WebGLRenderTarget+=r.getRenderTargetNums()||1}}),e}},Ue=function(e){return e.substring(0,1).toUpperCase()+e.substring(1,e.length)},Ce=new n.EventDispatcher;Ce.addEventListener("effectChanged",function(e){var r=e.effectName,t=a.effect.getAll(),n=r,o=Ue(n),i=a.compositorBuffer.get(o);if(i)if(0===t[n].size)i.setEnabled(!1);else{var s=0;t[n].forEach(function(e){e.disableTechnique||s++}),s>0?i.setEnabled(!0):i.setEnabled(!1)}});var Ee=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}();var Ie=function(){function e(r,t,n,a){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this._size=[],this.compositorManager=De,this._init(r,t,n,a),De.init(),3===a&&De.setFXAA(!0)}return Ee(e,[{key:"_init",value:function(e,r,t,a){var o=e.getDrawingBufferSize(new n.Vector2);this._size[0]=o.width,this._size[1]=o.height,this.initCompositor(r,t,e,this._size,a)}},{key:"initCompositor",value:function(e,r,t,n){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;a.renderSize=n,a.scene=e,a.camera=r,a.renderer=t,a.isWebGL2=t.capabilities.isWebGL2,a.renderTarget=o,this.onWindowResize(n),De.loadCache()}},{key:"onWindowResize",value:function(e){a.renderSize=e}},{key:"setConfig",value:function(e){var r=e.postEffect,t=r.bloom,n=De.getCompositor("BLOOM").passes[0];De.setCompositorEnabled("BLOOM",t.enable),n.strength=t.strength,n.threshold=t.threshold,n.radius=t.radius;var a=r.colorCorrection;De.setParameter("ColorAdjust","colorAdjustment","brightness",a.brightness,1),De.setParameter("ColorAdjust","colorAdjustment","contrast",a.contrast,1),De.setParameter("ColorAdjust","colorAdjustment","exposure",a.exposure,1),De.setParameter("ColorAdjust","colorAdjustment","gamma",a.gamma,1),De.setParameter("ColorAdjust","colorAdjustment","saturation",a.saturation,1),De.setCompositorEnabled("ColorAdjust",a.enable);var o=r.blur,i=De.getCompositor("RectBlurEffect").passes[0];De.setCompositorEnabled("RectBlurEffect",o.enable),i.bounds=o.bounds,i.radius=o.radius}},{key:"enable",value:function(e){var r=De.getCompositorBySchemeName(e);if(r)De.setCompositorEnabled(r.name,!0),De.isCompositorAdded(r.name)||De.addCompositor(r.name,4);else if(-1!==e.indexOf("outline_")){var t=e.split("outline_")[1];t.split("0x").length>1&&(t="#"+t.split("0x")[1]),(r=De.createCompositor(e,"Outline",e,t)).getPass(0).edgeColor=new n.Color(t),De.addCompositor(e,4),De.setCompositorEnabled(e,!0)}}},{key:"disable",value:function(e){var r=De.getCompositorBySchemeName(e);r&&(De.setCompositorEnabled(r.name,!1),-1!==e.indexOf("outline_")&&De.removeCompositor(e))}},{key:"render",value:function(e,r,t,n){De.setRenderTarget(n),Re.render()}},{key:"setSize",value:function(e,r){Re.setSize(e,r),De.update()}},{key:"update",value:function(e){"SmallGlow"!==e&&De.update(e)}}],[{key:"add",value:function(e,r,t){!function(e,r,t){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(void 0===e.technique)e.technique={};else if(void 0===t&&e.technique[r])return;t=void 0===t?1:t,e.technique[r]&&e.technique[r].value||(e.technique[r]={value:1,skip:!1}),e.technique[r].value=t,e.technique[r].skip=n,a.effect.add(r,e);var o=Ue(r),i=a.compositorBuffer.get(o);i&&i.update(),Ce.dispatchEvent({type:"effectChanged",effectName:r})}(e,r,t)}},{key:"remove",value:function(e,r){!function(e,r){e.technique&&e.technique[r]&&delete e.technique[r],a.effect.delete(r,e);var t=Ue(r),n=a.compositorBuffer.get(t);n&&n.update(),Ce.dispatchEvent({type:"effectChanged",effectName:r})}(e,r)}}]),e}();window.THREEx||(window.THREEx={});var Ae=Ie;window.THREEx.EffectManager=Ie;r.default=Ae}])});