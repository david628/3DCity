{"version":3,"sources":["storage/IndexedDB.js","file/Zip.js","views/TestPage/index.js"],"names":["indexedDB","props","this","name","version","db","Object","assign","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","console","warn","callback","request","open","onupgradeneeded","event","target","result","objectStoreNames","contains","createObjectStore","onsuccess","onerror","error","transaction","objectStore","get","data","start","performance","now","put","log","exec","Date","toFixed","clear","link","document","createElement","zip","publish","output","ret","JSON","stringify","key","value","parseFloat","replace","file","title","manager","THREE","blob","filename","generate","type","href","URL","createObjectURL","download","dispatchEvent","MouseEvent","loader","load","content","join","TestPage","handleClick","e","preventDefault","set","dsc","getTime","state","IndexedDB","init","onClick","Component"],"mappings":"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","file":"static/js/10.d915d98d.chunk.js","sourcesContent":["export default class indexedDB {\r\n    constructor(props) {\r\n        this.name = 'editor';\r\n        this.version = 1;\r\n        this.db = null;\r\n        Object.assign(this, props);\r\n        this.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n        if(!this.indexedDB) {\r\n            console.warn('Storage: IndexedDB not available.');\r\n        }\r\n        return this;\r\n    }\r\n    init(callback) {\r\n        const request = this.indexedDB.open(this.name, this.version);\r\n        request.onupgradeneeded = event => {\r\n            const db = event.target.result;\r\n            if (db.objectStoreNames.contains('states') === false) {\r\n                db.createObjectStore('states');\r\n            }\r\n        };\r\n        request.onsuccess = event => {\r\n            this.db = event.target.result;\r\n            callback && callback();\r\n        };\r\n        request.onerror = event => {\r\n            console.error('IndexedDB', event);\r\n        };\r\n        return this;\r\n    }\r\n    get(callback) {\r\n        const transaction = this.db.transaction(['states'], 'readwrite');\r\n        const objectStore = transaction.objectStore('states');\r\n        const request = objectStore.get(0);\r\n        request.onsuccess = event => {\r\n            callback && callback(event.target.result);\r\n        };\r\n    }\r\n    set(data) {\r\n        const start = performance.now();\r\n        const transaction = this.db.transaction(['states'], 'readwrite');\r\n        const objectStore = transaction.objectStore('states');\r\n        const request = objectStore.put(data, 0);\r\n        request.onsuccess = () => {\r\n            console.log('[' + /\\d\\d\\:\\d\\d\\:\\d\\d/.exec(new Date())[0] + ']', 'Saved state to IndexedDB. ' + (performance.now() - start).toFixed(2) + 'ms');\r\n        };\r\n    }\r\n    clear() {\r\n        if (!this.db) {\r\n            return;\r\n        }\r\n        const transaction = this.db.transaction(['states'], 'readwrite');\r\n        const objectStore = transaction.objectStore('states');\r\n        const request = objectStore.clear();\r\n        request.onsuccess = () => {\r\n            console.log('[' + /\\d\\d\\:\\d\\d\\:\\d\\d/.exec(new Date())[0] + ']', 'Cleared IndexedDB.');\r\n        };\r\n\r\n    }\r\n}","import * as THREE from 'three';\r\n// import { JSZip } from './jszip';\r\n\r\nconst link = document.createElement('a');\r\nconst save = (blob, filename) => {\r\n    link.href = URL.createObjectURL( blob );\r\n    link.download = filename || 'data.json';\r\n    link.dispatchEvent(new MouseEvent('click'));\r\n    // URL.revokeObjectURL( url ); breaks Firefox...\r\n}\r\n//const zip = new window.JSZip();\r\nlet zip = {};\r\nconst publish = function() {\r\n    let output = {\r\n        ret: true,\r\n        data: []\r\n    };\r\n    output = JSON.stringify(output, (key, value) => {\r\n\t\tconst precision = 6;\r\n\t\treturn typeof value === 'number' ? parseFloat(value.toFixed(precision)) : value;\r\n\t}, '\\t');\r\n    output = output.replace(/[\\n\\t]+([\\d\\.e\\-\\[\\]]+)/g, '$1');\r\n\r\n    zip.file('app.json', output);\r\n\r\n    const title = 'TEST';\r\n\r\n    const manager = new THREE.LoadingManager(() => {\r\n        save(zip.generate({ type: 'blob' }), `${title}.zip`);\r\n    });\r\n    const loader = new THREE.FileLoader(manager);\r\n\r\n    loader.load('template/index.html', content => {\r\n        content = content.replace('<!-- title -->', title);\r\n        const includes = [];\r\n        content = content.replace('<!-- includes -->', includes.join('\\n\\t\\t'));\r\n        //const editButton = '';\r\n        // if (config.getKey('project/editable')) {\r\n        //     editButton = [\r\n        //         '',\r\n        //         '\t\t\tvar button = document.createElement( \\'a\\' );',\r\n        //         '\t\t\tbutton.href = \\'https://threejs.org/editor/#file=\\' + location.href.split( \\'/\\' ).slice( 0, - 1 ).join( \\'/\\' ) + \\'/app.json\\';',\r\n        //         '\t\t\tbutton.style.cssText = \\'position: absolute; bottom: 20px; right: 20px; padding: 10px 16px; color: #fff; border: 1px solid #fff; border-radius: 20px; text-decoration: none;\\';',\r\n        //         '\t\t\tbutton.target = \\'_blank\\';',\r\n        //         '\t\t\tbutton.textContent = \\'EDIT\\';',\r\n        //         '\t\t\tdocument.body.appendChild( button );',\r\n        //         ''\r\n        //     ].join('\\n');\r\n        // }\r\n        //content = content.replace('\\n\\t\\t\\t/* edit button */\\n', editButton);\r\n        zip.file('index.html', content);\r\n    });\r\n    loader.load('template/app.js', content => {\r\n        zip.file('js/app.js', content);\r\n    });\r\n    loader.load('template/threeJS.js', content => {\r\n        zip.file('js/threeJS.js', content);\r\n    });\r\n    loader.load('template/THREEx.EffectManager.js', content => {\r\n        zip.file('js/THREEx.EffectManager.js', content);\r\n    });\r\n}\r\nexport default publish;","import React, { Component } from 'react';\r\nimport IndexedDB from '@/storage/IndexedDB';\r\nimport publish from '@/file/Zip';\r\nimport './index.less';\r\n\r\n\r\nclass TestPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n        this.db = new IndexedDB().init(() => {\r\n            this.db.get(state => {\r\n                console.log(state);\r\n            });\r\n        });\r\n    }\r\n    handleClick = type => {\r\n        return e => {\r\n            e.preventDefault();\r\n            if(type === 'update') {\r\n                this.db.set({\r\n                    dsc: new Date().getTime()\r\n                });\r\n            } else if(type === 'clear') {\r\n                this.db.clear();\r\n            } else if(type === 'publish') {\r\n                publish();\r\n            }\r\n            this.db.get(state => {\r\n                console.log(state);\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={ this.handleClick('update') }>update</button>\r\n                <button onClick={ this.handleClick('clear') }>clear</button>\r\n                <button onClick={ this.handleClick('publish') }>publish</button>\r\n            </div>\r\n        );\r\n    }\r\n};\r\nexport default TestPage;"],"sourceRoot":""}