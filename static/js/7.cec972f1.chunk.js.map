{"version":3,"sources":["components/Engine/core/Common/Utils.js","components/Engine/core/Common/Consts.js","components/Engine/core/Layer/Layer.js","components/Engine/core/Common/GeoJSON.js","components/Engine/core/Common/Cache.js","components/Engine/core/Shaders/GlobeVS.glsl","components/Engine/core/jsm/renderers/CSS2DRenderer.js","components/Engine/core/Layer/BuildingLayer.js","components/Engine/core/Layer/LabelLayer.js","components/Engine/core/Layer/LineLayer.js","components/Engine/core/Layer/PointLayer.js","components/Engine/core/Layer/PolygonLayer.js","components/Engine/core/Layer/ScanLayer.js","components/Engine/core/Shaders/GlobeFS1.glsl","components/Engine/core/Shaders/GlobeFS2.glsl","components/Engine/core/Shaders/GlobeFS3.glsl","components/Engine/core/Layer sync /^/.*$","components/Engine/core/Materials/MaterialUtil.js","components/Engine/core/Materials/GlobeMaterial1.js","components/Engine/core/Materials/GlobeMaterial2.js","components/Engine/core/Materials/GlobeMaterial3.js","components/Engine/core/Scene/Globe.js","components/Engine/core/Cameras/CombinedCamera.js","components/Engine/core/Cameras/Viewport.js","components/Engine/core/Cameras/Camera.js","components/Engine/core/Controls/CameraControl.js","components/Engine/core/Controls/EarthOrbitControls.js","components/Engine/core/View.js"],"names":["Utils","radius","RADIUS","normalizeVector","vec","a","b","length","Math","sqrt","sub","c","undefined","subtractVectors","isVector3","x","y","z","this","lonlatToWorldHeight","lonLat","lon","lat","theta","PI","phi","s","cos","sin","lonLatToWorld","worldToLonLat","pos","op","t","r","n","i","o","getAngleBetweenVectors","vectorDistance","lonLatToWebMercator","lonLatToMercator","log","tan","arrayToFloat32Array","arr","len","rs","Float32Array","getDistanceFromArray","cross","dot","vectorDotProduct","vectorLength","vectorCrossProduct","radiansToDegrees","radians","aVec","bVec","acos","getCenterCoord","coord","isVisible","mesh","layers","mask","setVisible","is","enable","disable","visible","param","arguments","userData","useVisibleOnly","parent","alwaysPickable","test","setPosition","vec3","THREE","Array","isArray","set","clone","position","copy","updateMatrixWorld","setDirection","sourceArr","targetArr","source","getWorldDirection","parentWL","worldToLocal","newParentWL","p","normalize","quaternion","setFromUnitVectors","setRotationFromQuaternion","transPosition","posArr","dom","camera","project","halfWidth","innerWidth","offsetWidth","halfHeight","innerHeight","offsetHeight","round","getColor","color","indexOf","start","_color","substring","split","Number","trim","Layer","props","node","remove","children","config","isEffect","name","value","window","THREEx","EffectManager","add","GeoJSON","toGeometry","geoJson","callback","outer","result","properties","type","rewindRings","obj","push","rings","rewindRing","ring","dir","area","minLng","Infinity","maxLng","minLat","maxLat","j","reverse","Cache","init","cacheList","save","cacheName","key","Map","get","delete","getAll","module","exports","CSS2DObject","element","Object3D","call","document","createElement","style","addEventListener","traverse","object","Element","parentNode","removeChild","prototype","Object","assign","create","constructor","recursive","cloneNode","CSS2DRenderer","_width","_height","_widthHalf","_heightHalf","_this","vector","Vector3","viewMatrix","Matrix4","viewProjectionMatrix","cache","objects","WeakMap","domElement","overflow","getSize","width","height","setSize","renderObject","scene","onBeforeRender","setFromMatrixPosition","matrixWorld","applyMatrix4","WebkitTransform","MozTransform","oTransform","transform","display","objectData","distanceToCameraSquared","getDistanceToSquared","appendChild","onAfterRender","l","object1","object2","distanceToSquared","zOrder","sorted","filterAndFlatten","sort","zMax","zIndex","render","autoUpdate","matrixWorldInverse","multiplyMatrices","projectionMatrix","BuildingLayer","effect","topColor","sideColor","buildingTextureSize","buildingMaskTextureSize","material1","side","transparent","opacity","material2","material","data","createMesh","coordinates","clear","geoJSON","setStyle","coords","center","centerPos","polygon","k","point","shape","bufferGeometry","topUV","sideUV1","sideUV2","sideUV3","sideUV4","sideUV5","sideUV6","sideUV7","boundingBox","setFromPoints","UVGenerator","generateTopUV","geometry","indexA","indexB","indexC","indexD","min","max","h","f","d","m","g","generateSideWallUV","v","toIn","sideUV","extrudeBufferGeometry","steps","depth","extrudeMaterial","bevelEnabled","extrudeNormals","attributes","normal","array","extrudePositions","setAttribute","concat","uv","needsUpdate","topImg","topOpacity","sideImg","sideOpacity","map","view","textureLoader","load","item","wrapS","wrapT","anisotropy","preHeight","scale","forEach","setEffect","updateEffect","LabelLayer","fontColor","fontSize","lineColor","lineOpacity","lineMaterial","texture","doms","lng","innerHTML","iconUrl","content","cube","positions","line","backgroundColor","LineLayer","speed","imageUrl","depthWrite","path","curve3","img","direction","setHex","offset","PointLayer","size","blending","depthTest","linePositions","lineGeometry","sortParticles","PolygonLayer","outlineColor","outlineOpacity","outers","holes","points","hole","Cesium","gm","polygonHierarchy","extrudedHeight","indices","createGeometry","values","positionsArr","st","normals","setIndex","ScanLayer","uniforms","time","vertexShader","fragmentShader","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","resolve","createUniform","uniform","fogDensity","fogNear","fogFar","fogColor","fogAlpha","grayFilterEnable","colorMapping","TexSampler0","textureRectangle0","textureTransAndScale0","alphaIndex0","brightness0","Km","Kr","ESun","nSamples","fSamples","v3LightPosInput","fInnerRadius","fOuterRadius","fScaleDepth","v3CameraPosInput","south1","north1","southMercatorY1","oneOverMercatorHeight1","isReProjection","objectPos","inputColor","alphaValue","isAddEffect0","earthColor0","earthAddColor0","night","contrast","hue","saturation","textureGamma","nightfadeIn","nightfadeOut","fadeInDist","fadeOutDist","u_initialColor","czm_fogDensity","shadowOpacity","merge","lights","GlobeMaterial1","GlobeVS","GlobeFS1","fog","TexSampler1","alphaIndex1","textureRectangle1","textureTransAndScale1","brightness1","isAddEffect1","earthColor1","south2","north2","southMercatorY2","oneOverMercatorHeight2","GlobeMaterial2","GlobeFS2","TexSampler2","alphaIndex2","textureRectangle2","textureTransAndScale2","brightness2","isAddEffect2","earthColor2","earthAddColor1","earthAddColor2","south3","north3","southMercatorY3","oneOverMercatorHeight3","GlobeMaterial3","GlobeFS3","ImageryReleaseReference","scope","image","dispose","ImageryLayerCreateTexture","imagery","src","encodeURI","TileReplacementQueueTrimTiles","tileToTrim","tileName","_level","_x","_y","materialName","Globe","sceneType","Scene_2D","Scene_3D","cssFilter","globeMaterials","textureRectangles","textureTransAndScales","alphaIndexs","souths","norths","southMercatorYs","oneOverMercatorHeights","brightnesses","addEffects","earthColors","mode","quadTileMatrial","quadTileRelativePos","_recorder","shift","splice","quadTileRadius","quadTileEncode","curOrbit","_camera","dirty","materialDirty","tileCacheSize","_imageryLayerCollection","mapProjection","_terrainProvider","ellipsoid","_frameState","passes","frameNumber","cameraPos","positionCartographic","perspectiveOffCenterFrustum","_surfaceShaderSet","_surface","tileProvider","terrainProvider","imageryLayers","surfaceShaderSet","crossOrigin","setMap","url","goHome","mapConfig","addImageryLayer","lookAt","tileMaterials","_tileNeedUpdate","imageryLayer","_resource","_url","end","includes","subDomains","replace","_subdomains","_imageryProvider","addImageryProvider","changeStyle","viewPort","fov","cameraDirection","cameraUp","frameState","positionWC","directionWC","upWC","cartesianToCartographic","SCENE3D","unproject","COLUMBUS_VIEW","fovy","actualWidth","actualHeight","aspectRatio","drawWidth","drawHeight","getFov","atan","sseDenominator","near","far","top","bottom","right","left","cullingVolume","computeCullingVolume","context","incrementWrap","afterRender","frustum","drawingBufferWidth","drawingBufferHeight","shadowState","shadowsEnabled","getPosition","setFarClipDistance","setNearClipDistance","updateCamera","update","getViewport","getDirection","getUp","getFrameState","beginFrame","endFrame","draw","_tilesToRenderByTextureCount","tilesToRender","isRender","quadtreeTiles","terrainMesh","titleName","tileMaterialName","quadtreeTile","terrainData","_mesh","tileNameCreater","boundingSphere3D","isNeedUpdate","textureCount","textureName","readyImagery","createImageUrl","updateMesh","renderEarthTexure","cacheShow","renderEarthShader","interleavedBuffer","vertices","encoding","stride","getStride","count","quantization","BITS12","u","floor","multiplyByPoint","fromScaledENU","tile","tileImagerys","tileMaterial","_tileMaterial","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","level","updateShader","_fogDensity","layerIndex","_layerIndex","textureTranslationAndScale","textureTransAndScale","w","textureCoordinateRectangle","textureRectangle","south","rectangle","north","southMercatorY","oneOverMercatorHeight","loadingImagery","brightness","filterColor","addEffect","gamma","shaderMaterial","index","names","_name","tiles","isNeedUpdateTexture","_useTerrain","matrial","pNode","mName","currentSrc","CombinedCamera","orthoNear","orthoFar","cameraO","cameraP","zoom","matrixTween","toPerspective","updateProjectionMatrix","projectionMatrixInverse","inPerspectiveMode","inOrthographicMode","aspect","orthoSize","toOrthographic","setViewOffset","clearViewOffset","parseInt","radToDeg","setFov","rotation","rotationAutoUpdate","_backupProjectionMatrix","isOrthoLerping","isOrthographicCamera","toPerspectiveCamera","isPerspectiveLerping","lerpMatrix","fromMatrix","toMatrix","stop","complete","getEffectiveFOV","setFromMatrix","intersectsBox","matrixAutoUpdate","updateMatrix","matrixWorldNeedsUpdate","matrix","getInverse","Viewport","el","clientTop","clientLeft","Camera","raycaster","lookAtArr","lastPos","lastRay","inX","inY","inZ","toString","mouse","setFromCamera","ray","ori","origin","translateX","translateY","translateZ","widthHalf","heightHalf","localToWorld","p1","localToWorldPos","p2","setNear","setFar","useFixed","fixedAxis","up","target","control","fromArray","toArray","subVectors","CameraControl","opt","uniformSpeed","getEarthCameraInfoByPositionAndTarget","heading","pitch","tilt","cameraInfo","getEarthCameraInfo","from","to","angleTo","distanceTo","_h","getCameraPositionAndTargetByLonLat","_","correctUp","directFlyTo","abs","E","directFly","rotateFlyTo","applyAxisAngle","projectOnPlane","multiplyScalar","rotateByVector","distance","disablePick","getCameraUpByPositionAndTarget","T","M","R","S","Date","getTime","onUpdate","getSpeed","crossVectors","_p","preUpdate","EarthOrbitControls","A","F","P","O","L","B","C","D","H","I","N","U","pow","zoomSpeed","V","setFromAxisAngle","q","W","maxPolarAngle","minPolarAngle","G","body","isPerspectiveCamera","clientWidth","mousePanSpeed","clientHeight","enablePan","X","minZoom","maxZoom","enableZoom","Y","J","touches","pageX","pageY","Q","mouseDown","enabled","preventDefault","button","mouseButtons","ORBIT","enableRotate","clientX","clientY","ZOOM","PAN","mouseMove","mouseUp","dispatchEvent","rotateSpeed","removeEventListener","self","ee","clearTimeout","setTimeout","wheel","stopPropagation","deltaY","keyDown","enableKeys","keyCode","UP","keyPanSpeed","BOTTOM","LEFT","RIGHT","touchStart","touchMove","touchEnd","contextMenu","isEarth","_leftInteractive","_keepTarget","minDistance","maxDistance","maxPitchAngle","_minPolarAngle","_maxPolarAngle","degToRad","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","dampingZoomFactor","zoomFactor","autoRotate","autoRotateSpeed","MIDDLE","target0","position0","zoom0","standardRadius","targetMaxOffset","panStander","isDispatchEvent","enableZoomOnTarget","options","_isCameraStatic","setOptions","option","_parseToThreeMouseKey","moveKey","zoomKey","rotationKey","_parseToThingMouseKey","getOptions","getPolarAngle","getAzimuthalAngle","getRotationSpherePhi","getSphericalRadius","saveState","reset","setState","state","_getIntersectPoint","requestAnimationFrame","lerp","console","_getState","intersectObjects","intersectSphere","equals","_getIntersectPointByMouse","screenToWorld","_getIntersectQuaternion","multiply","_correctCube","setFromVector3","applyQuaternion","_correctSphericalRotation","_getAngle","autoFixTarget","setFromSpherical","rotate","pan","move","earthRotate","setLeftInteractive","panDelta","View","alias","objectManager","getElementById","renderCamera","renderer","canvas","getContext","preserveDrawingBuffer","antialias","alpha","logarithmicDepthBuffer","info","autoReset","setPixelRatio","devicePixelRatio","autoClear","sortObjects","shadowMap","background","picker","onAfterUpdate","CSSRender","initLight","initEffect","initEvent","tick","bind","setAnimationLoop","handleResize","handleClick","resize","onBeforeSelect","changedTouches","changedTouche","rendererCamera","intersects","intersectObject","selectedObject","onSelect","onAfterSelect","objs","cubeTextureLoader","setPath","cubeTexture","light","compositorRender","cls","require","default","uid","generateUUID","addMap","layer"],"mappings":"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","file":"static/js/7.cec972f1.chunk.js","sourcesContent":["import * as THREE from 'three';\r\nimport Consts from './Consts';\r\n\r\n// // 屏幕坐标转世界坐标\r\n// osg::Vec3d ScreenToWorld(const osg::Vec3d screen)\r\n// {\r\n// \tosg::Camera* camera = _global->Viewer->getCamera();\r\n// \tosg::Matrix VPW = camera->getViewMatrix() * camera->getProjectionMatrix() * camera->getViewport()->computeWindowMatrix();\r\n// \tosg::Matrix inverseVPW = osg::Matrix::inverse(VPW);\r\n// \tosg::Vec3d world = screen * inverseVPW;\r\n// \treturn world;\r\n// }\r\n\r\n// // 世界坐标转屏幕坐标\r\n// osg::Vec3d WorldToScreen(const osg::Vec3d world)\r\n// {\r\n// \tosg::Camera* camera = _global->Viewer->getCamera();\r\n// \tosg::Matrix VPW = camera->getViewMatrix() * camera->getProjectionMatrix() * camera->getViewport()->computeWindowMatrix();\r\n// \tosg::Vec3d screen = world * VPW;\r\n// \treturn screen;\r\n// }\r\n// // 世界坐标转经纬度\r\n// osg::Vec3d WorldToLonLatAlt(const osg::Vec3d world)\r\n// {\r\n// \tosg::EllipsoidModel* em = new osg::EllipsoidModel();\r\n// \tosg::Vec3d lonLatAlt;\r\n// \tem->convertXYZToLatLongHeight(world.x(), world.y(), world.z(), lonLatAlt.y(), lonLatAlt.x(), lonLatAlt.z());\r\n// \tlonLatAlt.x() = osg::RadiansToDegrees(lonLatAlt.x());\r\n// \tlonLatAlt.y() = osg::RadiansToDegrees(lonLatAlt.y());\r\n// \treturn lonLatAlt;\r\n// }\r\n// // 经纬度转世界坐标\r\n// osg::Vec3d LonLatAltToWorld(const osg::Vec3d lonLatAlt)\r\n// {\r\n// \tosg::Vec3d world;\r\n// \tosg::EllipsoidModel* em = new osg::EllipsoidModel();\r\n// \tem->convertLatLongHeightToXYZ(osg::DegreesToRadians(lonLatAlt.y()), osg::DegreesToRadians(lonLatAlt.x()), lonLatAlt.z(), world.x(), world.y(), world.z());\r\n// \treturn world;\r\n// }\r\n// // 屏幕坐标转经纬度\r\n// osg::Vec3d ScreenToLonLatAlt(const osg::Vec3d screen)\r\n// {\r\n// \treturn WorldToLonLatAlt(ScreenToWorld(screen));\r\n// }\r\n// // 经纬度转屏幕坐标\r\n// osg::Vec3d LonLatAltToScreen(const osg::Vec3d lonLatAlt)\r\n// {\r\n// \treturn WorldToScreen(LonLatAltToWorld(lonLatAlt));\r\n// }\r\n\r\n\r\nconst Utils = {\r\n    //TOLERANCE: 0.00001,\r\n    //radius: 6378000,\r\n    radius: Consts.RADIUS,\r\n    normalizeVector: function (vec) {\r\n        let a, b;\r\n        if (vec.length === 4) {\r\n            a = vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2];\r\n            b = Math.sqrt(a);\r\n            vec[0] = vec[0] !== 0 ? vec[0] / b : 0;\r\n            vec[1] = vec[1] !== 0 ? vec[1] / b : 0;\r\n            vec[2] = vec[2] !== 0 ? vec[2] / b : 0;\r\n            vec[3] = vec[3] !== 0 ? vec[2] / b : 0;\r\n        } else {\r\n            a = vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2];\r\n            b = Math.sqrt(a);\r\n            vec[0] = vec[0] !== 0 ? vec[0] / b : 0;\r\n            vec[1] = vec[1] !== 0 ? vec[1] / b : 0;\r\n            vec[2] = vec[2] !== 0 ? vec[2] / b : 0;\r\n        }\r\n        return vec;\r\n    },\r\n    sub: function (a, b, c) {\r\n        if (c === null || c === undefined) {\r\n            c = [0, 0, 0];\r\n        }\r\n        c[0] = a[0] - b[0];\r\n        c[1] = a[1] - b[1];\r\n        c[2] = a[2] - b[2];\r\n        return c;\r\n    },\r\n    subtractVectors: function (a, b, c) {\r\n        if (a.isVector3) {\r\n            a = [a.x, a.y, a.z];\r\n        }\r\n        if (b.isVector3) {\r\n            b = [b.x, b.y, b.z];\r\n        }\r\n        return this.sub(a, b, c);\r\n    },\r\n    lonlatToWorldHeight: function (lonLat, radius) {\r\n        let lon = lonLat[0];\r\n        let lat = lonLat[1];\r\n        let theta = lon / 180 * Math.PI;\r\n        let phi = lat / 180 * Math.PI;\r\n        if(radius === null || radius === undefined) {\r\n            radius = 0;\r\n        }\r\n        let s = radius * Math.cos(phi);\r\n        let y = radius * Math.sin(phi);\r\n        let x = -s * Math.cos(theta);\r\n        let z = s * Math.sin(theta);\r\n        return [x, y, z];\r\n    },\r\n    lonLatToWorld: function (lonLat, radius) {\r\n        return this.lonlatToWorldHeight(lonLat, this.radius + (radius || 0))\r\n        // let lon = lonLat[0];\r\n        // let lat = lonLat[1];\r\n        // let theta = lon / 180 * Math.PI;\r\n        // let phi = lat / 180 * Math.PI;\r\n        // if(radius === null || radius === undefined) {\r\n        //     radius = this.radius;\r\n        // } else {\r\n        //     radius = this.radius + radius;\r\n        // }\r\n        // let s = radius * Math.cos(phi);\r\n        // let y = radius * Math.sin(phi);\r\n        // let x = -s * Math.cos(theta);\r\n        // let z = s * Math.sin(theta);\r\n        // return [x, y, z];\r\n    },\r\n    worldToLonLat: function (pos, op) {\r\n        let t = op;\r\n        if (!t) {\r\n            t = [0, 0, 0];\r\n        }\r\n        let r = this.subtractVectors(pos, t),\r\n            n = r[1],\r\n            i = r[2],\r\n            o = [r[0], 0, r[2]];\r\n        r = this.normalizeVector(r);\r\n        o = this.normalizeVector(o);\r\n        let a = 180 - this.getAngleBetweenVectors(o, [1, 0, 0]),\r\n            s = this.getAngleBetweenVectors(o, r);\r\n        if (i < 0) {\r\n            a = -a;\r\n        }\r\n        if (n < 0) {\r\n            s = -s;\r\n        }\r\n        return [a, s, this.vectorDistance(pos, t) - this.radius];\r\n    },\r\n    // worldToLonLat: function(aPos, b) {\r\n    //     let bPos = b || [0, 0, 0];\r\n    //     let r = this.subtractVectors(aPos, bPos),\r\n    //         n = r[1],\r\n    //         i = r[2],\r\n    //         o = [r[0], 0, r[2]];\r\n    //     r = this.normalizeVector(r),\r\n    //         o = this.normalizeVector(o);\r\n    //     let a = 180 - this.getAngleBetweenVectors(o, [1, 0, 0]),\r\n    //         s = this.getAngleBetweenVectors(o, r);\r\n    //     if (i < 0) {\r\n    //         a = -a;\r\n    //     }\r\n    //     if (n < 0) {\r\n    //         s = -s;\r\n    //     }\r\n    //     return [a, s, this.vectorDistance(aPos, bPos) - this.radius];\r\n    // },\r\n    // convertWorldToLonLat: function(pos) {\r\n    //     return this.worldToLonLat(pos);\r\n    // },\r\n    // convertLonLatToWorld: function(a, b) {\r\n    //     if (a.length === 3 && b === undefined) {\r\n    //         b = a[2];\r\n    //     }\r\n    //     return this.convertLonLatToWorld(a, b);\r\n    // },\r\n    // convertLonLatToWorld: function (a, b = 0) {\r\n    //     // if(b === null || b === undefined) {\r\n    //     //     b = 0;\r\n    //     // }\r\n    //     return this.lonLatToWorld(a, b + this.radius);\r\n    // },\r\n    lonLatToWebMercator: function(pos) {\r\n        return this.lonLatToMercator(pos);\r\n    },\r\n    lonLatToMercator: function (pos) {\r\n        let x = 20037508.34 * pos[0] / 180;\r\n        let y = Math.log(Math.tan((90 + pos[1]) * Math.PI / 360)) / (Math.PI / 180);\r\n        y = 20037508.34 * y / 180;\r\n        if (y > 20037508.34) {\r\n            y = 20037508.34;\r\n        }\r\n        if (y < -20037508.34) {\r\n            y = -20037508.34;\r\n        }\r\n        return [x, y];\r\n    },\r\n    arrayToFloat32Array: function (arr) {\r\n        let len = arr.length;\r\n        let rs = new Float32Array(len);\r\n        for (let i = 0; i < len; i++) {\r\n            rs[i] = arr[i];\r\n        }\r\n        return rs;\r\n    },\r\n    getDistanceFromArray: function (a, b) {\r\n        return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\r\n    },\r\n    cross: function (a, b, rs) {\r\n        if (rs === null || rs === undefined) {\r\n            rs = [0, 0, 0];\r\n        }\r\n        rs[0] = a[1] * b[2] - a[2] * b[1];\r\n        rs[1] = a[2] * b[0] - a[0] * b[2];\r\n        rs[2] = a[0] * b[1] - a[1] * b[0];\r\n        return rs;\r\n    },\r\n    dot: function (a, b) {\r\n        return a.x * b.x + a.y * b.y + a.z * b.z;\r\n    },\r\n    vectorDotProduct: function (a, b) {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n    },\r\n    vectorDistance: function (a, b) {\r\n        let pos = this.subtractVectors(a, b);\r\n        return this.vectorLength(pos);\r\n    },\r\n    vectorLength: function (vec) {\r\n        return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\r\n    },\r\n    vectorCrossProduct: function (a, b, c) {\r\n        return this.cross(a, b, c);\r\n    },\r\n    radiansToDegrees: function (radians) {\r\n        return radians / (Math.PI * 2) * 360;\r\n    },\r\n    getAngleBetweenVectors: function (aVec, bVec) {\r\n        let rs = this.vectorDotProduct(aVec, bVec);\r\n        // if (rs > 1 && rs < 1 + this.TOLERANCE) {\r\n        //     rs = 1;\r\n        // } else if (rs < -1 && rs > -1 - this.TOLERANCE) {\r\n        //     rs = -1;\r\n        // }\r\n// if(rs > 1 || rs < 1) {\r\n//     rs = 1;\r\n// }        \r\n        return this.radiansToDegrees(Math.acos(rs));\r\n    },\r\n    getCenterCoord: function(coord) {\r\n        let x = 0;\r\n        let y = 0;\r\n        for(let i = 0; i < coord.length; i++) {\r\n            x += coord[i][0];\r\n            y += coord[i][1];\r\n        }\r\n        x /= coord.length;\r\n        y /= coord.length;\r\n        return [x, y];\r\n    },\r\n    isVisible: function(mesh) {\r\n        return !!(1 & mesh.layers.mask);\r\n    },\r\n    setVisible: function(mesh, is) {\r\n        if(is) {\r\n            mesh.layers.enable(0);\r\n        } else {\r\n            mesh.layers.disable(0);\r\n        }\r\n    },\r\n    visible: function (mesh, param) {\r\n        let t = !(arguments.length > 2 && arguments[2] !== undefined) || arguments[2];\r\n        if (param === undefined) {\r\n            if (mesh.userData.useVisibleOnly) {\r\n                return mesh.visible;\r\n            }\r\n            for (let i = mesh; i; i = i.parent) {\r\n                if (!i.visible) {\r\n                    return false;\r\n                }\r\n            }\r\n            return this.isVisible(mesh);\r\n        }   \r\n        if (typeof param !== 'boolean') {\r\n            let r = mesh.userData;\r\n            if (!r.alwaysPickable) {\r\n                for (let n = mesh; n;) {\r\n                    if (!n.visible) {\r\n                        return false;\r\n                    }\r\n                    if (param && !n.layers.test(param.layers)) {\r\n                        return false;\r\n                    }\r\n                    n = n.parent;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        let o = param;\r\n        if(mesh.userData.useVisibleOnly) {\r\n            mesh.visible = o;\r\n        } else {\r\n            this.setVisible(mesh, o);\r\n            if(t) {\r\n                mesh.visible = o;\r\n            }\r\n        }\r\n    },\r\n    setPosition: function(mesh, pos) {\r\n        let vec3 = new THREE.Vector3(0, 0, 0);\r\n        if(Array.isArray(pos)) {\r\n            vec3.set(pos[0], pos[1], pos[2]);\r\n        } else if(pos.isVector3) {\r\n            vec3 = pos.clone();\r\n        } else {\r\n            vec3.set(pos.x, pos.y, pos.z);\r\n        }\r\n        mesh.position.copy(vec3);\r\n        (mesh.parent || mesh).updateMatrixWorld();\r\n    },\r\n    setDirection: function(mesh, sourceArr, targetArr) {\r\n        let vec3 = new THREE.Vector3(), source = new THREE.Vector3(sourceArr[0], sourceArr[1], sourceArr[2]);\r\n        mesh.getWorldDirection(vec3);\r\n        vec3.set(targetArr[0], targetArr[1], targetArr[2]);\r\n        let parentWL = mesh.worldToLocal(source),\r\n            newParentWL = mesh.worldToLocal(new THREE.Vector3(0, 0, 0)),\r\n            p = parentWL.sub(newParentWL);\r\n        p.normalize();\r\n        let quaternion = new THREE.Quaternion();\r\n        quaternion.setFromUnitVectors(vec3, p);\r\n        quaternion.normalize();\r\n        mesh.setRotationFromQuaternion(quaternion);\r\n        mesh.updateMatrixWorld();\r\n    },\r\n    worldToLocal: function(mesh, pos) {\r\n        let vec3;\r\n        if(pos.isVector3) {\r\n            vec3 = pos.clone();\r\n        } else {\r\n            vec3 = new THREE.Vector3(pos[0], pos[1], pos[2]);\r\n        }\r\n        let rs = mesh.worldToLocal(vec3);\r\n        return [rs.x, rs.y, rs.z];\r\n    },\r\n    transPosition: function(posArr, dom, camera) {\r\n        let wPos = new THREE.Vector3(posArr[0], posArr[1], posArr[2]);\r\n        //let vector = wPos.unproject(camera);\r\n        let pos = wPos.project(camera);\r\n        let halfWidth = (dom.innerWidth || dom.offsetWidth) / 2;\r\n        let halfHeight = (dom.innerHeight || dom.offsetHeight) / 2; \r\n        return {\r\n            x: Math.round(pos.x * halfWidth + halfWidth),\r\n            y: Math.round(-pos.y * halfHeight + halfHeight)\r\n        };\r\n    },\r\n    getColor: function(color) {\r\n        if(color.indexOf('rgba') !== -1 || color.indexOf('rgb') !== -1) {\r\n            let start = color.indexOf('(');\r\n            let _color = color.substring(start + 1, color.length - 1).split(',');\r\n            return [Number(_color[0].trim()) / 255, Number(_color[1].trim()) / 255, Number(_color[2].trim()) / 255];\r\n        }\r\n        return [255, 255, 255];\r\n    }\r\n};\r\nexport default Utils;","const CONSTS = {\r\n    RADIUS: 6378137.0\r\n};\r\nexport default CONSTS;","//import EffectManager from '../EffectManager';\r\nexport default class Layer {\r\n    constructor(props) {\r\n\r\n    }\r\n    init() {\r\n        \r\n    }\r\n    clear() {\r\n        this.node.remove(...this.node.children);\r\n    }\r\n    updateEffect(mesh, config, isEffect) {\r\n        const { name, value } = config;\r\n        if(isEffect) {\r\n            window.THREEx.EffectManager.add(mesh, name, value);\r\n        } else {\r\n            window.THREEx.EffectManager.remove(mesh, name);\r\n        }\r\n        \r\n    }\r\n}","const GeoJSON = {\r\n    toGeometry: function(geoJson, callback, outer = false, result = [], properties) {\r\n        let type = geoJson['type'];\r\n        if(type === 'FeatureCollection') {\r\n            for(let i = 0; i < geoJson['features'].length; i++) {\r\n                this.toGeometry(geoJson['features'][i], callback, outer, result, geoJson['features'][i]['properties']);\r\n            }\r\n        } else if(type === 'Feature') {\r\n            this.toGeometry(geoJson['geometry'], callback, outer, result, geoJson['properties']);\r\n        } else if(type === 'GeometryCollection') {\r\n            for(let i = 0; i < geoJson['geometries'].length; i++) {\r\n                this.toGeometry(geoJson['geometries'][i], callback, outer, result, properties);\r\n            }\r\n        } else if(type === 'MultiPolygon') {\r\n            for(let i = 0; i < geoJson['coordinates'].length; i++) {\r\n                this.rewindRings(geoJson['coordinates'][i], outer);\r\n                // let obj = {};\r\n                // obj['type'] = 'Polygon';\r\n                // obj['coordinates'] = geoJson['coordinates'][i];\r\n                // obj['properties'] = properties;\r\n                // result.push(obj);\r\n                // if(callback) {\r\n                //     callback(obj);\r\n                // }\r\n            }\r\n            let obj = {};\r\n            obj['type'] = 'MultiPolygon';\r\n            obj['coordinates'] = geoJson['coordinates'];\r\n            obj['properties'] = properties;\r\n            result.push(obj);\r\n            if(callback) {\r\n                callback(obj);\r\n            }\r\n        } else if(type === 'Polygon') {\r\n            this.rewindRings(geoJson['coordinates'], outer);\r\n            let obj = {};\r\n            obj['type'] = 'Polygon';\r\n            obj['coordinates'] = geoJson['coordinates'];\r\n            obj['properties'] = properties;\r\n            result.push(obj);\r\n            if(callback) {\r\n                callback(obj);\r\n            }\r\n        } else if(type === 'MultiLineString') {\r\n            // for(let i = 0; i < geoJson['coordinates'].length; i++) {\r\n                // let obj = {};\r\n                // obj['type'] = 'LineString';\r\n                // obj['coordinates'] = geoJson['coordinates'][i];\r\n                // obj['properties'] = properties;\r\n                // result.push(obj);\r\n                // if(callback) {\r\n                //     callback(obj);\r\n                // }\r\n            // }\r\n            let obj = {};\r\n            obj['type'] = 'MultiLineString';\r\n            obj['coordinates'] = geoJson['coordinates'];\r\n            obj['properties'] = properties;\r\n            result.push(obj);\r\n            if(callback) {\r\n                callback(obj);\r\n            }\r\n        } else if(type === 'LineString') {\r\n            let obj = {};\r\n            obj['type'] = 'LineString';\r\n            obj['coordinates'] = geoJson['coordinates'];\r\n            obj['properties'] = properties;\r\n            result.push(obj);\r\n            if(callback) {\r\n                callback(obj);\r\n            }\r\n        } else if(type === 'MultiPoint') {\r\n            // for(let i = 0; i < geoJson['coordinates'].length; i++) {\r\n                // let obj = {};\r\n                // obj['type'] = 'Point';\r\n                // obj['coordinates'] = geoJson['coordinates'][i];\r\n                // obj['properties'] = properties;\r\n                // result.push(obj);\r\n                // if(callback) {\r\n                //     callback(obj);\r\n                // }\r\n            // }\r\n            let obj = {};\r\n            obj['type'] = 'MultiPoint';\r\n            obj['coordinates'] = geoJson['coordinates'];\r\n            obj['properties'] = properties;\r\n            result.push(obj);\r\n            if(callback) {\r\n                callback(obj);\r\n            }\r\n        } else if(type === 'Point') {\r\n            let obj = {};\r\n            obj['type'] = 'Point';\r\n            obj['coordinates'] = geoJson['coordinates'];\r\n            obj['properties'] = properties;\r\n            result.push(obj);\r\n            if(callback) {\r\n                callback(obj);\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    rewindRings: function(rings, outer) {\r\n        if(rings.length <= 0) {\r\n            return;\r\n        }\r\n        this.rewindRing(rings[0], outer); //外轮廓\r\n        for(let i = 1; i < rings.length; i++) { //孔洞\r\n            this.rewindRing(rings[i], outer);\r\n        }\r\n    },\r\n    rewindRing: function(ring, dir) {\r\n        let area = 0;\r\n        let minLng = Infinity;\r\n        let maxLng = -Infinity;\r\n        let minLat = Infinity;\r\n        let maxLat = -Infinity;\r\n        for(let i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\r\n            if(ring[i][0] > maxLng) {\r\n                maxLng = ring[i][0];\r\n            }\r\n            if(ring[i][0] < minLng) {\r\n                minLng = ring[i][0];\r\n            }\r\n            if(ring[i][1] > maxLat) {\r\n                maxLat = ring[i][1];\r\n            }\r\n            if(ring[i][1] < minLat) {\r\n                minLat = ring[i][1];\r\n            }\r\n            area += (ring[i][0] - ring[j][0]) * (ring[i][1] + ring[j][1]);\r\n        }\r\n        if(area >= 0 !== !!dir) {\r\n            ring.reverse();\r\n        }\r\n    }\r\n};\r\nexport default GeoJSON;","import * as THREE from 'three';\r\nconst Cache = {\r\n    init: function() {\r\n        this.cacheList = THREE._____Cache = {};\r\n    },\r\n    save: function(cacheName, key, value) {\r\n        if(!this.cacheList[cacheName]) {\r\n            this.cacheList[cacheName] = new Map();\r\n        }\r\n        this.cacheList[cacheName].set(key, value);\r\n    },\r\n    get: function(cacheName, key) {\r\n        if(this.cacheList[cacheName]) {\r\n            return this.cacheList[cacheName].get(key);\r\n        }\r\n        return null;\r\n    },\r\n    delete: function(cacheName, key) {\r\n        if(this.cacheList[cacheName]) {\r\n            this.cacheList[cacheName].delete(key);\r\n        }\r\n    },\r\n    getAll: function(cacheName) {\r\n        if(this.cacheList[cacheName]) {\r\n            return this.cacheList[cacheName];\r\n        }\r\n        return null;\r\n    }\r\n};\r\nexport default Cache;","module.exports = \"precision highp float;\\r\\nvarying vec2 texCoords;\\r\\nvarying vec3 PositionWS;\\r\\n//varying vec3 ModelPostion;\\r\\nvarying float v_distance;\\r\\nuniform vec4 objectPos;\\r\\n#include <shadowmap_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#ifdef QUANTIZATION_BITS12\\r\\n    uniform mat4 u_scaleAndBias;\\r\\n#endif\\r\\n#include <common>\\r\\n\\r\\n//之前的逻辑有问题，大尺度下需要时刻思考精度问题\\r\\nvec3 czm_decodePos(vec3 encoded, mat4 fromScaledENU, vec4 pos) {\\r\\n    float temp = encoded.x / 4096.0;\\r\\n    float temp_x = floor(temp) /4096.0;\\r\\n    float temp_y =temp - floor(temp);\\r\\n    float temp_z = encoded.y / 4096.0;\\r\\n    temp_z = floor(temp_z) / 4096.0;\\r\\n    vec4 temp_result = vec4(temp_x, temp_y, temp_z,1.0);\\r\\n    vec4 o_pos = fromScaledENU*temp_result;\\r\\n    vec3 final = o_pos.xyz;\\r\\n    return final;\\r\\n}\\r\\nvec2 czm_decodeUv(vec3 encoded) {\\r\\n    float tempuv = encoded.z / 4096.0;\\r\\n    float u = floor(tempuv) / 4096.0;\\r\\n    float v = tempuv - floor(tempuv);\\r\\n    return vec2(u,v);\\r\\n }\\r\\nvoid main() {\\r\\n    vec3 czm_position = vec3(0.0);\\r\\n    vec2 textureCoordinates = vec2(0.0);\\r\\n     #ifdef QUANTIZATION_BITS12\\r\\n        czm_position = czm_decodePos(position, u_scaleAndBias, objectPos);\\r\\n        textureCoordinates = czm_decodeUv(position);\\r\\n        //czm_position = position;\\r\\n    #else\\r\\n        czm_position = position;\\r\\n        textureCoordinates = uv;\\r\\n    #endif\\r\\n        //czm_position = czm_converPosition(czm_position);\\r\\n        vec4 worldPosition = modelMatrix * vec4( czm_position, 1.0 );\\r\\n        PositionWS =  czm_position.xyz + objectPos.xyz;\\r\\n        v_distance = length((modelViewMatrix * vec4(czm_position.xyz, 1.0)).xyz);\\r\\n        texCoords = textureCoordinates;\\r\\n\\r\\n\\tvec4 mvPosition = modelViewMatrix * vec4( czm_position, 1.0 );\\r\\n    #include <shadowmap_vertex>\\r\\n    #include <fog_vertex>\\r\\n    gl_Position = projectionMatrix * mvPosition;\\r\\n    #include <logdepthbuf_vertex>\\r\\n}\"","import {\r\n\tMatrix4,\r\n\tObject3D,\r\n\tVector3\r\n} from \"three\";\r\n\r\nvar CSS2DObject = function ( element ) {\r\n\r\n\tObject3D.call( this );\r\n\r\n\tthis.element = element || document.createElement( 'div' );\r\n\r\n\tthis.element.style.position = 'absolute';\r\n\r\n\tthis.addEventListener( 'removed', function () {\r\n\r\n\t\tthis.traverse( function ( object ) {\r\n\r\n\t\t\tif ( object.element instanceof Element && object.element.parentNode !== null ) {\r\n\r\n\t\t\t\tobject.element.parentNode.removeChild( object.element );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n};\r\n\r\nCSS2DObject.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\tconstructor: CSS2DObject,\r\n\r\n\tcopy: function ( source, recursive ) {\r\n\r\n\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\tthis.element = source.element.cloneNode( true );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n//\r\n\r\nvar CSS2DRenderer = function () {\r\n\r\n\tvar _this = this;\r\n\r\n\tvar _width, _height;\r\n\tvar _widthHalf, _heightHalf;\r\n\r\n\tvar vector = new Vector3();\r\n\tvar viewMatrix = new Matrix4();\r\n\tvar viewProjectionMatrix = new Matrix4();\r\n\r\n\tvar cache = {\r\n\t\tobjects: new WeakMap()\r\n\t};\r\n\r\n\tvar domElement = document.createElement( 'div' );\r\n\tdomElement.style.overflow = 'hidden';\r\n\r\n\tthis.domElement = domElement;\r\n\r\n\tthis.getSize = function () {\r\n\r\n\t\treturn {\r\n\t\t\twidth: _width,\r\n\t\t\theight: _height\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\r\n\t\t_widthHalf = _width / 2;\r\n\t\t_heightHalf = _height / 2;\r\n\r\n\t\tdomElement.style.width = width + 'px';\r\n\t\tdomElement.style.height = height + 'px';\r\n\r\n\t};\r\n\r\n\tvar renderObject = function ( object, scene, camera ) {\r\n\r\n\t\tif ( object instanceof CSS2DObject ) {\r\n\r\n\t\t\tobject.onBeforeRender( _this, scene, camera );\r\n\r\n\t\t\tvector.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\tvector.applyMatrix4( viewProjectionMatrix );\r\n\r\n\t\t\tvar element = object.element;\r\n\t\t\tvar style = 'translate(-50%,-50%) translate(' + ( vector.x * _widthHalf + _widthHalf ) + 'px,' + ( - vector.y * _heightHalf + _heightHalf ) + 'px)';\r\n\r\n\t\t\telement.style.WebkitTransform = style;\r\n\t\t\telement.style.MozTransform = style;\r\n\t\t\telement.style.oTransform = style;\r\n\t\t\telement.style.transform = style;\r\n\r\n\t\t\telement.style.display = ( object.visible && vector.z >= - 1 && vector.z <= 1 ) ? '' : 'none';\r\n\r\n\t\t\tvar objectData = {\r\n\t\t\t\tdistanceToCameraSquared: getDistanceToSquared( camera, object )\r\n\t\t\t};\r\n\r\n\t\t\tcache.objects.set( object, objectData );\r\n\r\n\t\t\tif ( element.parentNode !== domElement ) {\r\n\r\n\t\t\t\tdomElement.appendChild( element );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.onAfterRender( _this, scene, camera );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\r\n\r\n\t\t\trenderObject( object.children[ i ], scene, camera );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar getDistanceToSquared = function () {\r\n\r\n\t\tvar a = new Vector3();\r\n\t\tvar b = new Vector3();\r\n\r\n\t\treturn function ( object1, object2 ) {\r\n\r\n\t\t\ta.setFromMatrixPosition( object1.matrixWorld );\r\n\t\t\tb.setFromMatrixPosition( object2.matrixWorld );\r\n\r\n\t\t\treturn a.distanceToSquared( b );\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\tvar filterAndFlatten = function ( scene ) {\r\n\r\n\t\tvar result = [];\r\n\r\n\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\tif ( object instanceof CSS2DObject ) result.push( object );\r\n\r\n\t\t} );\r\n\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\tvar zOrder = function ( scene ) {\r\n\r\n\t\tvar sorted = filterAndFlatten( scene ).sort( function ( a, b ) {\r\n\r\n\t\t\tvar distanceA = cache.objects.get( a ).distanceToCameraSquared;\r\n\t\t\tvar distanceB = cache.objects.get( b ).distanceToCameraSquared;\r\n\r\n\t\t\treturn distanceA - distanceB;\r\n\r\n\t\t} );\r\n\r\n\t\tvar zMax = sorted.length;\r\n\r\n\t\tfor ( var i = 0, l = sorted.length; i < l; i ++ ) {\r\n\r\n\t\t\tsorted[ i ].element.style.zIndex = zMax - i;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tviewMatrix.copy( camera.matrixWorldInverse );\r\n\t\tviewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, viewMatrix );\r\n\r\n\t\trenderObject( scene, scene, camera );\r\n\t\tzOrder( scene );\r\n\r\n\t};\r\n\r\n};\r\n\r\nexport { CSS2DObject, CSS2DRenderer };\r\n","import * as THREE from 'three';\r\nimport Layer from './Layer';\r\nimport Utils from '../Common/Utils';\r\nimport GeoJSON from '../Common/GeoJSON';\r\n\r\nexport default class BuildingLayer extends Layer {\r\n    constructor(props) {\r\n        super();\r\n        this.effect = false;\r\n        this.topColor = 0x4d7384;\r\n        this.sideColor = 0x66a3ee;\r\n        this.height = 100;\r\n        this.buildingTextureSize = [20, 20];\r\n        this.buildingMaskTextureSize = [60, 60];\r\n        // this.style = {\r\n        //     topColor: '#4d7384',\r\n        //     sideColor: '#66a3ee',\r\n        //     height: 100,\r\n        //     buildingTextureSize: [20, 20],\r\n        //     buildingMaskTextureSize: [60, 60],\r\n        //     effect: false\r\n        // };\r\n        Object.assign(this, props);\r\n        this.init();\r\n    }\r\n    init() {\r\n        let material1 = new THREE.MeshStandardMaterial({//MeshBasicMaterial\r\n            color: this.topColor,\r\n            side: THREE.BackSide,\r\n            //map: null,\r\n            //colorwrite: false,\r\n            transparent: true,\r\n            //depthWrite: true,\r\n            //depthTest: true,\r\n            opacity: 1.0\r\n        });\r\n        //material1.needsUpdate = true;\r\n        let material2 = new THREE.MeshStandardMaterial({\r\n            color: this.sideColor,\r\n            side: THREE.BackSide,\r\n            //map: null,\r\n            //colorwrite: false,\r\n            transparent: true,\r\n            //depthWrite: true,\r\n            //depthTest: true,\r\n            opacity: 1.0\r\n        });\r\n        //material2.needsUpdate = true;\r\n        this.material = [material1, material2];\r\n    }\r\n    geoJSON(data) {\r\n        GeoJSON.toGeometry(data, rs => {\r\n            if(rs.type === 'MultiPolygon' || rs.type === 'Polygon') {\r\n                this.createMesh(rs.type === 'Polygon' ? [rs.coordinates] : rs.coordinates, {\r\n                    height: rs.properties.height !== undefined && rs.properties.height !== null ? rs.properties.height : this.height\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setData(data) {\r\n        this.clear();\r\n        this.geoJSON(data);\r\n        this.setStyle(this.style);\r\n    }\r\n    createMesh(coordinates, config) {\r\n        let { buildingTextureSize, buildingMaskTextureSize, height } = this;\r\n        height = config.height;\r\n        //this.preHeight = height;\r\n        let node = new THREE.Group();\r\n        this.node.add(node);\r\n        const coords = coordinates;\r\n        const center = Utils.getCenterCoord(coords[0][0]);\r\n        const centerPos = Utils.lonLatToWorld(center);\r\n        Utils.setPosition(node, centerPos);\r\n        Utils.setDirection(node, centerPos, [0, 1, 0]);\r\n        for(let i = 0; i < coords.length; i++) {\r\n            let polygon = coords[i];\r\n            let outer = [];\r\n            for(let k = 0; k < polygon.length; k++) {\r\n                if(k === 0) {\r\n                    for(let j = 0; j < polygon[k].length; j++) {\r\n                        let point = Utils.worldToLocal(node, Utils.lonLatToWorld(polygon[k][j]));\r\n                        point = new THREE.Vector3(point[0], point[2], point[1]);\r\n                        outer.push(point);\r\n                    }\r\n                }\r\n            }\r\n            let shape = new THREE.Shape(outer);\r\n            // if (holes) {\r\n            //     for (let n = 0; n < holes.length; n++) {\r\n            //         let holesPoints = []\r\n            //         for (let m = 0; m < holes[n].length / 3; m++) {\r\n            //             holesPoints.push(new THREE.Vector3(holes[n][3 * m], holes[n][3 * m + 2], 0))\r\n            //         }\r\n            //         let holesPaths = new THREE.Path(holesPoints);\r\n            //         shape.holes.push(holesPaths);\r\n            //     }\r\n            // }\r\n            let bufferGeometry = new THREE.BufferGeometry();\r\n            bufferGeometry.topUV = [];\r\n            bufferGeometry.sideUV1 = [];\r\n            bufferGeometry.sideUV2 = [];\r\n            bufferGeometry.sideUV3 = [];\r\n            bufferGeometry.sideUV4 = [];\r\n            bufferGeometry.sideUV5 = [];\r\n            bufferGeometry.sideUV6 = [];\r\n            bufferGeometry.sideUV7 = [];\r\n    \r\n            if(bufferGeometry.boundingBox === null) {\r\n                bufferGeometry.boundingBox = new THREE.Box3();\r\n            }\r\n            bufferGeometry.boundingBox.setFromPoints(outer);\r\n            let UVGenerator = {\r\n                generateTopUV: (geometry, indexA, indexB, indexC, indexD) => {\r\n                    let c = (indexA[3 * indexB] - bufferGeometry.boundingBox.min.x) / (bufferGeometry.boundingBox.max.x - bufferGeometry.boundingBox.min.x),\r\n                        h = 1 - (indexA[3 * indexB + 1] - bufferGeometry.boundingBox.min.y) / (bufferGeometry.boundingBox.max.y - bufferGeometry.boundingBox.min.y),\r\n                        f = (indexA[3 * indexC] - bufferGeometry.boundingBox.min.x) / (bufferGeometry.boundingBox.max.x - bufferGeometry.boundingBox.min.x),\r\n                        d = 1 - (indexA[3 * indexC + 1] - bufferGeometry.boundingBox.min.y) / (bufferGeometry.boundingBox.max.y - bufferGeometry.boundingBox.min.y),\r\n                        p = (indexA[3 * indexD] - bufferGeometry.boundingBox.min.x) / (bufferGeometry.boundingBox.max.x - bufferGeometry.boundingBox.min.x),\r\n                        m = 1 - (indexA[3 * indexD + 1] - bufferGeometry.boundingBox.min.y) / (bufferGeometry.boundingBox.max.y - bufferGeometry.boundingBox.min.y),\r\n                        g = [new THREE.Vector2(c, h), new THREE.Vector2(f, d), new THREE.Vector2(p, m)];\r\n                    bufferGeometry.topUV.push.call(bufferGeometry.topUV, g[0].x, g[0].y, g[1].x, g[1].y, g[2].x, g[2].y);\r\n                    return g;\r\n                },\r\n                generateSideWallUV: (geometry, indexA, indexB, indexC) => {\r\n                    let l = [indexA[3 * indexB], indexA[3 * indexB + 1]], \r\n                        p = [indexA[3 * indexC], indexA[3 * indexC + 1]], \r\n                        m = Utils.getDistanceFromArray(l, p) / buildingTextureSize[0], \r\n                        g = height / buildingTextureSize[1], \r\n                        v = Utils.getDistanceFromArray(l, p) / buildingMaskTextureSize[0], \r\n                        y = height / buildingMaskTextureSize[1],\r\n                        toIn = function(x, y, sideUV) {\r\n                            let n = [new THREE.Vector2(0, 0), new THREE.Vector2(x, 0), new THREE.Vector2(x, y), new THREE.Vector2(0, y)];\r\n                            sideUV.push.call(sideUV, n[0].x, n[0].y, n[1].x, n[1].y, n[3].x, n[3].y);\r\n                            sideUV.push.call(sideUV, n[1].x, n[1].y, n[2].x, n[2].y, n[3].x, n[3].y);\r\n                        };\r\n                    let x = [new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1)];\r\n                    toIn(-1, 1, bufferGeometry.sideUV1);\r\n                    toIn(-1, g, bufferGeometry.sideUV2);\r\n                    toIn(-m, 1, bufferGeometry.sideUV3);\r\n                    toIn(-m, g, bufferGeometry.sideUV4);\r\n                    toIn(-1, y, bufferGeometry.sideUV5);\r\n                    toIn(-v, 1, bufferGeometry.sideUV6);\r\n                    toIn(-v, y, bufferGeometry.sideUV7);\r\n                    return x;\r\n                }\r\n            };\r\n            let extrudeBufferGeometry = new THREE.ExtrudeBufferGeometry(shape, {\r\n                steps: 1,\r\n                depth: height,\r\n                material: 0,\r\n                extrudeMaterial: 1,\r\n                bevelEnabled: false,\r\n                UVGenerator\r\n            });\r\n            let extrudeNormals = extrudeBufferGeometry.attributes.normal.array,\r\n                extrudePositions = extrudeBufferGeometry.attributes.position.array;\r\n            for(let h = 0; h < extrudePositions.length; h += 3) {\r\n                let a = extrudePositions[h + 1];\r\n                extrudePositions[h + 1] = extrudePositions[h + 2];\r\n                extrudePositions[h + 2] = a;\r\n                extrudeNormals[h] = -extrudeNormals[h];\r\n                extrudeNormals[h + 1] = -extrudeNormals[h + 1];\r\n                extrudeNormals[h + 2] = -extrudeNormals[h + 2];\r\n                let b = extrudeNormals[h + 1];\r\n                extrudeNormals[h + 1] = extrudeNormals[h + 2];\r\n                extrudeNormals[h + 2] = b;\r\n            }    \r\n            extrudeBufferGeometry.topUV = bufferGeometry.topUV;\r\n            extrudeBufferGeometry.sideUV1 = bufferGeometry.sideUV1;\r\n            extrudeBufferGeometry.sideUV2 = bufferGeometry.sideUV2;\r\n            extrudeBufferGeometry.sideUV3 = bufferGeometry.sideUV3;\r\n            extrudeBufferGeometry.sideUV4 = bufferGeometry.sideUV4;\r\n            extrudeBufferGeometry.sideUV5 = bufferGeometry.sideUV5;\r\n            extrudeBufferGeometry.sideUV6 = bufferGeometry.sideUV6;\r\n            extrudeBufferGeometry.sideUV7 = bufferGeometry.sideUV7;\r\n            //extrudeBufferGeometry.setAttribute(\"uv\", new THREE.BufferAttribute(Utils.arrayToFloat32Array(bufferGeometry.topUV.concat(bufferGeometry.sideUV2)), 2));\r\n            extrudeBufferGeometry.setAttribute(\"uv2\", new THREE.BufferAttribute(Utils.arrayToFloat32Array(bufferGeometry.topUV.concat(bufferGeometry.sideUV1)), 2));\r\n            //extrudeBufferGeometry.setAttribute(\"uv3\", new THREE.BufferAttribute(Utils.arrayToFloat32Array(bufferGeometry.topUV.concat(bufferGeometry.sideUV4)), 2));\r\n            extrudeBufferGeometry.attributes.uv.needsUpdate = true;\r\n            let obj = new THREE.Mesh(extrudeBufferGeometry, this.material);\r\n            node.add(obj);\r\n            // this.updateEffect(obj, {\r\n            //     name: 'outline',\r\n            //     value: 1\r\n            // }, true);\r\n\r\n            //console.log('extrudeBufferGeometry', extrudeBufferGeometry);\r\n        }\r\n    }\r\n    setStyle(style) {\r\n        let {\r\n            topImg,\r\n            topColor,\r\n            topOpacity,\r\n            sideImg,\r\n            sideColor,\r\n            sideOpacity,\r\n            height,\r\n            effect\r\n        } = style;\r\n\r\n        if(topImg) {\r\n            this.material[0].map = this.view.textureLoader.load(topImg, item => {\r\n                item.wrapS = THREE.RepeatWrapping;\r\n                item.wrapT = THREE.RepeatWrapping;\r\n                item.anisotropy = 16;\r\n                item.needsUpdate = true;\r\n                return item;\r\n            });\r\n        } else {\r\n            this.material[0].map = this.view.textureLoader.load('images/s.png', item => {\r\n                item.wrapS = THREE.RepeatWrapping;\r\n                item.wrapT = THREE.RepeatWrapping;\r\n                item.anisotropy = 16;\r\n                item.needsUpdate = true;\r\n                return item;\r\n            });\r\n        }\r\n\r\n        if(topColor !== undefined) {\r\n            this.material[0].color.set(topColor);\r\n        }\r\n        if(topOpacity !== undefined) {\r\n            this.material[0].opacity = topOpacity;\r\n        }\r\n\r\n        if(sideImg) {\r\n            this.material[1].map = this.view.textureLoader.load(sideImg, item => {\r\n                item.wrapS = THREE.RepeatWrapping;\r\n                item.wrapT = THREE.RepeatWrapping;\r\n                item.anisotropy = 16;\r\n                item.needsUpdate = true;\r\n                return item;\r\n            });\r\n        } else {\r\n            this.material[1].map = this.view.textureLoader.load('images/s.png', item => {\r\n                item.wrapS = THREE.RepeatWrapping;\r\n                item.wrapT = THREE.RepeatWrapping;\r\n                item.anisotropy = 16;\r\n                item.needsUpdate = true;\r\n                return item;\r\n            });\r\n        }\r\n\r\n        if(sideColor !== undefined) {\r\n            this.material[1].color.set(sideColor);\r\n        }\r\n        if(sideOpacity !== undefined) {\r\n            this.material[1].opacity = sideOpacity;\r\n        }\r\n        if(height !== undefined) {\r\n            if(this.preHeight === undefined || this.preHeight === null) {\r\n                this.preHeight = height;\r\n            }\r\n            let scale = height / this.preHeight;\r\n            this.node.children.forEach(item => {\r\n                item.scale.y = scale || 1;\r\n            });\r\n            //this.node.scale.y = scale;\r\n        }\r\n        // if(effect !== undefined) {\r\n        //     for(let i = 0; i < this.node.children.length; i++) {\r\n        //         for(let j = 0; j < this.node.children[i].length; j++) {\r\n        //             this.updateEffect(this.node.children[i][j], {\r\n        //                 //name: 'outline',\r\n        //                 name: 'urealBloom',\r\n        //                 value: 1\r\n        //             }, effect);\r\n        //         }\r\n        //     }\r\n        // }\r\n        this.setEffect(effect);\r\n    }\r\n    setEffect(isEffect) {\r\n        for(let i = 0; i < this.node.children.length; i++) {\r\n            for(let j = 0; j < this.node.children[i].children.length; j++) {\r\n                this.updateEffect(this.node.children[i].children[j], {\r\n                    //name: 'outline',\r\n                    name: 'urealBloom',\r\n                    value: 0.3\r\n                }, isEffect);\r\n            }\r\n        }\r\n    }\r\n    // updateColor(color) {\r\n    //     for(let i = 0; i < this.material.length; i++) {\r\n    //         this.material[i].color.setHex(color);\r\n    //     }\r\n    // }\r\n    // updateOpacity(opacity) {\r\n    //     for(let i = 0; i < this.material.length; i++) {\r\n    //         this.material[i].opacity = opacity;\r\n    //     }\r\n    // }\r\n    // updateHeight(height) {\r\n    //     const scale = height / this.height;\r\n    //     this.node.scale.y = scale;\r\n    //     //this.height = height;\r\n    //     this.updateUV(scale);\r\n    // }\r\n    // setEffect(isEffect) {\r\n    //     for(let i = 0; i < this.node.children.length; i++) {\r\n    //         this.updateEffect(this.node.children[i], {\r\n    //             //name: 'outline',\r\n    //             name: 'urealBloom',\r\n    //             value: 1\r\n    //         }, isEffect);\r\n    //     }\r\n    // }\r\n    // updateUV(height) {\r\n    //     // for (let n in this.node.children) {\r\n    //     //     let group = this.node.children[n].geometry.groups[1], \r\n    //     //         start = group.start * 2, \r\n    //     //         count = group.count * 2, \r\n    //     //         uv = this.node.children[n].geometry.attributes.uv2.array, \r\n    //     //         h = height;\r\n    //     //     for (let i = start; i < start + count; i += 2) {\r\n    //     //         uv[i + 1] = uv[i + 1] * h;\r\n    //     //     }\r\n    //     //     let geometry = this.node.children[n].geometry;\r\n    //     //     //geometry.setAttribute(\"uv\", new THREE.BufferAttribute(uv, 2));\r\n    //     //     geometry.setAttribute(\"uv2\", new THREE.BufferAttribute(uv, 2));\r\n    //     //     //geometry.attributes.uv.needsUpdate = true;\r\n    //     // }\r\n    // }\r\n}","import * as THREE from 'three';\r\nimport Layer from './Layer';\r\nimport Utils from '../Common/Utils';\r\nimport GeoJSON from '../Common/GeoJSON';\r\nimport { CSS2DObject } from '../jsm/renderers/CSS2DRenderer';\r\nexport default class LabelLayer extends Layer {\r\n    constructor(props) {\r\n        super();\r\n        this.style = {\r\n            fontColor: \"#ffffff\",\r\n            fontSize: 12,\r\n            color: 'rgba(10,18,51,0.8)',\r\n            opacity: 1.0,\r\n            lineColor: '#ffffff',\r\n            lineOpacity: 1.0\r\n        };\r\n        Object.assign(this, props);\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.lineMaterial = new THREE.PointsMaterial({\r\n            color: 0xffffff,\r\n            // sizeAttenuation: false,\r\n            // alphaTest: .5,\r\n            // vertexColors: THREE.VertexColors,\r\n            // color: 0x00ff00,\r\n            // size: 200,\r\n            transparent: true,\r\n            // blending: THREE.AdditiveBlending,\r\n            // depthTest: true,\r\n            // depthWrite: false,\r\n            //map: this.view.textureLoader.load('')\r\n        });\r\n    }\r\n    geoJSON(data) {\r\n        GeoJSON.toGeometry(data, rs => {\r\n            if(rs.type === 'MultiPoint' || rs.type === 'Point') {\r\n                this.createMesh(rs.type === 'Point' ? [rs.coordinates] : rs.coordinates, {\r\n                    height: rs.properties.height !== undefined && rs.properties.height !== null ? rs.properties.height : this.height\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getSpriteTexture(pos) {\r\n        let texture;\r\n        if(true) {\r\n            texture = this.view.textureLoader.load('images/earth/icon/24.png');\r\n        } else {\r\n            let canvas = document.createElement('canvas');\r\n            let ctx = canvas.getContext('2d');\r\n            ctx.fillStyle = '#ffff00';\r\n            ctx.font = 'Bold 100px Arial';\r\n            ctx.lineWidth = 4;\r\n            ctx.fillText('AAAAAAA', 4, 104);\r\n            texture = new THREE.Texture(canvas);\r\n        }\r\n        texture.needsUpdate = true;\r\n        return texture;\r\n    }\r\n    setData(data) {\r\n        this.clear();\r\n        //this.geoJSON(data);\r\n        this.doms = [];\r\n        // const material = new THREE.MeshBasicMaterial({\r\n        //     color: 0x00ff00\r\n        // });\r\n        for(let i = 0; i < data.length; i++) {\r\n            let start = Utils.lonLatToWorld([data[i].lng, data[i].lat]);\r\n            let pos = Utils.lonLatToWorld([data[i].lng, data[i].lat], 200);\r\n            //this.view.textureLoader.load(`/images/earth/icon/swcs_tb${data.length - 1 - i}.png`, texture => {\r\n                // let material = new THREE.SpriteMaterial({\r\n                //     // color: new THREE.Color(0, 0, 0),\r\n                //     transparent: true,\r\n                //     // opacity: 1.0,\r\n                //     // depthWrite: true,\r\n                //     // depthTest: true,\r\n                //     map: texture\r\n                // });\r\n                // let cube = new THREE.Sprite(material);\r\n\r\n                let dom = document.createElement('div');\r\n                dom.style = 'padding: 5px;border-radius: 4px;background-color: rgba(10,18,51,.8);';\r\n                dom.innerHTML = `\r\n                    <div style=\"width: 30px;height: 30px;float: left;\">\r\n                        <img src=\"${ data[i].iconUrl }\" style=\"width: 100%;height: 100%;\"/>\r\n                    </div>\r\n                    <div style=\"overflow: hidden;padding: 4px 8px;\">${ data[i].content }</div>\r\n                `;\r\n                let cube = new CSS2DObject(dom);\r\n\r\n                // Utils.setDirection(cube, pos, [0, 0, 1]);\r\n                // cube.scale.set(texture.image.width / 4, texture.image.height / 4. 0);\r\n                cube.position.x = pos[0];\r\n                cube.position.y = pos[1];\r\n                cube.position.z = pos[2];\r\n\r\n                let geometry = new THREE.BufferGeometry();\r\n                let positions = new Float32Array(6);\r\n                positions[0] = start[0];\r\n                positions[1] = start[1];\r\n                positions[2] = start[2];\r\n                positions[3] = pos[0];\r\n                positions[4] = pos[1];\r\n                positions[5] = pos[2];\r\n\r\n                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n                let line = new THREE.Line(geometry, this.lineMaterial);\r\n\r\n                this.node.add(line);\r\n                this.node.add(cube);\r\n            //});\r\n            this.doms.push(dom);\r\n        }\r\n        this.setStyle(this.style);\r\n    }\r\n    createMesh(coordinates, config) {\r\n    }\r\n    setStyle(style) {\r\n        let {\r\n            fontColor,\r\n            color,\r\n            opacity,\r\n            fontSize,\r\n            lineColor,\r\n            lineOpacity\r\n        } = style;\r\n        // if(color !== undefined) {\r\n        //     this.material.color.set(color);\r\n        // }\r\n        // if(opacity !== undefined) {\r\n        //     this.material.opacity = opacity;\r\n        // }\r\n        // if(size !== undefined) {\r\n        //     this.material.size = size;\r\n        // }\r\n        for(let i = 0; i < this.doms.length; i++) {\r\n            this.doms[i].style.backgroundColor = color;\r\n            this.doms[i].style.opacity = opacity;\r\n            this.doms[i].style.fontSize = fontSize + 'px';\r\n            this.doms[i].style.color = fontColor;\r\n        }\r\n        if(lineColor !== undefined) {\r\n            this.lineMaterial.color.set(lineColor);\r\n        }\r\n        if(lineOpacity !== undefined) {\r\n            this.lineMaterial.opacity = lineOpacity;\r\n        }\r\n    }\r\n}","import * as THREE from 'three';\r\nimport Layer from './Layer';\r\nimport Utils from '../Common/Utils';\r\nimport GeoJSON from '../Common/GeoJSON';\r\nexport default class LineLayer extends Layer {\r\n    constructor(props) {\r\n        super();\r\n        this.style = {\r\n            speed: 0.02,\r\n            width: 5,\r\n            color: '#ffc627',\r\n            opacity: 1,\r\n            imageUrl: 'images/path/path.png',\r\n            effect: true\r\n        };\r\n        Object.assign(this, props);\r\n        this.init();\r\n    }\r\n    init() {\r\n        const texture = this.view.textureLoader.load(this.style.imageUrl);\r\n        texture.wrapS = THREE.RepeatWrapping;\r\n        let lineMaterial = new THREE.MeshBasicMaterial({\r\n            color: this.style.color,\r\n            map: texture,\r\n            //side: THREE.DoubleSide,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            //depthTest: false\r\n            opacity: this.opacity\r\n        });\r\n        this.material = lineMaterial;\r\n    }\r\n    geoJSON(data) {\r\n        GeoJSON.toGeometry(data, rs => {\r\n            if(rs.type === 'MultiLineString' || rs.type === 'LineString') {\r\n                this.createMesh(rs.type === 'LineString' ? [rs.coordinates] : rs.coordinates);\r\n            }\r\n        });\r\n    }\r\n    setData(data) {\r\n        this.clear();\r\n        this.geoJSON(data);\r\n        this.setStyle(this.style);\r\n    }\r\n    createMesh(coordinates) {\r\n        //const coords = this.geojsonToPolygon(coordinates);\r\n        //const center = this.getCenterCoordinates(coords[0][0]);\r\n        //const centerPos = Utils.lonLatToWorld(center);\r\n        //setPosition(this.node, centerPos);\r\n        //setDirection(this.node, centerPos, [0, 1, 0]);\r\n        // let lineMaterial = Cache.get('lineMaterial', 'test');\r\n        // if(!lineMaterial) {        \r\n        //     Cache.save('lineMaterial', 'test', this.material);\r\n        // }\r\n        //let node = new THREE.Group();\r\n        //this.node.add(node);\r\n        for(let i = 0; i < coordinates.length; i++) {\r\n            //let positions = [];\r\n            let item = coordinates[i];\r\n            let path = [];\r\n            for(let j = 0; j < item.length; j++) {\r\n                let pos = Utils.lonLatToWorld(item[j]);\r\n                //positions.push(pos[0]);\r\n                //positions.push(pos[1]);\r\n                //positions.push(pos[2]);\r\n                path.push(new THREE.Vector3(pos[0], pos[1], pos[2]));\r\n            }\r\n            let curve3 = new THREE.CatmullRomCurve3(path);\r\n            let geometry = new THREE.TubeBufferGeometry(curve3, 64, this.style.width, 8, false);\r\n            geometry.attributes.uv.needsUpdate = true;\r\n            let obj = new THREE.Mesh(geometry, this.material);\r\n            //obj.renderOrder = 0;\r\n            this.node.add(obj);\r\n            // this.updateEffect(obj, {\r\n            //     name: 'urealBloom',\r\n            //     value: 1\r\n            // }, true);\r\n        }\r\n        //this.setEffect(this.style.effect);\r\n    }\r\n    setStyle(style) {\r\n        let {\r\n            color,\r\n            img,\r\n            opacity,\r\n            speed,\r\n            direction,\r\n            effect\r\n        } = style;\r\n        if(img) {\r\n            this.material.map = this.view.textureLoader.load(img, item => {\r\n                item.wrapS = THREE.RepeatWrapping;\r\n                item.wrapT = THREE.RepeatWrapping;\r\n                item.anisotropy = 16;\r\n                item.needsUpdate = true;\r\n                return item;\r\n            });\r\n        } else {\r\n            this.material.map = this.view.textureLoader.load('images/path/path.png', item => {\r\n                item.wrapS = THREE.RepeatWrapping;\r\n                item.wrapT = THREE.RepeatWrapping;\r\n                item.anisotropy = 16;\r\n                item.needsUpdate = true;\r\n                return item;\r\n            });\r\n        }\r\n        if(color !== undefined) {\r\n            this.material.color.set(color);\r\n        }\r\n        if(opacity !== undefined) {\r\n            this.material.opacity = opacity;\r\n        }\r\n        if(direction !== undefined) {\r\n            this.style.direction = direction;\r\n        }\r\n        if(speed !== undefined) {\r\n            this.style.speed = speed;\r\n        }\r\n        this.setEffect(effect);\r\n    }\r\n    setEffect(isEffect) {\r\n        for(let i = 0; i < this.node.children.length; i++) {\r\n            this.updateEffect(this.node.children[i], {\r\n                //name: 'outline',\r\n                name: 'urealBloom',\r\n                value: 1\r\n            }, isEffect);\r\n        }\r\n    }\r\n    updateColor(color) {\r\n        this.material.color.setHex(color);\r\n    }\r\n    updateOpacity(opacity) {\r\n        this.material.opacity = opacity;\r\n    }\r\n    update() {\r\n        if(this.material.map) {\r\n            if(this.style.direction) {\r\n                this.material.map.offset.x -= this.style.speed;\r\n            } else {\r\n                this.material.map.offset.x += this.style.speed;\r\n            }\r\n            //this.material.map.offset.x -= 0.02;\r\n        }\r\n    }\r\n}","import * as THREE from 'three';\r\nimport Layer from './Layer';\r\nimport Utils from '../Common/Utils';\r\nimport GeoJSON from '../Common/GeoJSON';\r\nexport default class PointLayer extends Layer {\r\n    constructor(props) {\r\n        super();\r\n        this.style = {\r\n            img: 'images/point/1.png',\r\n            color: '#00ff00',\r\n            opacity: 1.0,\r\n            size: 300,\r\n            lineColor: '#ffffff',\r\n            lineOpacity: 1.0\r\n        };\r\n        Object.assign(this, props);\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.material = new THREE.PointsMaterial({\r\n            // sizeAttenuation: false,\r\n            // alphaTest: .5,\r\n            // vertexColors: THREE.VertexColors,\r\n            //color: 0x00ff00,\r\n            size: this.style.size,\r\n            transparent: true,\r\n            blending: THREE.AdditiveBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            //map: this.view.textureLoader.load('')\r\n        });\r\n        this.lineMaterial = new THREE.PointsMaterial({\r\n            //color: 0xffffff,\r\n            // sizeAttenuation: false,\r\n            // alphaTest: .5,\r\n            // vertexColors: THREE.VertexColors,\r\n            // color: 0x00ff00,\r\n            // size: 200,\r\n            transparent: true,\r\n            // blending: THREE.AdditiveBlending,\r\n            // depthTest: true,\r\n            // depthWrite: false,\r\n            //map: this.view.textureLoader.load('')\r\n        });\r\n    }\r\n    geoJSON(data) {\r\n        GeoJSON.toGeometry(data, rs => {\r\n            if(rs.type === 'MultiPoint' || rs.type === 'Point') {\r\n                this.createMesh(rs.type === 'Point' ? [rs.coordinates] : rs.coordinates, {\r\n                    height: rs.properties.height !== undefined && rs.properties.height !== null ? rs.properties.height : this.height\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setData(data) {\r\n        this.clear();\r\n        //this.geoJSON(data);\r\n        let geometry = new THREE.BufferGeometry();\r\n        let positions = new Float32Array(data.length * 3);\r\n        for(let i = 0; i < data.length; i++) {\r\n            let start = Utils.lonLatToWorld([data[i].lng, data[i].lat]);\r\n            let pos = Utils.lonLatToWorld([data[i].lng, data[i].lat], 150);\r\n            positions[3 * i] = pos[0];\r\n            positions[3 * i + 1] = pos[1];\r\n            positions[3 * i + 2] = pos[2];\r\n\r\n            let linePositions = new Float32Array(6);\r\n            linePositions[0] = start[0];\r\n            linePositions[1] = start[1];\r\n            linePositions[2] = start[2];\r\n            linePositions[3] = pos[0];\r\n            linePositions[4] = pos[1];\r\n            linePositions[5] = pos[2];\r\n            let lineGeometry = new THREE.BufferGeometry();\r\n            lineGeometry.setAttribute('position', new THREE.BufferAttribute(linePositions, 3));\r\n            let line = new THREE.Line(lineGeometry, this.lineMaterial);\r\n            this.node.add(line);\r\n        }\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        let mesh = new THREE.Points(geometry, this.material);\r\n        mesh.sortParticles = true;\r\n        this.node.add(mesh);\r\n        //this.node.position.y = 600;\r\n        this.setStyle(this.style);\r\n    }\r\n    createMesh(coordinates, config) {\r\n    }\r\n    setStyle(style) {\r\n        let {\r\n            img,\r\n            color,\r\n            opacity,\r\n            size,\r\n            lineColor,\r\n            lineOpacity\r\n        } = style;\r\n        if(color !== undefined) {\r\n            this.material.color.set(color);\r\n        }\r\n        if(opacity !== undefined) {\r\n            this.material.opacity = opacity;\r\n        }\r\n        if(size !== undefined) {\r\n            this.material.size = size;\r\n        }\r\n        if(img !== undefined) {\r\n            this.material.map = this.view.textureLoader.load(img);\r\n        }\r\n        if(lineColor !== undefined) {\r\n            this.lineMaterial.color.set(lineColor);\r\n        }\r\n        if(lineOpacity !== undefined) {\r\n            this.lineMaterial.opacity = lineOpacity;\r\n        }\r\n    }\r\n}","import * as THREE from 'three';\r\nimport * as Cesium from 'cesium';\r\nimport Layer from './Layer';\r\nimport Utils from '../Common/Utils';\r\nimport GeoJSON from '../Common/GeoJSON';\r\nexport default class PolygonLayer extends Layer {\r\n    constructor(props) {\r\n        super();\r\n        // this.effect = false;\r\n        // this.color = 0xc9c9c9;\r\n        // this.outlineColor = 0xff320f;\r\n        // this.height = 600;\r\n        this.style = {\r\n            effect: false,\r\n            opacity: .5,\r\n            color: '#DD3217',\r\n            outlineColor: '#ffa108',\r\n            outlineOpacity: 1.0,\r\n            height: 2000\r\n        };\r\n        Object.assign(this, props);\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.material = new THREE.MeshBasicMaterial({\r\n            color: this.style.color,\r\n            // side: THREE.BackSide,\r\n            // map: this.style.img,\r\n            transparent: true,\r\n            opacity: this.style.opacity\r\n        });\r\n        //this.lineGeometry = new THREE.BufferGeometry();\r\n        this.lineMaterial = new THREE.MeshBasicMaterial({\r\n            color: this.style.outlineColor,\r\n            opacity: this.style.outlineOpacity\r\n        });\r\n    }\r\n    geoJSON(data) {\r\n        GeoJSON.toGeometry(data, rs => {\r\n            if(rs.type === 'MultiPolygon' || rs.type === 'Polygon') {\r\n                this.createMesh(rs.type === 'Polygon' ? [rs.coordinates] : rs.coordinates, {\r\n                    //height: rs.properties.height !== undefined && rs.properties.height !== null ? rs.properties.height : this.style.height\r\n                    height: this.style.height\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setData(data) {\r\n        this.clear();\r\n        this.geoJSON(data);\r\n        this.setStyle(this.style);\r\n    }\r\n    createMesh(coordinates, config) {\r\n        const node = new THREE.Group();\r\n        this.node.add(node);\r\n        let { height } = config;\r\n        for(let i = 0; i < coordinates.length; i++) {\r\n            let outers = [], holes = [];\r\n            for(let j = 0; j < coordinates[i].length; j++) {\r\n                if(j === 0) {\r\n                    for(let m = 0; m < coordinates[i][j].length; m++) {\r\n                        let point = Utils.lonLatToWorld(coordinates[i][j][m]);\r\n                        outers.push({\r\n                            x: point[0],\r\n                            y: point[1],\r\n                            z: point[2]\r\n                        });\r\n                    }\r\n                } else {\r\n                    let points = [];\r\n                    for(let m = 0; m < coordinates[i][j].length; m++) {\r\n                        let point = Utils.lonLatToWorld(coordinates[i][j][m]);\r\n                        points.push({\r\n                            x: point[0],\r\n                            y: point[1],\r\n                            z: point[2]\r\n                        });\r\n                    }\r\n                    let hole = new Cesium.PolygonHierarchy(points);\r\n                    holes.push(hole);\r\n                }\r\n            }\r\n            let gm = new Cesium.PolygonHierarchy(outers, holes);\r\n            let geometry = new Cesium.PolygonGeometry({\r\n                polygonHierarchy: gm,\r\n                extrudedHeight: height\r\n            });\r\n            geometry = Cesium.PolygonGeometry.createGeometry(geometry);\r\n            let indices = geometry.indices;\r\n            let positions = geometry.attributes.position.values;\r\n            let positionsArr = new Float32Array(positions.length);\r\n            let uv = geometry.attributes.st.values;\r\n            let normals = geometry.attributes.normal.values;\r\n            for(let k = 0; k < positions.length; k++) {\r\n                let pos = [positions[3 * k], positions[3 * k + 1], positions[3 * k + 2]];\r\n                positionsArr[3 * k] = pos[0];\r\n                positionsArr[3 * k + 1] = pos[1];\r\n                positionsArr[3 * k + 2] = pos[2];\r\n            }\r\n            geometry = new THREE.BufferGeometry();\r\n            geometry.setIndex(new THREE.BufferAttribute(indices, 1));\r\n            geometry.setAttribute('position', new THREE.BufferAttribute(positionsArr, 3));\r\n            geometry.setAttribute('uv', new THREE.BufferAttribute(uv, 2));\r\n            geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\r\n            // new THREE.MeshBasicMaterial({\r\n            //     map: null,\r\n            //     transparent: true,\r\n            //     opacity: 1.0,\r\n            //     color: new THREE.Color(0xffffff).setHSL(Math.floor(Math.random() * 30 + 30) / 30, 0.6, 0.6)\r\n            // })\r\n            const obj = new THREE.Mesh(geometry, this.material);\r\n            node.add(obj);\r\n            let lineGeometry = new Cesium.PolygonOutlineGeometry({\r\n                polygonHierarchy: new Cesium.PolygonHierarchy(gm.positions),\r\n                extrudedHeight: height\r\n            });\r\n            lineGeometry = new Cesium.PolygonOutlineGeometry.createGeometry(lineGeometry);\r\n            let linePositions = lineGeometry.attributes.position.values;\r\n\r\n            lineGeometry = new THREE.BufferGeometry();\r\n            lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(linePositions, 3));\r\n            let line = new THREE.Line(lineGeometry, this.lineMaterial);\r\n            node.add(line);\r\n        }\r\n        // this.setEffect(this.style.effect);\r\n    }\r\n    setStyle(style) {\r\n        const {\r\n            color,\r\n            opacity,\r\n            height,\r\n            outlineColor,\r\n            outlineOpacity,\r\n            effect\r\n        } = style;\r\n        if(color !== undefined) {\r\n            this.material.color.set(color);\r\n        }\r\n        if(opacity !== undefined) {\r\n            this.material.opacity = opacity;\r\n        }\r\n        if(outlineColor !== undefined) {\r\n            this.lineMaterial.color.set(outlineColor);\r\n        }\r\n        if(outlineOpacity !== undefined) {\r\n            this.lineMaterial.opacity = outlineOpacity;\r\n        }\r\n        if(height !== undefined) {\r\n            if(this.preHeight === undefined || this.preHeight === null) {\r\n                this.preHeight = height;\r\n            }\r\n            let scale = height / this.preHeight;\r\n            this.node.children.forEach(item => {\r\n                item.scale.y = scale || 1;\r\n            });\r\n            //this.node.scale.y = scale;\r\n        }\r\n        this.setEffect(effect);\r\n        // if(effect !== undefined) {\r\n        //     for(let i = 0; i < this.node.children.length; i++) {\r\n        //         this.updateEffect(this.node.children[i], {\r\n        //             //name: 'outline',\r\n        //             name: 'urealBloom',\r\n        //             value: 1\r\n        //         }, effect);\r\n        //     }\r\n        // }\r\n    }\r\n    setEffect(isEffect) {\r\n        for(let i = 0; i < this.node.children.length; i++) {\r\n            for(let j = 0; j < this.node.children[i].children.length; j++) {\r\n                this.updateEffect(this.node.children[i].children[j], {\r\n                    //name: 'outline',\r\n                    name: 'urealBloom',\r\n                    value: 0.3\r\n                }, isEffect);\r\n            }\r\n        }\r\n    }\r\n    // updateColor(color) {\r\n    //     for(let i = 0; i < this.material.length; i++) {\r\n    //         this.material[i].color.setHex(color);\r\n    //     }\r\n    //     this.lineMaterial.color.setHex(color);\r\n    // }\r\n    // updateOpacity(opacity) {\r\n    //     for(let i = 0; i < this.material.length; i++) {\r\n    //         this.material[i].opacity = opacity;\r\n    //     }\r\n    // }\r\n    // updateHeight(height) {\r\n    //     const scale = height / this.height;\r\n    //     this.node.scale.y = scale;\r\n    //     //this.height = height;\r\n    //     this.updateUV(scale);\r\n    // }\r\n    // setEffect(isEffect) {\r\n    //     for(let i = 0; i < this.node.children.length; i++) {\r\n    //         this.updateEffect(this.node.children[i], {\r\n    //             //name: 'outline',\r\n    //             name: 'urealBloom',\r\n    //             value: 1\r\n    //         }, isEffect);\r\n    //     }\r\n    // }\r\n    // updateUV(height) {\r\n    //     // for (let n in this.node.children) {\r\n    //     //     let group = this.node.children[n].geometry.groups[1], \r\n    //     //         start = group.start * 2, \r\n    //     //         count = group.count * 2, \r\n    //     //         uv = this.node.children[n].geometry.attributes.uv2.array, \r\n    //     //         h = height;\r\n    //     //     for (let i = start; i < start + count; i += 2) {\r\n    //     //         uv[i + 1] = uv[i + 1] * h;\r\n    //     //     }\r\n    //     //     let geometry = this.node.children[n].geometry;\r\n    //     //     //geometry.setAttribute(\"uv\", new THREE.BufferAttribute(uv, 2));\r\n    //     //     geometry.setAttribute(\"uv2\", new THREE.BufferAttribute(uv, 2));\r\n    //     //     //geometry.attributes.uv.needsUpdate = true;\r\n    //     // }\r\n    // }\r\n}","import * as THREE from 'three';\r\nimport Layer from './Layer';\r\nimport Utils from '../Common/Utils';\r\nimport GeoJSON from '../Common/GeoJSON';\r\nimport { Children } from 'react';\r\nexport default class ScanLayer extends Layer {\r\n    constructor(props) {\r\n        super();\r\n        //this.speed = .05;\r\n        this.style = {\r\n            height: 0,\r\n            color: \"#FF9400\",\r\n            opacity: 1.0,\r\n            speed: 0.01\r\n        };\r\n        Object.assign(this, props);\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.material = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: {\r\n                    type: \"f\",\r\n                    value: 0\r\n                },\r\n                color: {\r\n                    type: \"c\",\r\n                    value: new THREE.Color(\"#ff326e\")\r\n                },\r\n                opacity: {\r\n                    type: \"f\",\r\n                    value: 1.0\r\n                }\r\n            },\r\n            //defaultAttributeValues: {},\r\n            vertexShader: `\r\n                #include <common>\r\n                #include <logdepthbuf_pars_vertex>\r\n                //precision lowp float;\r\n                //precision lowp int;\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                    #include <logdepthbuf_vertex>\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <logdepthbuf_pars_fragment>\r\n                //#if __VERSION__ == 100\r\n                    //#extension GL_OES_standard_derivatives : enable\r\n                //#endif\r\n                uniform vec3 color;\r\n                uniform float opacity;\r\n                uniform float time;\r\n                varying vec2 vUv;\r\n                #define pi 3.1415926535\r\n                #define PI2RAD 0.01745329252\r\n                #define TWO_PI (2. * PI)\r\n                float rands(float p) {\r\n                    return fract(sin(p) * 10000.0);\r\n                }\r\n                float noise(vec2 p) {\r\n                    float t = time / 20000.0;\r\n                    if(t > 1.0) t -= floor(t);\r\n                    return rands(p.x * 14. + p.y * sin(t) * 0.5);\r\n                }\r\n                vec2 sw(vec2 p) {\r\n                    return vec2(floor(p.x), floor(p.y));\r\n                }\r\n                vec2 se(vec2 p) {\r\n                    return vec2(ceil(p.x), floor(p.y));\r\n                }\r\n                vec2 nw(vec2 p) {\r\n                    return vec2(floor(p.x), ceil(p.y));\r\n                }\r\n                vec2 ne(vec2 p) {\r\n                    return vec2(ceil(p.x), ceil(p.y));\r\n                }\r\n                float smoothNoise(vec2 p) {\r\n                    vec2 inter = smoothstep(0.0, 1.0, fract(p));\r\n                    float s = mix(noise(sw(p)), noise(se(p)), inter.x);\r\n                    float n = mix(noise(nw(p)), noise(ne(p)), inter.x);\r\n                    return mix(s, n, inter.y);\r\n                }\r\n                float fbm(vec2 p) {\r\n                    float z = 2.0;\r\n                    float rz = 0.0;\r\n                    vec2 bp = p;\r\n                    for(float i = 1.0; i < 6.0; i++) {\r\n                        rz += abs((smoothNoise(p) - 0.5)* 2.0) / z;\r\n                        z *= 2.0;\r\n                        p *= 2.0;\r\n                    }\r\n                    return rz;\r\n                }\r\n                void main() {\r\n                    vec2 uv = vUv;\r\n                    vec2 uv2 = vUv;\r\n                    if (uv.y < 0.5) {\r\n                        discard;\r\n                    }\r\n                    uv *= 4.;\r\n                    float rz = fbm(uv);\r\n                    uv /= exp(mod(time * 2.0, pi));\r\n                    rz *= pow(15., 0.9);\r\n                    gl_FragColor = mix(vec4(color, opacity) / rz, vec4(color, 0.1), 0.2);\r\n                    if (uv2.x < 0.05) {\r\n                        gl_FragColor = mix(vec4(color, 0.1), gl_FragColor, uv2.x / 0.05);\r\n                    }\r\n                    if (uv2.x > 0.95) {\r\n                        gl_FragColor = mix(gl_FragColor, vec4(color, 0.1), (uv2.x - 0.95) / 0.05);\r\n                    }\r\n                    #include <logdepthbuf_fragment>\r\n                }\r\n            `,\r\n            blending: THREE.AdditiveBlending,\r\n            depthWrite: false,\r\n            depthTest: true,\r\n            side: THREE.DoubleSide,\r\n            transparent: true,\r\n            opacity: 1.0\r\n        });\r\n    }\r\n    geoJSON(data) {\r\n        GeoJSON.toGeometry(data, rs => {\r\n            if(rs.type === 'MultiPoint' || rs.type === 'Point') {\r\n                this.createMesh(rs.type === 'Point' ? [rs.coordinates] : rs.coordinates, {\r\n                    height: rs.properties.height !== undefined && rs.properties.height !== null ? rs.properties.height : this.height\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setData(data) {\r\n        this.clear();\r\n        //this.geoJSON(data);\r\n        for(let i = 0; i < data.length; i++) {\r\n            let pos = Utils.lonLatToWorld([data[i].lng, data[i].lat]);\r\n            let geometry = new THREE.SphereBufferGeometry(200, 200, 200, 200, Math.PI * 2);\r\n            let obj = new THREE.Mesh(geometry, this.material);\r\n            obj.position.x = pos[0];\r\n            obj.position.y = pos[1];\r\n            obj.position.z = pos[2];\r\n            Utils.setDirection(obj, pos, [0, 1, 0]);\r\n            this.node.add(obj);\r\n        }\r\n        this.setStyle(this.style);\r\n    }\r\n    // loadModel() {\r\n    //     this.MTLLoader = new THREE.MTLLoader();\r\n    //     this.OBJLoader = new THREE.OBJLoader();\r\n    //     this.MTLLoader.setPath('model/sz/');\r\n    //     this.MTLLoader.load('深圳地王大厦.mtl', materials => {\r\n    //         materials.preload();\r\n    //         //this.OBJLoader.setMaterials(materials);\r\n    //         this.OBJLoader.setPath('model/sz/');\r\n    //         this.OBJLoader.load('深圳地王大厦.obj', obj => {\r\n    //             obj.traverse(children => {\r\n    //                 if(children.isMesh) {\r\n    //                     children.material.color.set(0x0c7f9c);\r\n    //                 }\r\n    //             });\r\n    //             obj.position.x = _pos[0];\r\n    //             obj.position.y = _pos[1];\r\n    //             obj.position.z = _pos[2];\r\n    //             //obj.scale.set(10, 10, 10);\r\n    //             Utils.setDirection(obj, _pos, [0, 1, 0]);\r\n    //             this.node.add(obj);\r\n    //         });\r\n    //     });\r\n    // }\r\n    createMesh(coordinates, config) {\r\n    }\r\n    setStyle(style) {\r\n        let {\r\n            height,\r\n            color,\r\n            opacity,\r\n            speed\r\n        } = style;\r\n        if(color !== undefined) {\r\n            this.material.uniforms.color.value.setStyle(color);\r\n        }\r\n        if(opacity !== undefined) {\r\n            this.material.uniforms.opacity.value = opacity;\r\n        }\r\n        // if(height !== undefined) {\r\n        //     this.node.position.y = height;\r\n        // }\r\n        if(speed !== undefined) {\r\n            this.style.speed = speed;\r\n        }\r\n    }\r\n    update() {\r\n        if(this.material) {\r\n            this.material.uniforms.time.value += this.style.speed;\r\n        }\r\n    }\r\n}","module.exports = \"//varying vec4 Position;\\r\\n//precision highp float;\\r\\n//varying vec3 ModelPostion;\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <fog_pars_fragment>\\r\\n#include <bsdfs>\\r\\n#include <lights_pars_begin>\\r\\n#include <shadowmap_pars_fragment>\\r\\n#include <shadowmask_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\nvarying float v_distance;\\r\\nvarying vec3 PositionWS;\\r\\nvarying vec2 texCoords;\\r\\n\\r\\nuniform bool grayFilterEnable;\\r\\n//uniform float grayMinMax[2];\\r\\n//uniform float grayFilterPerBar[10];\\r\\n//uniform vec3 grayFilterColorBar[10];\\r\\nuniform float shadowOpacity;\\r\\n\\r\\nuniform sampler2D TexSampler0;\\r\\n\\r\\nuniform\\tvec4 textureRectangle0;\\r\\n\\r\\nuniform\\tvec4 textureTransAndScale0;\\r\\n\\r\\nuniform float brightness0;\\r\\n\\r\\nuniform float alphaIndex0;\\r\\n\\r\\nuniform float isAddEffect0;\\r\\nuniform vec4 earthColor0;\\r\\nuniform vec4 earthAddColor0;\\r\\n\\r\\nuniform float south1;\\r\\nuniform float north1;\\r\\nuniform float southMercatorY1;\\r\\nuniform float oneOverMercatorHeight1;\\r\\nuniform float isReProjection;\\r\\n\\r\\n\\r\\n\\r\\nuniform\\tfloat Km;\\r\\nuniform\\tfloat Kr;\\r\\nuniform\\tfloat ESun;\\r\\n\\r\\nuniform int nSamples;\\r\\nuniform float fSamples;\\r\\n\\r\\n//uniform float g,\\r\\n\\r\\n//uniform\\tvec3 v3CameraPosInput;\\r\\nuniform\\tvec3 v3LightPosInput;\\r\\n\\r\\nuniform\\tfloat fInnerRadius;\\r\\nuniform\\tfloat fOuterRadius;\\r\\n\\r\\nuniform float fScaleDepth;\\r\\nuniform\\tvec4 inputColor;\\r\\nuniform vec4 alphaValue;\\r\\n\\r\\nuniform float night;\\r\\n\\r\\nuniform float contrast;\\r\\nuniform float hue;\\r\\nuniform float saturation;\\r\\nuniform float textureGamma;\\r\\n\\r\\nuniform vec4 u_initialColor;\\r\\nuniform float nightfadeIn;\\r\\nuniform float nightfadeOut;\\r\\nuniform float fadeInDist;\\r\\nuniform float fadeOutDist;\\r\\n\\r\\nuniform float czm_fogDensity;\\r\\nuniform sampler2D colorMapping;\\r\\n\\r\\n//#define saturate(a) clamp( a, 0.0, 1.0 )\\r\\n//#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\r\\n//#define LOG2 1.442695\\r\\n\\t\\t\\t\\r\\nstruct czm_ellipsoid {\\r\\n    vec3 center;\\r\\n    vec3 radii;\\r\\n    vec3 inverseRadii;\\r\\n    vec3 inverseRadiiSquared;\\r\\n};\\r\\nstruct AtmosphereColor {\\r\\n    vec3 mie;\\r\\n    vec3 rayleigh;\\r\\n};\\r\\n//uniform vec4 earthColor;\\r\\n//uniform vec4 earthAddColor;\\r\\n//uniform float isAddEffect;\\r\\nfloat scale(float fCos, float fScaleDepth) {\\r\\n    float x = 1.0 - fCos;\\r\\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\r\\n}\\r\\nvec4 depthColor(vec4 color) {\\r\\n        color.r = color.r * color.r * color.r;\\r\\n        color.g = color.g * color.g * color.g;\\r\\n        color.b = color.b * color.b;\\r\\n        return color;\\r\\n}\\r\\n\\r\\n// Returns the near intersection point of a line and a sphere\\r\\nfloat getNearIntersection(vec3 v3Pos, vec3 v3Ray, float fDistance2, float fRadius2) {\\r\\n    float B = 2.0 * dot(v3Pos, v3Ray);\\r\\n    float C = fDistance2 - fRadius2;\\r\\n    float fDet = max(0.0, B*B - 4.0 * C);\\r\\n    return 0.5 * (-B - sqrt(fDet));\\r\\n}\\r\\n\\t\\t\\t\\r\\n//we must convert rgb to a right factor.\\r\\nvec3 czm_contrast(vec3 rgb, float contrast){\\r\\n    vec3 color = mix(vec3(0.5), rgb, contrast);\\r\\n    color = clamp(color , 0.0, 1.0);\\r\\n    return color;\\r\\n}\\r\\n\\t\\t\\t\\r\\nvec3 czm_hue(vec3 rgb, float adjustment) {\\r\\n    const mat3 toYIQ = mat3(0.299, 0.587, 0.114,\\r\\n                        0.595716, -0.274453, -0.321263,\\r\\n                        0.211456, -0.522591, 0.311135);\\r\\n    const mat3 toRGB = mat3(1.0, 0.9563, 0.6210,\\r\\n                        1.0, -0.2721, -0.6474,\\r\\n                        1.0, -1.107, 1.7046);\\r\\n    vec3 yiq = toYIQ * rgb;\\r\\n    float hue = atan(yiq.z, yiq.y) + adjustment;\\r\\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\r\\n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\r\\n    vec3 final = toRGB * color;\\r\\n    final = clamp(final , 0.0, 1.0);\\r\\n    return final;\\r\\n}\\r\\n\\r\\nvec3 czm_saturation(vec3 rgb, float adjustment) {\\r\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\r\\n    vec3 intensity = vec3(dot(rgb, W));\\r\\n    vec3 color = mix(intensity, rgb, adjustment);\\r\\n    color = clamp(color , 0.0, 1.0);\\r\\n    return color;\\r\\n\\r\\n}\\r\\n\\t\\t\\t\\r\\nvec4 sampleAndBlend(\\r\\n    float addEffect,\\r\\n    vec4 eColor,\\r\\n    vec4 addColor,\\r\\n    vec4 previousColor,\\r\\n    sampler2D sampler_texture,\\r\\n    vec2 tileTextureCoordinates,\\r\\n    vec4 textureCoordinateRectangle,\\r\\n    vec4 textureCoordinateTranslationAndScale,\\r\\n    float textureAlphaIndex,\\r\\n    float brightness,\\r\\n    float south,\\r\\n    float north,\\r\\n    float southMercatorY,\\r\\n    float oneOverMercatorHeight,\\r\\n    float isReProjection,\\r\\n    vec4 alphaValue,\\r\\n    float contrast,\\r\\n    float hue,\\r\\n    float saturation,\\r\\n    float gamma\\r\\n) {\\r\\n\\r\\n    float textureAlpha = 1.0;\\r\\n    vec2 alphaMultiplier = step(textureCoordinateRectangle.xy, tileTextureCoordinates);\\r\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\r\\n\\r\\n    alphaMultiplier = step(vec2(0.0,0.0), textureCoordinateRectangle.zw - tileTextureCoordinates);\\r\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\r\\n\\r\\n    vec2 translation = textureCoordinateTranslationAndScale.xy;\\r\\n    vec2 scale = textureCoordinateTranslationAndScale.zw;\\r\\n    vec2 textureCoordinates = tileTextureCoordinates * scale + translation;\\r\\n\\r\\n    //再投影\\r\\n    float latitude = mix(south, north , textureCoordinates.y);\\r\\n    float sinLatitude = sin(latitude);\\r\\n    float mercatorY = 0.5 * log((1.0 + sinLatitude) / (1.0 - sinLatitude));\\r\\n    float mercatorFraction = (mercatorY - southMercatorY) * oneOverMercatorHeight;\\r\\n    textureCoordinates.y =  mercatorFraction;\\r\\n\\r\\n    if( isReProjection == 0.0){\\r\\n        textureCoordinates.y = (tileTextureCoordinates * scale + translation).y;\\r\\n    }\\r\\n    //textureCoordinates = clamp(textureCoordinates, 1.0/256.0, 255.0/256.0);\\r\\n    vec4 value = texture2D(sampler_texture, textureCoordinates);\\r\\n    if(addEffect == 1.0) {\\r\\n        value = depthColor(value);\\r\\n    }\\r\\n\\r\\n    value.rgb *=eColor.rgb;\\r\\n//      if(eColor.a==1.0){\\r\\n//        value *=eColor;\\r\\n//      }\\r\\n//      else{\\r\\n////        value.rgb = (value.rgb + eColor.rgb * eColor.a)/(1.0 + eColor.a);\\r\\n//        value.rgb = value.rgb * (1.0-eColor.a) + eColor.rgb * eColor.a;\\r\\n//      }\\r\\n\\r\\n    value.rgb = (value.rgb + addColor.rgb * addColor.a) / (1.0 + addColor.a);\\r\\n    vec3 color = value.rgb;\\r\\n    float alpha = value.a;\\r\\n    //brightness\\r\\n    color = mix(vec3(0.0,0.0,0.0), color, brightness);\\r\\n    //contrast\\r\\n    color = czm_contrast(color, contrast);\\r\\n    //hue\\r\\n    color = czm_hue(color, hue);\\r\\n    // saturation\\r\\n    color = czm_saturation(color, saturation);\\r\\n    // gamma\\r\\n    color = pow(color, vec3(gamma));\\r\\n    float sourceAlpha = alpha * textureAlpha;\\r\\n    float outAlpha = mix(previousColor.a, 1.0, sourceAlpha);\\r\\n    vec3 outColor = mix(previousColor.rgb * previousColor.a, color, sourceAlpha) / outAlpha;\\r\\n    return vec4(outColor, outAlpha);\\r\\n}\\r\\n\\t\\t\\t\\r\\n//czm_ellipsoid czm_getWgs84EllipsoidEC()\\r\\n//{\\r\\n//    vec3 radii = vec3(6378137.0, 6378137.0, 6356752.314245);\\r\\n//    vec3 inverseRadii = vec3(1.0 / radii.x, 1.0 / radii.y, 1.0 / radii.z);\\r\\n//    vec3 inverseRadiiSquared = inverseRadii * inverseRadii;\\r\\n//    czm_ellipsoid temp = czm_ellipsoid(viewMatrix[3].xyz, radii, inverseRadii, inverseRadiiSquared);\\r\\n//    return temp;\\r\\n//}\\r\\nfloat czm_fade(float cameraDist, float fadeInDist,float fadeOutDist) {\\r\\n    float fade = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\\r\\n    return fade;\\r\\n}\\r\\nAtmosphereColor computeGroundAtmosphereFromSpace(vec3 v3Pos, bool useSunLighting) {\\r\\n//        float PI = 3.14159265;\\r\\n        //float g2 =  g * g;\\r\\n\\r\\n    vec3 v3InvWavelength = vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));\\r\\n\\r\\n    vec3 v3CameraPos =  vec3(0.0, 0.0, 0.0);\\r\\n    v3CameraPos = cameraPosition;\\r\\n\\r\\n    vec3 v3LightPos = v3LightPosInput / length(v3LightPosInput);\\r\\n\\r\\n    float fCameraHeight = length(v3CameraPos);\\r\\n\\r\\n    float fCameraHeight2 = fCameraHeight * fCameraHeight;\\r\\n\\r\\n    float inOutFactor = 1.05;\\r\\n    float fInnerRadius2 = fInnerRadius * fInnerRadius;\\r\\n    float fOuterRadius2 = fOuterRadius * fOuterRadius;\\r\\n\\r\\n    float fKrESun = Kr * ESun;\\r\\n    float fKmESun = Km * ESun;\\r\\n    float fKr4PI = Kr * 4.0 * PI;\\r\\n    float fKm4PI = Km * 4.0 * PI;\\r\\n\\r\\n    float fInvScaleDepth = 1.0 / fScaleDepth;\\r\\n    float fScale = 1.0 / (fOuterRadius - fInnerRadius);\\r\\n    float fScaleOverScaleDepth = fScale / fScaleDepth;\\r\\n\\r\\n    ////////////////////////////////////////////////\\r\\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\\r\\n    // vec3 v3Pos = PositionWS;\\r\\n    vec3 v3Ray = v3Pos - v3CameraPos;\\r\\n    v3Pos = normalize(v3Pos);\\r\\n    float fFar = length(v3Ray);\\r\\n    v3Ray /= fFar;\\r\\n    // Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray passing through the atmosphere)\\r\\n    float fNear = getNearIntersection(v3CameraPos, v3Ray, fCameraHeight2, fOuterRadius2);\\r\\n    // Calculate the ray's starting position, then calculate its scattering offset\\r\\n    vec3 v3Start = v3CameraPos + v3Ray * fNear;\\r\\n    fFar -= fNear;\\r\\n    float fDepth = exp((fInnerRadius - fOuterRadius) * fInvScaleDepth);\\r\\n\\r\\n    //if you donnot want night make it 1.0\\r\\n    float fLightAngle = useSunLighting ? dot(v3LightPos, v3Pos)/length(v3Pos) : 1.0;\\r\\n    float fCameraAngle = dot(-v3Ray, v3Pos)/length(v3Pos);\\r\\n    //float fLightAngle = dot(v3LightPos, v3Pos);\\r\\n    float fCameraScale = scale(fCameraAngle, fScaleDepth);\\r\\n    float fLightScale = scale(fLightAngle, fScaleDepth);\\r\\n    float fCameraOffset = fDepth*fCameraScale;\\r\\n    float fTemp = (fLightScale + fCameraScale);\\r\\n    // Initialize the scattering loop variables\\r\\n    //gl_FrontColor = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n    float fSampleLength = fFar / fSamples;\\r\\n    float fScaledLength = fSampleLength * fScale;\\r\\n    vec3 v3SampleRay = v3Ray * fSampleLength;\\r\\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\\r\\n    // Now loop through the sample rays\\r\\n    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);\\r\\n    vec3 v3Attenuate = vec3(0.0,0.0,0.0);\\r\\n    for(int i = 0; i < 2; i++) {\\r\\n        float fHeight = length(v3SamplePoint);\\r\\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\\r\\n        float fScatter = fDepth*fTemp - fCameraOffset;\\r\\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\\r\\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\\r\\n        v3SamplePoint += v3SampleRay;\\r\\n    }\\r\\n    AtmosphereColor color;\\r\\n    color.mie = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\\r\\n    color.rayleigh = v3Attenuate;\\r\\n    return color;\\r\\n\\r\\n}\\r\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor) {\\r\\n    float scalar = distanceToCamera * czm_fogDensity;\\r\\n    float fog = 1.0 - exp(-(scalar * scalar));\\r\\n    return mix(color, fogColor, fog);\\r\\n}\\r\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor, float fogModifierConstant) {\\r\\n    float scalar = distanceToCamera * czm_fogDensity;\\r\\n    float fog = 1.0 - exp(-((fogModifierConstant * scalar + fogModifierConstant) * (scalar * (1.0 + fogModifierConstant))));\\r\\n    return mix(color, fogColor, fog);\\r\\n}\\r\\n\\t\\t\\t\\t\\r\\nvec4 czm_FilterColor(vec4 finalColor) {\\r\\n    vec4 finalColor1 = vec4(0);\\r\\n    if(grayFilterEnable) {\\r\\n        float gray = clamp( dot(finalColor.rgb, vec3(0.333, 0.333, 0.333)), 0.0, 1.0);\\r\\n        finalColor1.rgb = texture2D(colorMapping, vec2(gray, 0.5)).rgb;\\r\\n        finalColor1.a = finalColor.a;\\r\\n    } else {\\r\\n        finalColor1 = finalColor;\\r\\n    }\\r\\n    return finalColor1;\\r\\n}\\r\\nvoid main() {\\r\\n    #include <logdepthbuf_fragment>\\r\\n    //vec2 texCoords = vec2(gl_TexCoord[0]);\\r\\n    vec2 webglUv = texCoords;\\r\\n    //webglUv.y =1.0 - webglUv.y;\\r\\n    webglUv = clamp(webglUv , 0.0, 1.0);\\r\\n    vec4 lastColor = sampleAndBlend(isAddEffect0,earthColor0,earthAddColor0,u_initialColor,TexSampler0,webglUv,textureRectangle0,textureTransAndScale0,alphaIndex0,brightness0,south1,north1,southMercatorY1,oneOverMercatorHeight1,isReProjection,alphaValue,contrast,hue,saturation,textureGamma);\\r\\n    //to caculate fog\\r\\n    //float cameraDist = length(viewMatrix[3]);\\r\\n    float cameraDist = length(cameraPosition);\\r\\n    float fade = czm_fade(cameraDist, fadeInDist, fadeOutDist);\\r\\n    //added lambertDiffuse TODO is it effective? 这个很一般，先忽略吧，毕竟咱们性能不太好啊\\r\\n    //float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_sunDirectionEC, normalEC) * 5.0 + 0.3, 0.0, 1.0);\\r\\n    //diffuseIntensity = mix(1.0, diffuseIntensity, fade);\\r\\n    //vec4 finalColor = vec4(color.rgb * diffuseIntensity, color.a);\\r\\n    vec4 finalColor = lastColor;\\r\\n    //added fogColor and hdr\\r\\n    AtmosphereColor atmosFogColor = computeGroundAtmosphereFromSpace(PositionWS, false);\\r\\n    vec3 c0 = atmosFogColor.mie;\\r\\n    vec3 c1 = atmosFogColor.rayleigh;\\r\\n    vec3 fogColor1 = c0 + finalColor.rgb * c1;\\r\\n    //we should use hdr\\r\\n    const float fExposure = 2.0;\\r\\n    fogColor1 = vec3(1.0) - exp(-fExposure * fogColor1);\\r\\n    //fog added, use my fog istead of cesium\\r\\n    // const float modifier = 0.15;\\r\\n    finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor1), finalColor.a);\\r\\n    //ground\\r\\n    //SUN 这个sun的计算处理了下，我们不能和cesium用一样的参数，这样可能无法模拟真实太阳的位置\\r\\n    vec3 groundAtmosphereColor = vec3(0.0);\\r\\n    if(night == 1.0) {\\r\\n        AtmosphereColor atmosColor = computeGroundAtmosphereFromSpace(PositionWS, true);\\r\\n        groundAtmosphereColor = atmosColor.mie + finalColor.rgb * atmosColor.rayleigh;\\r\\n        groundAtmosphereColor = vec3(1.0) - exp(-fExposure * groundAtmosphereColor);\\r\\n        //TODO 这个可能要弱一点才行\\r\\n        float sunlitAtmosphereIntensity = clamp((cameraDist - nightfadeOut) / (nightfadeIn - nightfadeOut), 0.0, 1.0);//caculate sun\\r\\n        // used hdr to make HDR look better\\r\\n        sunlitAtmosphereIntensity = max(sunlitAtmosphereIntensity * sunlitAtmosphereIntensity, 0.03);\\r\\n        //mix sun\\r\\n        groundAtmosphereColor = mix(groundAtmosphereColor, fogColor1, sunlitAtmosphereIntensity);\\r\\n    } else {\\r\\n        groundAtmosphereColor = fogColor1;\\r\\n    }\\r\\n    //use saturation to look better\\r\\n    groundAtmosphereColor = czm_saturation(groundAtmosphereColor, 1.6);\\r\\n    //mix\\r\\n    finalColor = vec4(mix(finalColor.rgb, groundAtmosphereColor, fade), finalColor.a);\\r\\n    finalColor.rgb *= vec3(earthColor0.a);\\r\\n    //finally you get the color\\r\\n    finalColor = czm_FilterColor(finalColor);\\r\\n    gl_FragColor = finalColor;\\r\\n    //now we get the shadow\\r\\n    //gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), (1.0-getShadowMask()));\\r\\n    vec4 shadow = vec4(vec3(0.0), shadowOpacity * (1.0 - getShadowMask()));\\r\\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, shadow.rgb, shadow.a);\\r\\n    #include <fog_fragment>\\r\\n}\"","module.exports = \"//varying vec4 Position;\\r\\n//precision highp float;\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <fog_pars_fragment>\\r\\n#include <bsdfs>\\r\\n#include <lights_pars_begin>\\r\\n#include <shadowmap_pars_fragment>\\r\\n#include <shadowmask_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\nvarying vec3 PositionWS;\\r\\nvarying vec2 texCoords;\\r\\n//varying vec3 ModelPostion;\\r\\nvarying float v_distance;\\r\\n\\r\\nuniform bool grayFilterEnable;\\r\\nuniform float shadowOpacity;\\r\\n//uniform float grayMinMax[2];\\r\\n//uniform float grayFilterPerBar[10];\\r\\n//uniform vec3 grayFilterColorBar[10];\\r\\n\\r\\nuniform sampler2D TexSampler0;\\r\\nuniform sampler2D TexSampler1;\\r\\n\\r\\nuniform\\tvec4 textureRectangle0;\\r\\nuniform\\tvec4 textureRectangle1;\\r\\n\\r\\nuniform\\tvec4 textureTransAndScale0;\\r\\nuniform\\tvec4 textureTransAndScale1;\\r\\n\\r\\nuniform float brightness0;\\r\\nuniform float brightness1;\\r\\n\\r\\nuniform float alphaIndex0;\\r\\nuniform float alphaIndex1;\\r\\n\\r\\nuniform float isAddEffect0;\\r\\nuniform float isAddEffect1;\\r\\n\\r\\n\\r\\nuniform vec4 earthColor0;\\r\\nuniform vec4 earthColor1;\\r\\n\\r\\nuniform vec4 earthAddColor0;\\r\\nuniform vec4 earthAddColor1;\\r\\n\\r\\n\\r\\nuniform float south1;\\r\\nuniform float north1;\\r\\nuniform float southMercatorY1;\\r\\nuniform float oneOverMercatorHeight1;\\r\\nuniform float isReProjection;\\r\\n\\r\\nuniform float south2;\\r\\nuniform float north2;\\r\\nuniform float southMercatorY2;\\r\\nuniform float oneOverMercatorHeight2;\\r\\n\\r\\nuniform\\tfloat Km;\\r\\nuniform\\tfloat Kr;\\r\\nuniform\\tfloat ESun;\\r\\n\\r\\nuniform int nSamples;\\r\\nuniform float fSamples;\\r\\n\\r\\n//uniform float g,\\r\\n\\r\\n//uniform\\tvec3 v3CameraPosInput;\\r\\nuniform\\tvec3 v3LightPosInput;\\r\\n\\r\\nuniform\\tfloat fInnerRadius;\\r\\nuniform\\tfloat fOuterRadius;\\r\\n\\r\\nuniform float fScaleDepth;\\r\\nuniform\\tvec4 inputColor;\\r\\nuniform vec4 alphaValue;\\r\\nuniform float night;\\r\\n\\r\\nuniform float contrast;\\r\\nuniform float hue;\\r\\nuniform float saturation;\\r\\nuniform float textureGamma;\\r\\n\\r\\nuniform vec4 u_initialColor;\\r\\nuniform float nightfadeIn;\\r\\nuniform float nightfadeOut;\\r\\nuniform float fadeInDist;\\r\\nuniform float fadeOutDist;\\r\\n\\r\\nuniform float czm_fogDensity;\\r\\nuniform sampler2D colorMapping;\\r\\n\\r\\n//#define saturate(a) clamp(a, 0.0, 1.0)\\r\\n//#define whiteCompliment(a) (1.0 - saturate(a))\\r\\n//#define LOG2 1.442695\\r\\nstruct czm_ellipsoid {\\r\\n    vec3 center;\\r\\n    vec3 radii;\\r\\n    vec3 inverseRadii;\\r\\n    vec3 inverseRadiiSquared;\\r\\n};\\r\\nstruct AtmosphereColor {\\r\\n    vec3 mie;\\r\\n    vec3 rayleigh;\\r\\n};\\r\\n\\r\\n//uniform vec4 earthColor;\\r\\n//uniform vec4 earthAddColor;\\r\\n//uniform float isAddEffect;\\r\\n\\r\\nfloat scale(float fCos, float fScaleDepth) {\\r\\n    float x = 1.0 - fCos;\\r\\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\r\\n}\\r\\n\\r\\nvec4 depthColor(vec4 color) {\\r\\n    color.r = color.r * color.r * color.r;\\r\\n    color.g = color.g * color.g * color.g;\\r\\n    color.b = color.b * color.b;\\r\\n    return color;\\r\\n}\\r\\n\\r\\n// Returns the near intersection point of a line and a sphere\\r\\nfloat getNearIntersection(vec3 v3Pos, vec3 v3Ray, float fDistance2, float fRadius2) {\\r\\n    float B = 2.0 * dot(v3Pos, v3Ray);\\r\\n    float C = fDistance2 - fRadius2;\\r\\n    float fDet = max(0.0, B*B - 4.0 * C);\\r\\n    return 0.5 * (-B - sqrt(fDet));\\r\\n}\\r\\n\\r\\nvec3 czm_contrast(vec3 rgb, float contrast) {\\r\\n    vec3 color = mix(vec3(0.5), rgb, contrast);\\r\\n    color = clamp(color , 0.0, 1.0);\\r\\n    return color;\\r\\n}\\r\\n\\r\\nvec3 czm_hue(vec3 rgb, float adjustment) {\\r\\n    const mat3 toYIQ = mat3(0.299, 0.587, 0.114,\\r\\n                            0.595716, -0.274453, -0.321263,\\r\\n                            0.211456, -0.522591, 0.311135);\\r\\n    const mat3 toRGB = mat3(1.0, 0.9563, 0.6210,\\r\\n                            1.0, -0.2721, -0.6474,\\r\\n                            1.0, -1.107, 1.7046);\\r\\n    vec3 yiq = toYIQ * rgb;\\r\\n    float hue = atan(yiq.z, yiq.y) + adjustment;\\r\\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\r\\n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\r\\n    vec3 final = toRGB * color;\\r\\n    final = clamp(final, 0.0, 1.0);\\r\\n    return final;\\r\\n}\\r\\n\\r\\nvec3 czm_saturation(vec3 rgb, float adjustment) {\\r\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\r\\n    vec3 intensity = vec3(dot(rgb, W));\\r\\n    vec3 color = mix(intensity, rgb, adjustment);\\r\\n    color = clamp(color , 0.0, 1.0);\\r\\n    return color;\\r\\n\\r\\n}\\r\\n\\r\\nvec4 sampleAndBlend(\\r\\n    float addEffect,\\r\\n    vec4 eColor,\\r\\n    vec4 addColor,\\r\\n    vec4 previousColor,\\r\\n    sampler2D sampler_texture,\\r\\n    vec2 tileTextureCoordinates,\\r\\n    vec4 textureCoordinateRectangle,\\r\\n    vec4 textureCoordinateTranslationAndScale,\\r\\n    float textureAlphaIndex,\\r\\n    float brightness,\\r\\n    float south,\\r\\n    float north,\\r\\n    float southMercatorY,\\r\\n    float oneOverMercatorHeight,\\r\\n    float isReProjection,\\r\\n    vec4 alphaValue,\\r\\n    float contrast,\\r\\n    float hue,\\r\\n    float saturation,\\r\\n    float gamma\\r\\n) {\\r\\n    float textureAlpha = 1.0;\\r\\n    vec2 alphaMultiplier = step(textureCoordinateRectangle.xy, tileTextureCoordinates);\\r\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\r\\n\\r\\n    alphaMultiplier = step(vec2(0.0,0.0), textureCoordinateRectangle.zw - tileTextureCoordinates);\\r\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\r\\n\\r\\n    vec2 translation = textureCoordinateTranslationAndScale.xy;\\r\\n    vec2 scale = textureCoordinateTranslationAndScale.zw;\\r\\n    vec2 textureCoordinates = tileTextureCoordinates * scale + translation;\\r\\n\\r\\n    //再投影\\r\\n    float latitude = mix(south, north , textureCoordinates.y);\\r\\n    float sinLatitude = sin(latitude);\\r\\n    float mercatorY = 0.5 * log((1.0 + sinLatitude) / (1.0 - sinLatitude));\\r\\n    float mercatorFraction = (mercatorY - southMercatorY) * oneOverMercatorHeight;\\r\\n    textureCoordinates.y =  mercatorFraction;\\r\\n\\r\\n    if( isReProjection == 0.0){\\r\\n        textureCoordinates.y =  (tileTextureCoordinates * scale + translation).y;\\r\\n    }\\r\\n    //textureCoordinates = clamp(textureCoordinates, 1.0/256.0, 255.0/256.0);\\r\\n    vec4 value = texture2D(sampler_texture, textureCoordinates);\\r\\n    if(addEffect == 1.0){\\r\\n        value = depthColor(value);\\r\\n    }\\r\\n    value.rgb *= eColor.rgb;\\r\\n//           if(eColor.a==1.0){\\r\\n//                 value *=eColor;\\r\\n//               }\\r\\n//               else{\\r\\n//                 //value.rgb = (value.rgb + eColor.rgb * eColor.a)/(1.0 + eColor.a);\\r\\n//                  value.rgb = value.rgb * (1.0-eColor.a) + eColor.rgb * eColor.a;\\r\\n//               }\\r\\n    value.rgb = (value.rgb + addColor.rgb * addColor.a)/(1.0 + addColor.a);\\r\\n    vec3 color = value.rgb;\\r\\n    float alpha = value.a;\\r\\n//\\r\\n    color = mix(vec3(0.0,0.0,0.0), color, brightness);\\r\\n    //contrast\\r\\n    color = czm_contrast(color, contrast);\\r\\n    //hue\\r\\n    color = czm_hue(color, hue);\\r\\n    // saturation\\r\\n    color = czm_saturation(color, saturation);\\r\\n    // gamma\\r\\n    color = pow(color, vec3(gamma));\\r\\n\\r\\n    float sourceAlpha = alpha * textureAlpha;\\r\\n    float outAlpha = mix(previousColor.a, 1.0, sourceAlpha);\\r\\n    vec3 outColor = mix(previousColor.rgb * previousColor.a, color, sourceAlpha) / outAlpha;\\r\\n    return vec4(outColor, outAlpha);\\r\\n}\\r\\n\\r\\n//czm_ellipsoid czm_getWgs84EllipsoidEC()\\r\\n//{\\r\\n//    vec3 radii = vec3(6378137.0, 6378137.0, 6356752.314245);\\r\\n//    vec3 inverseRadii = vec3(1.0 / radii.x, 1.0 / radii.y, 1.0 / radii.z);\\r\\n//    vec3 inverseRadiiSquared = inverseRadii * inverseRadii;\\r\\n//    czm_ellipsoid temp = czm_ellipsoid(viewMatrix[3].xyz, radii, inverseRadii, inverseRadiiSquared);\\r\\n//    return temp;\\r\\n//}\\r\\nfloat czm_fade(float cameraDist, float fadeInDist,float fadeOutDist) {\\r\\n    float fade = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\\r\\n    return fade;\\r\\n}\\r\\nAtmosphereColor computeGroundAtmosphereFromSpace(vec3 v3Pos, bool useSunLighting){\\r\\n    //float PI = 3.14159265;\\r\\n    //float g2 =  g * g;\\r\\n\\r\\n    vec3 v3InvWavelength = vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));\\r\\n\\r\\n    vec3 v3CameraPos = vec3(0.0, 0.0, 0.0);\\r\\n    v3CameraPos = cameraPosition;\\r\\n\\r\\n    vec3 v3LightPos = v3LightPosInput / length(v3LightPosInput);\\r\\n\\r\\n    float fCameraHeight = length(v3CameraPos);\\r\\n\\r\\n    float fCameraHeight2 = fCameraHeight * fCameraHeight;\\r\\n\\r\\n    float inOutFactor = 1.05;\\r\\n    float fInnerRadius2 = fInnerRadius * fInnerRadius;\\r\\n    float fOuterRadius2 = fOuterRadius * fOuterRadius;\\r\\n\\r\\n    float fKrESun = Kr * ESun;\\r\\n    float fKmESun = Km * ESun;\\r\\n    float fKr4PI = Kr * 4.0 * PI;\\r\\n    float fKm4PI = Km * 4.0 * PI;\\r\\n\\r\\n    float fInvScaleDepth = 1.0 / fScaleDepth;\\r\\n    float fScale = 1.0 / (fOuterRadius - fInnerRadius);\\r\\n    float fScaleOverScaleDepth = fScale / fScaleDepth;\\r\\n\\r\\n    ////////////////////////////////////////////////\\r\\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\\r\\n    //vec3 v3Pos = PositionWS;\\r\\n    vec3 v3Ray = v3Pos - v3CameraPos;\\r\\n    v3Pos = normalize(v3Pos);\\r\\n    float fFar = length(v3Ray);\\r\\n    v3Ray /= fFar;\\r\\n    // Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray passing through the atmosphere)\\r\\n    float fNear = getNearIntersection(v3CameraPos, v3Ray, fCameraHeight2, fOuterRadius2);\\r\\n    // Calculate the ray's starting position, then calculate its scattering offset\\r\\n    vec3 v3Start = v3CameraPos + v3Ray * fNear;\\r\\n    fFar -= fNear;\\r\\n    float fDepth = exp((fInnerRadius - fOuterRadius) * fInvScaleDepth);\\r\\n\\r\\n    //if you donnot want night make it 1.0\\r\\n    float fLightAngle = useSunLighting ? dot(v3LightPos, v3Pos)/length(v3Pos) : 1.0;\\r\\n    float fCameraAngle = dot(-v3Ray, v3Pos)/length(v3Pos);\\r\\n    //float fLightAngle = dot(v3LightPos, v3Pos);\\r\\n    float fCameraScale = scale(fCameraAngle, fScaleDepth);\\r\\n    float fLightScale = scale(fLightAngle, fScaleDepth);\\r\\n    float fCameraOffset = fDepth*fCameraScale;\\r\\n    float fTemp = (fLightScale + fCameraScale);\\r\\n    // Initialize the scattering loop variables\\r\\n    //gl_FrontColor = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n    float fSampleLength = fFar / fSamples;\\r\\n    float fScaledLength = fSampleLength * fScale;\\r\\n    vec3 v3SampleRay = v3Ray * fSampleLength;\\r\\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\\r\\n    // Now loop through the sample rays\\r\\n    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);\\r\\n    vec3 v3Attenuate = vec3(0.0,0.0,0.0);\\r\\n    for(int i = 0; i < 2; i++) {\\r\\n        float fHeight = length(v3SamplePoint);\\r\\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\\r\\n        float fScatter = fDepth*fTemp - fCameraOffset;\\r\\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\\r\\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\\r\\n        v3SamplePoint += v3SampleRay;\\r\\n    }\\r\\n    AtmosphereColor color;\\r\\n    color.mie = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\\r\\n    color.rayleigh = v3Attenuate;\\r\\n    return color;\\r\\n}\\r\\n\\r\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor) {\\r\\n    float scalar = distanceToCamera * czm_fogDensity;\\r\\n    float fog = 1.0 - exp(-(scalar * scalar));\\r\\n    return mix(color, fogColor, fog);\\r\\n}\\r\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor, float fogModifierConstant) {\\r\\n    float scalar = distanceToCamera * czm_fogDensity;\\r\\n    float fog = 1.0 - exp(-((fogModifierConstant * scalar + fogModifierConstant) * (scalar * (1.0 + fogModifierConstant))));\\r\\n    return mix(color, fogColor, fog);\\r\\n}\\r\\n\\r\\nvec4 czm_FilterColor(vec4 finalColor) {\\r\\n    vec4 finalColor1 = vec4(0);\\r\\n    if(grayFilterEnable) {\\r\\n        float gray = clamp( dot( finalColor.rgb, vec3(0.333, 0.333, 0.333) ), 0.0, 1.0 );\\r\\n        finalColor1.rgb = texture2D( colorMapping, vec2( gray, 0.5 ) ).rgb;\\r\\n        finalColor1.a = finalColor.a;\\r\\n    } else {\\r\\n        finalColor1 = finalColor;\\r\\n    }\\r\\n    return finalColor1;\\r\\n}\\r\\nvoid main() {\\r\\n    #include <logdepthbuf_fragment>\\r\\n    //vec2 texCoords =  vec2( gl_TexCoord[0] );\\r\\n    vec2 webglUv = texCoords;\\r\\n    //webglUv.y =1.0 - webglUv.y;\\r\\n    webglUv = clamp(webglUv , 0.0, 1.0);\\r\\n    vec4 lastColor = sampleAndBlend(isAddEffect0,earthColor0,earthAddColor0,u_initialColor,TexSampler0,webglUv,textureRectangle0,textureTransAndScale0,alphaIndex0,brightness0,south1,north1,southMercatorY1,oneOverMercatorHeight1,isReProjection,alphaValue,contrast,hue,saturation,textureGamma);\\r\\n    lastColor = sampleAndBlend(isAddEffect1,earthColor1,earthAddColor1,lastColor,TexSampler1,webglUv,textureRectangle1,textureTransAndScale1,alphaIndex1,brightness1,south2,north2,southMercatorY2,oneOverMercatorHeight2,isReProjection,alphaValue,contrast,hue,saturation,textureGamma);\\r\\n    //to caculate fog\\r\\n    //float cameraDist = length(viewMatrix[3]);\\r\\n    float cameraDist = length(cameraPosition);\\r\\n    float fade = czm_fade(cameraDist, fadeInDist, fadeOutDist);\\r\\n\\r\\n    //added lambertDiffuse TODO is it effective? 这个很一般，先忽略吧，毕竟咱们性能不太好啊\\r\\n    //float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_sunDirectionEC, normalEC) * 5.0 + 0.3, 0.0, 1.0);\\r\\n    //diffuseIntensity = mix(1.0, diffuseIntensity, fade);\\r\\n    //vec4 finalColor = vec4(color.rgb * diffuseIntensity, color.a);\\r\\n    vec4 finalColor = lastColor;\\r\\n    //added fogColor and hdr\\r\\n    AtmosphereColor atmosFogColor = computeGroundAtmosphereFromSpace(PositionWS, false);\\r\\n    vec3 c0 = atmosFogColor.mie;\\r\\n    vec3 c1 = atmosFogColor.rayleigh;\\r\\n    vec3 fogColor1 = c0 + finalColor.rgb * c1;\\r\\n    //we should use hdr\\r\\n    const float fExposure = 2.0;\\r\\n    fogColor1 = vec3(1.0) - exp(-fExposure * fogColor1);\\r\\n\\r\\n    //fog added\\r\\n    //const float modifier = 0.15;\\r\\n    //finalColor = vec4(czm_fog(length(ModelPostion), finalColor.rgb, fogColor), finalColor.a);\\r\\n    finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor1), finalColor.a);\\r\\n\\r\\n    //ground\\r\\n    //SUN 这个sun的计算处理了下，我们不能和cesium用一样的参数，这样可能无法模拟真实太阳的位置\\r\\n    vec3 groundAtmosphereColor = vec3(0.0);\\r\\n    if(night == 1.0){\\r\\n        AtmosphereColor atmosColor = computeGroundAtmosphereFromSpace(PositionWS, true);\\r\\n        groundAtmosphereColor = atmosColor.mie + finalColor.rgb * atmosColor.rayleigh;\\r\\n        groundAtmosphereColor = vec3(1.0) - exp(-fExposure * groundAtmosphereColor);\\r\\n        //TODO 这个可能要弱一点才行\\r\\n        float sunlitAtmosphereIntensity = clamp((cameraDist - nightfadeOut) / (nightfadeIn - nightfadeOut), 0.0, 1.0);//caculate sun\\r\\n        // used hdr to make HDR look better\\r\\n        sunlitAtmosphereIntensity = max(sunlitAtmosphereIntensity * sunlitAtmosphereIntensity, 0.03);\\r\\n        //mix sun\\r\\n        groundAtmosphereColor = mix(groundAtmosphereColor, fogColor1, sunlitAtmosphereIntensity);\\r\\n    } else {\\r\\n        groundAtmosphereColor = fogColor1;\\r\\n    }\\r\\n    //use saturation to look better\\r\\n    groundAtmosphereColor = czm_saturation(groundAtmosphereColor, 1.6);\\r\\n    //mix\\r\\n    finalColor = vec4(mix(finalColor.rgb, groundAtmosphereColor, fade), finalColor.a);\\r\\n    finalColor.rgb *= vec3(earthColor0.a);\\r\\n    //finally you get the color\\r\\n    finalColor = czm_FilterColor(finalColor);\\r\\n    gl_FragColor = finalColor;\\r\\n    //now we get the shadow\\r\\n    //gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), (1.0-getShadowMask()));\\r\\n    vec4 shadow = vec4(vec3(0.0), shadowOpacity * ( 1.0 - getShadowMask() ) );\\r\\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, shadow.rgb, shadow.a);\\r\\n    #include <fog_fragment>\\r\\n}\"","module.exports = \"//varying vec4 Position;\\r\\n//precision highp float;\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <fog_pars_fragment>\\r\\n#include <bsdfs>\\r\\n#include <lights_pars_begin>\\r\\n#include <shadowmap_pars_fragment>\\r\\n#include <shadowmask_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n//varying vec3 ModelPostion;\\r\\nvarying float v_distance;\\r\\nvarying vec3 PositionWS;\\r\\nvarying vec2 texCoords;\\r\\n\\r\\nuniform bool grayFilterEnable;\\r\\nuniform float shadowOpacity;\\r\\n//uniform float grayMinMax[2];\\r\\n//uniform float grayFilterPerBar[10];\\r\\n//uniform vec3 grayFilterColorBar[10];\\r\\n\\r\\nuniform sampler2D TexSampler0;\\r\\nuniform sampler2D TexSampler1;\\r\\nuniform sampler2D TexSampler2;\\r\\n\\r\\nuniform\\tvec4 textureRectangle0;\\r\\nuniform\\tvec4 textureRectangle1;\\r\\nuniform\\tvec4 textureRectangle2;\\r\\n\\r\\nuniform\\tvec4 textureTransAndScale0;\\r\\nuniform\\tvec4 textureTransAndScale1;\\r\\nuniform\\tvec4 textureTransAndScale2;\\r\\n\\r\\nuniform float brightness0;\\r\\nuniform float brightness1;\\r\\nuniform float brightness2;\\r\\n\\r\\nuniform float alphaIndex0;\\r\\nuniform float alphaIndex1;\\r\\nuniform float alphaIndex2;\\r\\n\\r\\nuniform float isAddEffect0;\\r\\nuniform float isAddEffect1;\\r\\nuniform float isAddEffect2;\\r\\n\\r\\n\\r\\nuniform vec4 earthColor0;\\r\\nuniform vec4 earthColor1;\\r\\nuniform vec4 earthColor2;\\r\\n\\r\\nuniform vec4 earthAddColor0;\\r\\nuniform vec4 earthAddColor1;\\r\\nuniform vec4 earthAddColor2;\\r\\n\\r\\nuniform float south1;\\r\\nuniform float north1;\\r\\nuniform float southMercatorY1;\\r\\nuniform float oneOverMercatorHeight1;\\r\\nuniform float isReProjection;\\r\\n\\r\\nuniform float south2;\\r\\nuniform float north2;\\r\\nuniform float southMercatorY2;\\r\\nuniform float oneOverMercatorHeight2;\\r\\n\\r\\nuniform float south3;\\r\\nuniform float north3;\\r\\nuniform float southMercatorY3;\\r\\nuniform float oneOverMercatorHeight3;\\r\\n\\r\\nuniform\\tfloat Km;\\r\\nuniform\\tfloat Kr;\\r\\nuniform\\tfloat ESun;\\r\\n\\r\\nuniform int nSamples;\\r\\nuniform float fSamples;\\r\\n\\r\\n//uniform float g,\\r\\n\\r\\n//uniform\\tvec3 v3CameraPosInput;\\r\\nuniform\\tvec3 v3LightPosInput;\\r\\n\\r\\nuniform\\tfloat fInnerRadius;\\r\\nuniform\\tfloat fOuterRadius;\\r\\n\\r\\nuniform float fScaleDepth;\\r\\nuniform\\tvec4 inputColor;\\r\\nuniform vec4 alphaValue;\\r\\nuniform float night;\\r\\n\\r\\nuniform float contrast;\\r\\nuniform float hue;\\r\\nuniform float saturation;\\r\\nuniform float textureGamma;\\r\\n//uniform vec4 earthColor;\\r\\n//uniform vec4 earthAddColor;\\r\\n//uniform float isAddEffect;\\r\\n\\r\\nuniform vec4 u_initialColor;\\r\\nuniform float nightfadeIn;\\r\\nuniform float nightfadeOut;\\r\\nuniform float fadeInDist;\\r\\nuniform float fadeOutDist;\\r\\n\\r\\nuniform float czm_fogDensity;\\r\\nuniform sampler2D colorMapping;\\r\\n//#define saturate(a) clamp( a, 0.0, 1.0 )\\r\\n//#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\r\\n//#define LOG2 1.442695\\r\\n\\r\\nstruct czm_ellipsoid {\\r\\n    vec3 center;\\r\\n    vec3 radii;\\r\\n    vec3 inverseRadii;\\r\\n    vec3 inverseRadiiSquared;\\r\\n};\\r\\nstruct AtmosphereColor {\\r\\n    vec3 mie;\\r\\n    vec3 rayleigh;\\r\\n};\\r\\n\\r\\n//搞定\\r\\nfloat scale(float fCos, float fScaleDepth) {\\r\\n    float x = 1.0 - fCos;\\r\\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\r\\n}\\r\\nvec4 depthColor(vec4 color) {\\r\\n    color.r = color.r * color.r * color.r;\\r\\n    color.g = color.g * color.g * color.g;\\r\\n    color.b = color.b * color.b;\\r\\n    return color;\\r\\n}\\r\\n//搞定\\r\\n// Returns the near intersection point of a line and a sphere\\r\\nfloat getNearIntersection(vec3 v3Pos, vec3 v3Ray, float fDistance2, float fRadius2) {\\r\\n    float B = 2.0 * dot(v3Pos, v3Ray);\\r\\n    float C = fDistance2 - fRadius2;\\r\\n    float fDet = max(0.0, B*B - 4.0 * C);\\r\\n    return 0.5 * (-B - sqrt(fDet));\\r\\n}\\r\\n\\r\\nvec3 czm_contrast(vec3 rgb, float contrast) {\\r\\n    vec3 color = mix(vec3(0.5), rgb, contrast);\\r\\n    color = clamp(color, 0.0, 1.0);\\r\\n    return color;\\r\\n}\\r\\n\\r\\nvec3 czm_hue(vec3 rgb, float adjustment) {\\r\\n    const mat3 toYIQ = mat3(0.299, 0.587, 0.114,\\r\\n                            0.595716, -0.274453, -0.321263,\\r\\n                            0.211456, -0.522591, 0.311135);\\r\\n    const mat3 toRGB = mat3(1.0, 0.9563, 0.6210,\\r\\n                            1.0, -0.2721, -0.6474,\\r\\n                            1.0, -1.107, 1.7046);\\r\\n    vec3 yiq = toYIQ * rgb;\\r\\n    float hue = atan(yiq.z, yiq.y) + adjustment;\\r\\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\r\\n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\r\\n    vec3 final = toRGB * color;\\r\\n    final = clamp(final, 0.0, 1.0);\\r\\n    return final;\\r\\n}\\r\\n\\r\\nvec3 czm_saturation(vec3 rgb, float adjustment) {\\r\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\r\\n    vec3 intensity = vec3(dot(rgb, W));\\r\\n    vec3 color = mix(intensity, rgb, adjustment);\\r\\n    color = clamp(color, 0.0, 1.0);\\r\\n    return color;\\r\\n}\\r\\n\\r\\nvec4 sampleAndBlend(\\r\\n    float addEffect,\\r\\n    vec4 eColor,\\r\\n    vec4 addColor,\\r\\n    vec4 previousColor,\\r\\n    sampler2D sampler_texture,\\r\\n    vec2 tileTextureCoordinates,\\r\\n    vec4 textureCoordinateRectangle,\\r\\n    vec4 textureCoordinateTranslationAndScale,\\r\\n    float textureAlphaIndex,\\r\\n    float brightness,\\r\\n    float south,\\r\\n    float north,\\r\\n    float southMercatorY,\\r\\n    float oneOverMercatorHeight,\\r\\n    float isReProjection,\\r\\n    vec4 alphaValue,\\r\\n    float contrast,\\r\\n    float hue,\\r\\n    float saturation,\\r\\n    float gamma\\r\\n) {\\r\\n    float textureAlpha = 1.0;\\r\\n\\r\\n    vec2 alphaMultiplier = step(textureCoordinateRectangle.xy, tileTextureCoordinates);\\r\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\r\\n\\r\\n    alphaMultiplier = step(vec2(0.0,0.0), textureCoordinateRectangle.zw - tileTextureCoordinates);\\r\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\r\\n\\r\\n    vec2 translation = textureCoordinateTranslationAndScale.xy;\\r\\n    vec2 scale = textureCoordinateTranslationAndScale.zw;\\r\\n    vec2 textureCoordinates = tileTextureCoordinates * scale + translation;\\r\\n\\r\\n    //再投影\\r\\n    float latitude = mix(south, north, textureCoordinates.y);\\r\\n    float sinLatitude = sin(latitude);\\r\\n    float mercatorY = 0.5 * log((1.0 + sinLatitude) / (1.0 - sinLatitude));\\r\\n    float mercatorFraction = (mercatorY - southMercatorY) * oneOverMercatorHeight;\\r\\n    textureCoordinates.y = mercatorFraction;\\r\\n\\r\\n    if(isReProjection == 0.0) {\\r\\n        textureCoordinates.y = (tileTextureCoordinates * scale + translation).y;\\r\\n    }\\r\\n\\r\\n    //textureCoordinates = clamp(textureCoordinates, 1.0/256.0, 255.0/256.0);\\r\\n    vec4 value = texture2D(sampler_texture, textureCoordinates);\\r\\n    if(addEffect == 1.0){\\r\\n        value = depthColor(value);\\r\\n    }\\r\\n    value.rgb *= eColor.rgb;\\r\\n//          if(eColor.a==1.0){\\r\\n//                value *=eColor;\\r\\n//              }\\r\\n//              else{\\r\\n//                //value.rgb = (value.rgb + eColor.rgb * eColor.a)/(1.0 + eColor.a);\\r\\n//                 value.rgb = value.rgb * (1.0-eColor.a) + eColor.rgb * eColor.a;\\r\\n//              }\\r\\n    value.rgb = (value.rgb + addColor.rgb * addColor.a)/(1.0 + addColor.a);\\r\\n    vec3 color = value.rgb;\\r\\n    float alpha = value.a;\\r\\n\\r\\n    color = mix(vec3(0.0,0.0,0.0), color, brightness);\\r\\n    //contrast\\r\\n    color = czm_contrast(color, contrast);\\r\\n    //hue\\r\\n    color = czm_hue(color, hue);\\r\\n    // saturation\\r\\n    color = czm_saturation(color, saturation);\\r\\n    // gamma\\r\\n    color = pow(color, vec3(gamma));\\r\\n\\r\\n    float sourceAlpha = alpha * textureAlpha;\\r\\n    float outAlpha = mix(previousColor.a, 1.0, sourceAlpha);\\r\\n    vec3 outColor = mix(previousColor.rgb * previousColor.a, color, sourceAlpha) / outAlpha;\\r\\n    return vec4(outColor, outAlpha);\\r\\n}\\r\\n\\r\\n//czm_ellipsoid czm_getWgs84EllipsoidEC()\\r\\n//{\\r\\n//    vec3 radii = vec3(6378137.0, 6378137.0, 6356752.314245);\\r\\n//    vec3 inverseRadii = vec3(1.0 / radii.x, 1.0 / radii.y, 1.0 / radii.z);\\r\\n//    vec3 inverseRadiiSquared = inverseRadii * inverseRadii;\\r\\n//    czm_ellipsoid temp = czm_ellipsoid(viewMatrix[3].xyz, radii, inverseRadii, inverseRadiiSquared);\\r\\n//    return temp;\\r\\n//}\\r\\nfloat czm_fade(float cameraDist, float fadeInDist, float fadeOutDist) {\\r\\n    float fade = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\\r\\n    return fade;\\r\\n}\\r\\nAtmosphereColor computeGroundAtmosphereFromSpace(vec3 v3Pos, bool useSunLighting) {\\r\\n    //float PI = 3.14159265;\\r\\n    //float g2 =  g * g;\\r\\n\\r\\n    vec3 v3InvWavelength = vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));\\r\\n\\r\\n    vec3 v3CameraPos =  vec3(0.0, 0.0, 0.0);\\r\\n    v3CameraPos = cameraPosition;\\r\\n\\r\\n    vec3 v3LightPos = v3LightPosInput / length(v3LightPosInput);\\r\\n\\r\\n    float fCameraHeight = length(v3CameraPos);\\r\\n\\r\\n    float fCameraHeight2 = fCameraHeight * fCameraHeight;\\r\\n\\r\\n    float inOutFactor = 1.05;\\r\\n    float fInnerRadius2 = fInnerRadius * fInnerRadius;\\r\\n    float fOuterRadius2 = fOuterRadius * fOuterRadius;\\r\\n\\r\\n    float fKrESun = Kr * ESun;\\r\\n    float fKmESun = Km * ESun;\\r\\n    float fKr4PI = Kr * 4.0 * PI;\\r\\n    float fKm4PI = Km * 4.0 * PI;\\r\\n\\r\\n    float fInvScaleDepth = 1.0 / fScaleDepth;\\r\\n    float fScale = 1.0 / (fOuterRadius - fInnerRadius);\\r\\n    float fScaleOverScaleDepth = fScale / fScaleDepth;\\r\\n\\r\\n    ////////////////////////////////////////////////\\r\\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\\r\\n    //vec3 v3Pos = PositionWS;\\r\\n    vec3 v3Ray = v3Pos - v3CameraPos;\\r\\n    v3Pos = normalize(v3Pos);\\r\\n    float fFar = length(v3Ray);\\r\\n    v3Ray /= fFar;\\r\\n    // Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray passing through the atmosphere)\\r\\n    float fNear = getNearIntersection(v3CameraPos, v3Ray, fCameraHeight2, fOuterRadius2);\\r\\n    // Calculate the ray's starting position, then calculate its scattering offset\\r\\n    vec3 v3Start = v3CameraPos + v3Ray * fNear;\\r\\n    fFar -= fNear;\\r\\n    float fDepth = exp((fInnerRadius - fOuterRadius) * fInvScaleDepth);\\r\\n\\r\\n    //if you donnot want night make it 1.0\\r\\n    float fLightAngle = useSunLighting ? dot(v3LightPos, v3Pos) / length(v3Pos) : 1.0;\\r\\n    float fCameraAngle = dot(-v3Ray, v3Pos)/length(v3Pos);\\r\\n    //float fLightAngle = dot(v3LightPos, v3Pos);\\r\\n    float fCameraScale = scale(fCameraAngle, fScaleDepth);\\r\\n    float fLightScale = scale(fLightAngle, fScaleDepth);\\r\\n    float fCameraOffset = fDepth*fCameraScale;\\r\\n    float fTemp = (fLightScale + fCameraScale);\\r\\n    // Initialize the scattering loop variables\\r\\n    //gl_FrontColor = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n    float fSampleLength = fFar / fSamples;\\r\\n    float fScaledLength = fSampleLength * fScale;\\r\\n    vec3 v3SampleRay = v3Ray * fSampleLength;\\r\\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\\r\\n    // Now loop through the sample rays\\r\\n    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);\\r\\n    vec3 v3Attenuate = vec3(0.0,0.0,0.0);\\r\\n    for(int i = 0; i < 2; i++) {\\r\\n        float fHeight = length(v3SamplePoint);\\r\\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\\r\\n        float fScatter = fDepth*fTemp - fCameraOffset;\\r\\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\\r\\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\\r\\n        v3SamplePoint += v3SampleRay;\\r\\n    }\\r\\n    AtmosphereColor color;\\r\\n    color.mie = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\\r\\n    color.rayleigh = v3Attenuate;\\r\\n    return color;\\r\\n}\\r\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor) {\\r\\n    float scalar = distanceToCamera * czm_fogDensity;\\r\\n    float fog = 1.0 - exp(-(scalar * scalar));\\r\\n    return mix(color, fogColor, fog);\\r\\n}\\r\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor, float fogModifierConstant) {\\r\\n    float scalar = distanceToCamera * czm_fogDensity;\\r\\n    float fog = 1.0 - exp(-((fogModifierConstant * scalar + fogModifierConstant) * (scalar * (1.0 + fogModifierConstant))));\\r\\n    return mix(color, fogColor, fog);\\r\\n}\\r\\n\\r\\nvec4 czm_FilterColor(vec4 finalColor) {\\r\\n    vec4 finalColor1 = vec4(0);\\r\\n    if(grayFilterEnable) {\\r\\n        float gray = clamp( dot( finalColor.rgb, vec3(0.333, 0.333, 0.333) ), 0.0, 1.0 );\\r\\n        finalColor1.rgb = texture2D(colorMapping, vec2(gray, 0.5)).rgb;\\r\\n        finalColor1.a = finalColor.a;\\r\\n    } else {\\r\\n        finalColor1 = finalColor;\\r\\n    }\\r\\n    return finalColor1;\\r\\n}\\r\\nvoid main() {\\r\\n    #include <logdepthbuf_fragment>\\r\\n    //vec2 texCoords =  vec2( gl_TexCoord[0] );\\r\\n    vec2 webglUv = texCoords;\\r\\n    //webglUv.y =1.0 - webglUv.y;\\r\\n    webglUv = clamp(webglUv , 0.0, 1.0);\\r\\n    vec4 lastColor = sampleAndBlend(isAddEffect0,earthColor0,earthAddColor0,u_initialColor,TexSampler0,webglUv,textureRectangle0,textureTransAndScale0,alphaIndex0,brightness0,south1,north1,southMercatorY1,oneOverMercatorHeight1,isReProjection,alphaValue,contrast,hue,saturation,textureGamma);\\r\\n    lastColor = sampleAndBlend(isAddEffect1,earthColor1,earthAddColor1,lastColor,TexSampler1,webglUv,textureRectangle1,textureTransAndScale1,alphaIndex1,brightness1,south2,north2,southMercatorY2,oneOverMercatorHeight2,isReProjection,alphaValue,contrast,hue,saturation,textureGamma);\\r\\n    lastColor = sampleAndBlend(isAddEffect2,earthColor2,earthAddColor2,lastColor,TexSampler2,webglUv,textureRectangle2,textureTransAndScale2,alphaIndex2,brightness2,south3,north3,southMercatorY3,oneOverMercatorHeight3,isReProjection,alphaValue,contrast,hue,saturation,textureGamma);\\r\\n    //to caculate fog\\r\\n    //float cameraDist = length(viewMatrix[3]);\\r\\n    float cameraDist = length(cameraPosition);\\r\\n    float fade = czm_fade(cameraDist, fadeInDist, fadeOutDist);\\r\\n\\r\\n    //added lambertDiffuse TODO is it effective? 这个很一般，先忽略吧，毕竟咱们性能不太好啊\\r\\n    //float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_sunDirectionEC, normalEC) * 5.0 + 0.3, 0.0, 1.0);\\r\\n    //diffuseIntensity = mix(1.0, diffuseIntensity, fade);\\r\\n    //vec4 finalColor = vec4(color.rgb * diffuseIntensity, color.a);\\r\\n    vec4 finalColor = lastColor;\\r\\n    //added fogColor and hdr\\r\\n    //added fogColor and hdr\\r\\n    AtmosphereColor atmosFogColor = computeGroundAtmosphereFromSpace(PositionWS, false);\\r\\n    vec3 c0 = atmosFogColor.mie;\\r\\n    vec3 c1 = atmosFogColor.rayleigh;\\r\\n    vec3 fogColor1 = c0 + finalColor.rgb * c1;\\r\\n    //we should use hdr\\r\\n    const float fExposure = 2.0;\\r\\n    fogColor1 = vec3(1.0) - exp(-fExposure * fogColor1);\\r\\n\\r\\n    //fog added\\r\\n    // const float modifier = 0.15;\\r\\n    finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor1), finalColor.a);\\r\\n\\r\\n    //ground\\r\\n    //SUN 这个sun的计算处理了下，我们不能和cesium用一样的参数，这样可能无法模拟真实太阳的位置\\r\\n    vec3 groundAtmosphereColor = vec3(0.0);\\r\\n    if(night == 1.0) {\\r\\n        AtmosphereColor atmosColor = computeGroundAtmosphereFromSpace(PositionWS, true);\\r\\n        groundAtmosphereColor = atmosColor.mie + finalColor.rgb * atmosColor.rayleigh;\\r\\n        groundAtmosphereColor = vec3(1.0) - exp(-fExposure * groundAtmosphereColor);\\r\\n        //TODO 这个可能要弱一点才行\\r\\n        float sunlitAtmosphereIntensity = clamp((cameraDist - nightfadeOut) / (nightfadeIn - nightfadeOut), 0.0, 1.0);//caculate sun\\r\\n        // used hdr to make HDR look better\\r\\n        sunlitAtmosphereIntensity = max(sunlitAtmosphereIntensity * sunlitAtmosphereIntensity, 0.03);\\r\\n        //mix sun\\r\\n        groundAtmosphereColor = mix(groundAtmosphereColor, fogColor1, sunlitAtmosphereIntensity);\\r\\n    } else{\\r\\n        groundAtmosphereColor = fogColor1;\\r\\n    }\\r\\n    //use saturation to look better\\r\\n    groundAtmosphereColor = czm_saturation(groundAtmosphereColor, 1.6);\\r\\n    //mix\\r\\n    finalColor = vec4(mix(finalColor.rgb, groundAtmosphereColor, fade), finalColor.a);\\r\\n    finalColor.rgb *= vec3(earthColor0.a);\\r\\n    //finally you get the color\\r\\n    finalColor = czm_FilterColor(finalColor);\\r\\n    gl_FragColor = finalColor;\\r\\n    //now we get the shadow\\r\\n    //gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), (1.0-getShadowMask()));\\r\\n    vec4 shadow = vec4(vec3(0.0), shadowOpacity * ( 1.0 - getShadowMask() ) );\\r\\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, shadow.rgb, shadow.a);\\r\\n    #include <fog_fragment>\\r\\n}\"","var map = {\n\t\"./BuildingLayer\": 439,\n\t\"./BuildingLayer.js\": 439,\n\t\"./LabelLayer\": 440,\n\t\"./LabelLayer.js\": 440,\n\t\"./Layer\": 162,\n\t\"./Layer.js\": 162,\n\t\"./LineLayer\": 441,\n\t\"./LineLayer.js\": 441,\n\t\"./PointLayer\": 442,\n\t\"./PointLayer.js\": 442,\n\t\"./PolygonLayer\": 443,\n\t\"./PolygonLayer.js\": 443,\n\t\"./ScanLayer\": 444,\n\t\"./ScanLayer.js\": 444\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 754;","import * as THREE from 'three';\r\nconst createUniform = function() {\r\n    const uniform = {\r\n        fogDensity: {\r\n            value: 0.00025\r\n        },\r\n        fogNear: {\r\n            value: 1\r\n        },\r\n        fogFar: {\r\n            value: 2000\r\n        },\r\n        fogColor: {\r\n            value: new THREE.Color(16777215)\r\n        },\r\n        fogAlpha: {\r\n            value: 1\r\n        },\r\n        grayFilterEnable: {\r\n            value: false\r\n        },\r\n        colorMapping: {\r\n            value: null\r\n        },\r\n        TexSampler0: {\r\n            value: {}\r\n        },\r\n        textureRectangle0: {\r\n            value: new THREE.Vector4(0, 0, 0, 0)\r\n        },\r\n        textureTransAndScale0: {\r\n            value: new THREE.Vector4(0, 0, 0, 0)\r\n        },\r\n        alphaIndex0: {\r\n            value: 1\r\n        },\r\n        brightness0: {\r\n            value: 1\r\n        },\r\n        Km: {\r\n            value: 0.0025\r\n        },\r\n        Kr: {\r\n            value: 0.0015\r\n        },\r\n        ESun: {\r\n            value: 10\r\n        },\r\n        nSamples: {\r\n            value: 2\r\n        },\r\n        fSamples: {\r\n            value: 2\r\n        },\r\n        v3LightPosInput: {\r\n            value: new THREE.Vector3(20, 20, 20)\r\n        },\r\n        fInnerRadius: {\r\n            value: 1\r\n        },\r\n        fOuterRadius: {\r\n            value: 1.05\r\n        },\r\n        fScaleDepth: {\r\n            value: 0.25\r\n        },\r\n        v3CameraPosInput: {\r\n            value: new THREE.Vector3(0, 0, 0)\r\n        },\r\n        south1: {\r\n            value: 0\r\n        },\r\n        north1: {\r\n            value: 0\r\n        },\r\n        southMercatorY1: {\r\n            value: 0\r\n        },\r\n        oneOverMercatorHeight1: {\r\n            value: 0\r\n        },\r\n        isReProjection: {\r\n            value: 0\r\n        },\r\n        objectPos: {\r\n            value: new THREE.Vector4(0, 0, 0, 0)\r\n        },\r\n        inputColor: {\r\n            value: new THREE.Vector4(1, 0, 0, 0)\r\n        },\r\n        alphaValue: {\r\n            value: new THREE.Vector4(1, 0, 0, 0)\r\n        },\r\n        isAddEffect0: {\r\n            value: 0\r\n        },\r\n        earthColor0: {\r\n            value: new THREE.Vector4(1, 1, 1, 1)\r\n        },\r\n        earthAddColor0: {\r\n            value: new THREE.Vector4(0, 0, 0, 0)\r\n        },\r\n        night: {\r\n            value: 1\r\n        },\r\n        contrast: {\r\n            value: 1\r\n        },\r\n        hue: {\r\n            value: 0\r\n        },\r\n        saturation: {\r\n            value: 1\r\n        },\r\n        textureGamma: {\r\n            value: 1\r\n        },\r\n        nightfadeIn: {\r\n            value: 25000000\r\n        },\r\n        nightfadeOut: {\r\n            value: 10000000\r\n        },\r\n        fadeInDist: {\r\n            value: 15000000\r\n        },\r\n        fadeOutDist: {\r\n            value: 10000000\r\n        },\r\n        u_initialColor: {\r\n            value: new THREE.Vector4(0, 0, 0, 1)\r\n        },\r\n        czm_fogDensity: {\r\n            value: 0.0001\r\n        },\r\n        shadowOpacity: {\r\n            value: 0.5\r\n        }\r\n    };\r\n    return THREE.UniformsUtils.clone(THREE.UniformsUtils.merge([THREE.UniformsLib.lights, uniform]));\r\n}\r\n\r\nexport {\r\n    createUniform\r\n};","import * as THREE from 'three';\r\nimport GlobeVS from '../Shaders/GlobeVS.glsl';\r\nimport GlobeFS1 from '../Shaders/GlobeFS1.glsl';\r\nimport { createUniform } from './MaterialUtil';\r\n\r\nconst uniforms = createUniform();\r\nconst GlobeMaterial1 = new THREE.ShaderMaterial({\r\n    uniforms,\r\n    vertexShader: GlobeVS,\r\n    fragmentShader: GlobeFS1\r\n});\r\nGlobeMaterial1.fog = true;\r\nGlobeMaterial1.lights = true;\r\nexport default GlobeMaterial1;","import * as THREE from 'three';\r\nimport GlobeVS from '../Shaders/GlobeVS.glsl';\r\nimport GlobeFS2 from '../Shaders/GlobeFS2.glsl';\r\nimport { createUniform } from './MaterialUtil';\r\n\r\nconst uniforms = createUniform();\r\nuniforms.TexSampler1 = {\r\n    value: {}\r\n};\r\nuniforms.alphaIndex1 = {\r\n    value: 1\r\n};\r\nuniforms.textureRectangle1 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.textureTransAndScale1 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.brightness1 = {\r\n    value: 1\r\n};\r\nuniforms.isAddEffect1 = {\r\n    value: 0\r\n};\r\nuniforms.earthColor1 = {\r\n    value: new THREE.Vector4(1, 1, 1, 1)\r\n};\r\nuniforms.earthAddColor0 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.south2 = {\r\n    value: 0\r\n};\r\nuniforms.north2 = {\r\n    value: 0\r\n};\r\nuniforms.southMercatorY2 = {\r\n    value: 0\r\n};\r\nuniforms.oneOverMercatorHeight2 = {\r\n    value: 0\r\n};\r\n\r\nconst GlobeMaterial2 = new THREE.ShaderMaterial({\r\n    uniforms,\r\n    vertexShader: GlobeVS,\r\n    fragmentShader: GlobeFS2\r\n});\r\nGlobeMaterial2.fog = true;\r\nGlobeMaterial2.lights = true;\r\nexport default GlobeMaterial2;","import * as THREE from 'three';\r\nimport GlobeVS from '../Shaders/GlobeVS.glsl';\r\nimport GlobeFS3 from '../Shaders/GlobeFS3.glsl';\r\nimport { createUniform } from './MaterialUtil';\r\n\r\nconst uniforms = createUniform();\r\nuniforms.TexSampler1 = {\r\n    value: {}\r\n};\r\nuniforms.TexSampler2 = {\r\n    value: {}\r\n};\r\nuniforms.alphaIndex1 = {\r\n    value: 1\r\n};\r\nuniforms.alphaIndex2 = {\r\n    value: 1\r\n};\r\nuniforms.textureRectangle1 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.textureRectangle2 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.textureTransAndScale1 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.textureTransAndScale2 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.brightness1 = {\r\n    value: 1\r\n};\r\nuniforms.brightness2 = {\r\n    value: 1\r\n};\r\nuniforms.isAddEffect1 = {\r\n    value: 0\r\n};\r\nuniforms.isAddEffect2 = {\r\n    value: 0\r\n};\r\nuniforms.earthColor1 = {\r\n    value: new THREE.Vector4(1, 1, 1, 1)\r\n};\r\nuniforms.earthColor2 = {\r\n    value: new THREE.Vector4(1, 1, 1, 1)\r\n};\r\nuniforms.earthAddColor1 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.earthAddColor2 = {\r\n    value: new THREE.Vector4(0, 0, 0, 0)\r\n};\r\nuniforms.south2 = {\r\n    value: 0\r\n};\r\nuniforms.north2 = {\r\n    value: 0\r\n};\r\nuniforms.southMercatorY2 = {\r\n    value: 0\r\n};\r\nuniforms.oneOverMercatorHeight2 = {\r\n    value: 0\r\n};\r\nuniforms.south3 = {\r\n    value: 0\r\n};\r\nuniforms.north3 = {\r\n    value: 0\r\n};\r\nuniforms.southMercatorY3 = {\r\n    value: 0\r\n};\r\nuniforms.oneOverMercatorHeight3 = {\r\n    value: 0\r\n};\r\nconst GlobeMaterial3 = new THREE.ShaderMaterial({\r\n    uniforms,\r\n    vertexShader: GlobeVS,\r\n    fragmentShader: GlobeFS3\r\n});\r\nGlobeMaterial3.fog = true;\r\nGlobeMaterial3.lights = true;\r\nexport default GlobeMaterial3;","import * as THREE from 'three';\r\nimport * as Cesium from 'cesium';\r\nimport Cache from '../Common/Cache';\r\nimport Utils from '../Common/Utils';\r\nimport GlobeMaterial1 from '../Materials/GlobeMaterial1';\r\nimport GlobeMaterial2 from '../Materials/GlobeMaterial2';\r\nimport GlobeMaterial3 from '../Materials/GlobeMaterial3';\r\n// import GlobeMaterial4 from '../Materials/GlobeMaterial4';\r\n// import GlobeMaterial5 from '../Materials/GlobeMaterial5';\r\n// import GlobeMaterial6 from '../Materials/GlobeMaterial6';\r\n//import ImageryLayerCollection from '../Extra/Scene/ImageryLayerCollection';\r\n//import FrameState from '../Extra/Scene/FrameState';\r\n//import SceneMode from '../Extra/Scene/SceneMode';\r\n//import Cartesian3 from '../Extra/Core/Cartesian3';\r\n//import Cartographic from '../Extra/Core/Cartographic';\r\n//import GeographicProjection from '../Extra/Core/GeographicProjection';\r\n//import WebMercatorProjection from '../Extra/Core/WebMercatorProjection';\r\n//import TerrainQuantization from '../Extra/Core/TerrainQuantization';\r\n//import EllipsoidTerrainProvider from '../Extra/Core/EllipsoidTerrainProvider';\r\n//import Matrix4 from '../Extra/Core/Matrix4';\r\n//import CesiumMath from '../Extra/Core/Math';\r\n//import Camera from '../Cameras/Camera';\r\n//import '../Controls/EarthOrbitControls';\r\n//import Layer from '../Layer/Layer';\r\n\r\nif(!Cesium.__Custom) {\r\n\tCesium.__Custom = {};\r\n\tCesium.__Custom.ImageryReleaseReference = function(scope) {\r\n\t\tif (scope.image !== null && scope.image !== undefined) {\r\n\t\t\tCache.delete('textureBuffer', scope.image.name);\r\n\t\t}            \r\n\t\tif (scope.texture !== null && scope.texture !== undefined) {\r\n\t\t\tscope.texture.dispose();\r\n\t\t}\r\n\t}\r\n\tCesium.__Custom.ImageryLayerCreateTexture = function(imagery) {\r\n\t\tlet image = imagery.image, src = image.src;\r\n\t\timage.name = encodeURI(src);\r\n\t\tlet texture = Cache.get('textureBuffer', image.name);\r\n\t\tif(texture) {\r\n\t\t\timagery.texture = texture;\r\n\t\t} else {\r\n\t\t\tif(true) {\r\n\t\t\t\ttexture = new THREE.Texture(image);\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\tCache.save('textureBuffer', image.name, texture);\r\n\t\t\t\timagery.texture = texture;\r\n\t\t\t\ttexture = null;\r\n\t\t\t} else {\r\n\t\t\t\tlet canvas = document.createElement('canvas');\r\n\t\t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\t\t\t\t//canvas.style.width = 256 / 2 + 'px';\r\n\t\t\t\t//canvas.style.height = 256 / 2 + 'px';\r\n\t\t\t\tlet ctx = canvas.getContext('2d');\r\n\t\t\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\t\t\tctx.filter = 'sepia(100%) invert(90%)';\r\n\t\t\t\tctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n\t\t\t\ttexture = new THREE.Texture(canvas);\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\tCache.save('textureBuffer', image.name, texture);\r\n\t\t\t\timagery.texture = texture;\r\n\t\t\t\ttexture = null;\r\n\t\t\t\tcanvas = null;\r\n\t\t\t\tctx = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tCesium.__Custom.TileReplacementQueueTrimTiles = function(tileToTrim) {\r\n\t\tlet tileName = `EarthTile_${ tileToTrim._level }_${ tileToTrim._x }_${ tileToTrim._y }`, \r\n\t\t\tmesh = Cache.get('nodeBuffer', tileName);\r\n\t\tif(mesh) {\r\n\t\t\tlet materialName = mesh.materialName;\r\n\t\t\tCache.get('tileMaterialBuffer', materialName).dispose();\r\n\t\t\tCache.delete('tileMaterialBuffer', materialName);\r\n\t\t\tCache.delete('nodeBuffer', tileName);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default class Globe {\r\n\tconstructor(props) {\r\n\t\t//super();\r\n\t\tthis.sceneType = {\r\n\t\t\tScene_2D: 0,\r\n\t\t\tScene_3D: 1\r\n\t\t};\r\n\t\tthis.cssFilter = 'sepia(100%) invert(90%)';\r\n\t\tthis.radius = Utils.radius;\r\n\t\t//this.scale = this.radius / this.radius;\r\n\t\tthis.globeMaterials = [\r\n\t\t\tGlobeMaterial1,\r\n\t\t\tGlobeMaterial2,\r\n\t\t\tGlobeMaterial3,\r\n\t\t\t// GlobeMaterial4,\r\n\t\t\t// GlobeMaterial5,\r\n\t\t\t// GlobeMaterial6\r\n\t\t];\r\n\t\tthis.textureRectangles = [\r\n\t\t\t\"textureRectangle0\",\r\n\t\t\t\"textureRectangle1\",\r\n\t\t\t\"textureRectangle2\",\r\n\t\t\t\"textureRectangle3\",\r\n\t\t\t\"textureRectangle4\",\r\n\t\t\t\"textureRectangle5\"\r\n\t\t];\r\n\t\tthis.textureTransAndScales = [\r\n\t\t\t\"textureTransAndScale0\",\r\n\t\t\t\"textureTransAndScale1\",\r\n\t\t\t\"textureTransAndScale2\",\r\n\t\t\t\"textureTransAndScale3\",\r\n\t\t\t\"textureTransAndScale4\",\r\n\t\t\t\"textureTransAndScale5\"\r\n\t\t];\r\n\t\tthis.alphaIndexs = [\r\n\t\t\t\"alphaIndex0\",\r\n\t\t\t\"alphaIndex1\",\r\n\t\t\t\"alphaIndex2\",\r\n\t\t\t\"alphaIndex3\",\r\n\t\t\t\"alphaIndex4\",\r\n\t\t\t\"alphaIndex5\"\r\n\t\t];\r\n\t\tthis.souths = [\r\n\t\t\t\"south1\",\r\n\t\t\t\"south2\",\r\n\t\t\t\"south3\",\r\n\t\t\t\"south4\",\r\n\t\t\t\"south5\",\r\n\t\t\t\"south6\"\r\n\t\t];\r\n\t\tthis.norths = [\r\n\t\t\t\"north1\",\r\n\t\t\t\"north2\",\r\n\t\t\t\"north3\",\r\n\t\t\t\"north4\",\r\n\t\t\t\"north5\",\r\n\t\t\t\"north6\"\r\n\t\t];\r\n\t\tthis.southMercatorYs = [\r\n\t\t\t\"southMercatorY1\",\r\n\t\t\t\"southMercatorY2\",\r\n\t\t\t\"southMercatorY3\",\r\n\t\t\t\"southMercatorY4\",\r\n\t\t\t\"southMercatorY5\",\r\n\t\t\t\"southMercatorY6\"\r\n\t\t];\r\n\t\tthis.oneOverMercatorHeights = [\r\n\t\t\t\"oneOverMercatorHeight1\",\r\n\t\t\t\"oneOverMercatorHeight2\",\r\n\t\t\t\"oneOverMercatorHeight3\",\r\n\t\t\t\"oneOverMercatorHeight4\",\r\n\t\t\t\"oneOverMercatorHeight5\",\r\n\t\t\t\"oneOverMercatorHeight6\"\r\n\t\t];\r\n\t\tthis.brightnesses = [\r\n\t\t\t\"brightness0\",\r\n\t\t\t\"brightness1\",\r\n\t\t\t\"brightness2\",\r\n\t\t\t\"brightness3\",\r\n\t\t\t\"brightness4\",\r\n\t\t\t\"brightness5\"\r\n\t\t];\r\n\t\tthis.addEffects = [\r\n\t\t\t\"isAddEffect0\",\r\n\t\t\t\"isAddEffect1\",\r\n\t\t\t\"isAddEffect2\",\r\n\t\t\t\"isAddEffect3\",\r\n\t\t\t\"isAddEffect4\",\r\n\t\t\t\"isAddEffect5\"\r\n\t\t];\r\n\t\tthis.earthColors = [\r\n\t\t\t\"earthColor0\",\r\n\t\t\t\"earthColor1\",\r\n\t\t\t\"earthColor2\",\r\n\t\t\t\"earthColor3\",\r\n\t\t\t\"earthColor4\",\r\n\t\t\t\"earthColor5\",\r\n\t\t];\r\n\t\tthis.mode = this.sceneType.Scene_3D;\r\n\t\tlet color = new THREE.Color(0xffffff);\r\n\t\tthis.color = [color.r, color.g, color.b, 1.0];\r\n\t\tthis.quadTileMatrial = {};\r\n\t\tthis.quadTileRelativePos = {};\r\n\t\tthis._recorder = function() {\r\n            let arr = [];\r\n            return {\r\n                push: function(value) {\r\n\t\t\t\t\tif(arr.length >= 2) {\r\n\t\t\t\t\t\tarr.shift();\r\n\t\t\t\t\t}\r\n                    arr.push(value);\r\n                    return arr;\r\n                },\r\n                get: function() {\r\n                    return arr;\r\n                },\r\n                clear: function() {\r\n                    arr.splice(0, arr.length);\r\n                }\r\n            }\r\n\t\t}();\r\n\t\t//this._fogDensity = 0;\r\n\t\tthis.quadTileRadius = {};\r\n\t\tthis.quadTileEncode = {};\r\n\t\t//this.R = new Map();\r\n\t\t// this.imageryProvider = new Cesium.OpenStreetMapImageryProvider({\r\n\t\t// \t//url:\"http://mt1.google.cn/vt/lyrs=s&hl=zh-CN&x={x}&y={y}&z={z}&s=Gali\",\r\n\t\t// \t//url: 'https://mt{0,1,2,3}.google.cn/vt/lyrs=s&x={x}&y={y}&z={z}',\r\n\t\t// \turl: 'https://mt{s}.google.cn/vt/lyrs=s&x={x}&y={y}&z={z}',\r\n\t\t// \tsubDomains: [\"0\", \"1\", \"2\", \"3\"],\r\n\t\t// \ttileType: 'ZXY',\r\n\t\t// \t//maximumLevel: undefined\r\n\t\t// });\r\n\t\tObject.assign(this, props);\r\n\t\tthis.init();\r\n\t}\r\n\tinit() {\r\n\t\t//this.renderCamera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n\t\t// this.curOrbit = new THREE.EarthOrbitControls(this.view, this.view.renderCamera, this.view.domElement);\r\n\t\t// this.camera = new Camera({\r\n\t\t// \tcamera: this.view.renderCamera,\r\n\t\t// \tel: this.view.domElement\r\n\t\t// });\r\n\t\tthis.curOrbit = this.view.curOrbit;\r\n\t\tthis.camera = this.view._camera;\r\n//this.view.canvas.style.filter = this.cssFilter;\r\n\t\t//this.goHome();\r\n\t\t//this.node = new THREE.Group();\r\n\t\tthis.node.name = \"tileEarth\";\r\n\t\tCache.save('nodeBuffer', 'tiles-root', this.node);\r\n//this.earthAndAtmosphere = new THREE.Group();\r\n//this.earthAndAtmosphere._isSeneRoot_ = true;\r\n//this.earthAndAtmosphere.add(this.node);\r\n//this.view.scene.add(this.earthAndAtmosphere);\r\n\t\t// var geometry = new THREE.BoxGeometry( 100, 100, 100 );\r\n\t\t// var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n\t\t// var cube = new THREE.Mesh( geometry, material );\r\n\t\t// this.scene.add( cube );\r\n\t\t//console.log(THREE.EarthOrbitControls);\r\n\t\t//this.scene.add(this.root);\r\n\t\t//this._readyPromise = Cesium.when.defer();\r\n\t\t//this._ready = false;\r\n//this.filterColor = new THREE.Color(this.filterColor);\r\n//this.filterColor = [this.filterColor.r, this.filterColor.g, this.filterColor.b];\r\n\t\tthis.dirty = false;\r\n\t\tthis.materialDirty = false;\r\n\t\tthis.tileCacheSize = 100;\r\n\t\tthis._imageryLayerCollection = new Cesium.ImageryLayerCollection();\r\n\t\t//this._imageryLayerCollection = new ImageryLayerCollection();\r\n\t\t// this._tileLayer = this._imageryLayerCollection.addImageryProvider(\r\n\t\t//     //new Cesium.UrlTemplateImageryProvider({\r\n\t\t//     new Cesium.OpenStreetMapImageryProvider({\r\n\t\t//         //url:\"http://mt1.google.cn/vt/lyrs=s&hl=zh-CN&x={x}&y={y}&z={z}&s=Gali\"\r\n\t\t//         //url: 'https://mt{0,1,2,3}.google.cn/vt/lyrs=s&x={x}&y={y}&z={z}',\r\n\t\t//         url: 'https://mt{s}.google.cn/vt/lyrs=s&x={x}&y={y}&z={z}',\r\n\t\t//         subDomains: [\"0\", \"1\", \"2\", \"3\"],\r\n\t\t//         tileType: 'ZXY',\r\n\t\t//         //maximumLevel: undefined\r\n\t\t//     })\r\n\t\t// );\r\n\t\tthis.mapProjection = new Cesium.GeographicProjection();\r\n\t\tthis._terrainProvider = new Cesium.EllipsoidTerrainProvider({\r\n\t\t\tellipsoid: this.mapProjection.ellipsoid\r\n\t\t});\r\n\t\tthis._frameState = new Cesium.FrameState();\r\n\t\t//this._frameState.scene3DOnly = false;\r\n\t\tthis._frameState.passes.render = true;\r\n\t\tthis._frameState.frameNumber = 0;\r\n\t\tthis._frameState.cameraPos = new Cesium.Cartesian3();\r\n\t\tthis._frameState.positionCartographic = new Cesium.Cartographic();\r\n\t\tthis._frameState.perspectiveOffCenterFrustum = new Cesium.PerspectiveOffCenterFrustum();\r\n\t\tthis._surfaceShaderSet = new Cesium.GlobeSurfaceShaderSet();\r\n\t\t// this._surfaceShaderSet.baseVertexShaderSource = new Cesium.ShaderSource({\r\n\t\t// \tsources: [Cesium.GroundAtmosphere, Cesium.GlobeVS]\r\n\t\t// });\r\n\t\t// this._surfaceShaderSet.baseFragmentShaderSource = new Cesium.ShaderSource({\r\n\t\t// \tsources: [Cesium.GlobeFS]\r\n\t\t// });\r\n\r\n\t\t//QuadtreePrimitive（统一维护所有Tile）通过 GlobeSurfaceTileProvider 来实现逻辑操作\r\n\t\t//保存 多个 QuadtreeTile 四叉树类（ GlobeSurfaceTile 保存地形数据 TileTerrain 和影像数据 TileImagery ）\r\n\t\tthis._surface = new Cesium.QuadtreePrimitive({\r\n\t\t\ttileProvider: new Cesium.GlobeSurfaceTileProvider({\r\n\t\t\t\tterrainProvider: this._terrainProvider,\r\n\t\t\t\timageryLayers: this._imageryLayerCollection,\r\n\t\t\t\tsurfaceShaderSet: this._surfaceShaderSet\r\n\t\t\t}),\r\n\t\t\ttileCacheSize: this.tileCacheSize\r\n\t\t});\r\n\t\tTHREE.ImageUtils.crossOrigin = 'anonymous';\r\n\t\tthis.setMap({\r\n\t\t\turl: this.url\r\n\t\t});\r\n\t\tthis.goHome();\r\n\t\t// this.addImageryLayer(new Cesium.OpenStreetMapImageryProvider({\r\n\t\t// \t//url:\"http://mt1.google.cn/vt/lyrs=s&hl=zh-CN&x={x}&y={y}&z={z}&s=Gali\"\r\n\t\t// \t//url: 'https://mt{0,1,2,3}.google.cn/vt/lyrs=s&x={x}&y={y}&z={z}',\r\n\t\t// \t//url: 'https://mt{0,1,2,3}.google.cn/vt/lyrs=m&x={x}&y={y}&z={z}',\r\n\t\t// \t//url: 'http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}'\r\n\t\t// \t//url: 'http://{a}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n\t\t// \t//url: 'http://webrd01.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}',\r\n\t\t// \t//url: 'https://map.geoq.cn/arcgis/rest/services/ChinaOnlineStreetGray/MapServer/tile/{z}/{y}/{x}'\r\n\t\t// \t//subDomains: [\"0\", \"1\", \"2\", \"3\"],\r\n\t\t// \t//tileType: 'ZXY',\r\n\t\t// \t//maximumLevel: undefined\r\n\t\t// \turl: this.url\r\n\t\t// }));\r\n\t\t// window.addEventListener(\"resize\", () => {\r\n\t\t// \tlet { width, height } = this.calcRect();\r\n\t\t// \tthis.renderCamera.setSize(width, height);\r\n\t\t// \tthis.renderer.setSize(width, height);\r\n\t\t// });\r\n\t}\r\n\tclear() {}\r\n\tsetMap(mapConfig) {\r\n\t\t// this.addImageryLayer(new Cesium.OpenStreetMapImageryProvider({\r\n\t\t// \t//url:\"http://mt1.google.cn/vt/lyrs=s&hl=zh-CN&x={x}&y={y}&z={z}&s=Gali\"\r\n\t\t// \t//url: 'https://mt{0,1,2,3}.google.cn/vt/lyrs=s&x={x}&y={y}&z={z}',\r\n\t\t// \t//url: 'https://mt{0,1,2,3}.google.cn/vt/lyrs=m&x={x}&y={y}&z={z}',\r\n\t\t// \t//url: 'http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}'\r\n\t\t// \t//url: 'http://{a}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n\t\t// \t//url: 'http://webrd01.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}',\r\n\t\t// \t//url: 'https://map.geoq.cn/arcgis/rest/services/ChinaOnlineStreetGray/MapServer/tile/{z}/{y}/{x}'\r\n\t\t// \t//subDomains: [\"0\", \"1\", \"2\", \"3\"],\r\n\t\t// \t//tileType: 'ZXY',\r\n\t\t// \t//maximumLevel: undefined\r\n\t\t// \turl\r\n\t\t// }));\r\n\t\t//let color = new THREE.Color(mapConfig.color);\r\n\t\t//color = [color.r, color.g, color.b, color.a];\r\n\t\tthis.addImageryLayer(mapConfig);\r\n\t\tif(mapConfig.color) {\r\n\t\t\t//this.color = Utils.getColor(mapConfig.color);\r\n\t\t\tthis.setStyle({\r\n\t\t\t\tcolor: Utils.getColor(mapConfig.color)\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tgoHome() {\r\n\t\tthis.camera.setPosition([4890109.86328125, 9295980.46875, 13943610.3515625]);\r\n\t\tthis.camera.lookAt(0, 0, 0);\r\n\t\tthis.curOrbit.goHome();\r\n\t}\r\n\tchangeStyle() {\r\n\t\tthis.dirty = true;\r\n\t\tthis.materialDirty = true;\r\n\t\tlet tileMaterials = Cache.getAll('tileMaterialBuffer');\r\n\t\tfor (let n in tileMaterials) {\r\n\t\t\ttileMaterials[n]._tileNeedUpdate = true;\r\n\t\t}\r\n\t}\r\n\taddImageryLayer(config) {\r\n\t\tlet imageryLayer = new Cesium.OpenStreetMapImageryProvider(config);\r\n\t\tlet url = imageryLayer._resource._url;\r\n\t\tlet start = url.indexOf('{');\r\n\t\tlet end = url.indexOf('}');\r\n\t\tif(start > 0 && end > start) {\r\n\t\t\tlet s = url.substring(start + 1, end);\r\n\t\t\tif(!['x', 'y', 'z', 'level'].includes(s)) {\r\n\t\t\t\tlet subDomains = s.split(',');\r\n\t\t\t\timageryLayer._resource._url = url.replace(s, 's');\r\n\t\t\t\timageryLayer._subdomains = subDomains;\r\n\t\t\t\t//param.url = url.replace(s, 's');\r\n\t\t\t\t//param.subDomains = subDomains;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this._imageryLayerCollection.length > 0) {\r\n\t\t\tfor(let i = 0; i < this._imageryLayerCollection.length; i++) {\r\n\t\t\t\tconst item = this._imageryLayerCollection.get(i);\r\n\t\t\t\tconst is = item._imageryProvider.url.indexOf(imageryLayer._resource._url);\r\n\t\t\t\tif(is >= 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._imageryLayerCollection.remove(item, true);\r\n\t\t\t\tthis._imageryLayerCollection.addImageryProvider(imageryLayer, i);\r\n\t\t\t\t//imageryLayer.filterColor = new THREE.Vector4(1, 1, 1, 1);\r\n\t\t\t\t//imageryLayer.brightness = 1;\r\n\t\t\t\t//imageryLayer.addEffect = true;\r\n\t\t\t\t//imageryLayer.night = true;\r\n\t\t\t\tthis.changeStyle();\r\n\t\t\t\t// let r = this._imageryLayerCollection.addImageryProvider(e._tileLayer, t);\r\n\t\t\t\t// r.id = e.id,\r\n\t\t\t\t// r.brightness = e.style.brightness,\r\n\t\t\t\t// r.addEffect = e.style.addEffect,\r\n\t\t\t\t// r.filterColor = e.style._customColor,\r\n\t\t\t\t// r.grayFilterEnable = e.style.grayFilterEnable,\r\n\t\t\t\t// r.grayFilterPerBar = e.style.grayFilterPerBar,\r\n\t\t\t\t// r.grayFilterColorBar = e.style._grayFilterColorBar,\r\n\t\t\t\t// r.hue = e.style.hue,\r\n\t\t\t\t// r.saturation = e.style.saturation,\r\n\t\t\t\t// r.contrast = e.style.contrast,\r\n\t\t\t\t// r.gamma = e.style.gamma,\r\n\t\t\t\t// r.night = e.style.night,\r\n\t\t\t\t// r.textureFlag = e.textureFlag\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._imageryLayerCollection.addImageryProvider(imageryLayer);\r\n\t\t\t//imageryLayer.filterColor = new THREE.Vector4(1, 1, 1, 1);\r\n\t\t\t//imageryLayer.brightness = 1;\r\n\t\t\t//imageryLayer.addEffect = true;\r\n\t\t\t//imageryLayer.night = true;\r\n\t\t\tthis.changeStyle();\r\n\t\t\t// let r = this._imageryLayerCollection.addImageryProvider(e._tileLayer, t);\r\n\t\t\t// r.id = e.id,\r\n\t\t\t// r.brightness = e.style.brightness,\r\n\t\t\t// r.addEffect = e.style.addEffect,\r\n\t\t\t// r.filterColor = e.style._customColor,\r\n\t\t\t// r.grayFilterEnable = e.style.grayFilterEnable,\r\n\t\t\t// r.grayFilterPerBar = e.style.grayFilterPerBar,\r\n\t\t\t// r.grayFilterColorBar = e.style._grayFilterColorBar,\r\n\t\t\t// r.hue = e.style.hue,\r\n\t\t\t// r.saturation = e.style.saturation,\r\n\t\t\t// r.contrast = e.style.contrast,\r\n\t\t\t// r.gamma = e.style.gamma,\r\n\t\t\t// r.night = e.style.night,\r\n\t\t\t// r.textureFlag = e.textureFlag\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tsetStyle(style) {\r\n\t\tconst { color } = style;\r\n\t\tthis.color = color;\r\n\t\tthis.changeStyle();\r\n\t}\r\n\tgetFov(e, t) {\r\n\t\t// if(e < 1) {\r\n\t\t//     return 1;\r\n\t\t// } else if(e >= 1 && e < 1.5) {\r\n\t\t//     return 1.2;\r\n\t\t// } else if(e >= 1.5 && e < 2) {\r\n\t\t//     return 2;\r\n\t\t// } else if(e >= 2 && e < 2.5) {\r\n\t\t//     return 2.1;\r\n\t\t// } else if(e >= 2.5 && e < 3) {\r\n\t\t//     return 2.2;\r\n\t\t// } else if(e >= 3 && e < 4) {\r\n\t\t//     return 2.5;\r\n\t\t// } else {\r\n\t\t//     return 3;\r\n\t\t// }\r\n\t\treturn 90;\r\n\t}\r\n\tgetFrameState(camera, mode) {\r\n\t\tlet cameraPos = camera.cameraPos,\r\n\t\t\tviewPort = camera.viewPort,\r\n\t\t\tfov = camera.fov,\r\n\t\t\tcameraDirection = camera.cameraDirection,\r\n\t\t\tcameraUp = camera.cameraUp,\r\n\t\t\tframeState = this._frameState;\r\n\t\tframeState.cameraPos.x = cameraPos[0];\r\n\t\tframeState.cameraPos.y = -cameraPos[2];\r\n\t\tframeState.cameraPos.z = cameraPos[1];\r\n\t\tlet positionWC = new Cesium.Cartesian3(), directionWC = new Cesium.Cartesian3(), upWC = new Cesium.Cartesian3();\r\n\t\tif (mode == this.sceneType.Scene_3D) {\r\n\t\t\tframeState.mapProjection = new Cesium.GeographicProjection();\r\n\t\t\tpositionWC.x = -cameraPos[0];\r\n\t\t\tpositionWC.y = cameraPos[2];\r\n\t\t\tpositionWC.z = cameraPos[1];\r\n\r\n\t\t\tframeState.positionCartographic = frameState.mapProjection.ellipsoid.cartesianToCartographic(frameState.cameraPos);\r\n\t\t\tdirectionWC.x = -cameraDirection[0];\r\n\t\t\tdirectionWC.y = cameraDirection[2];\r\n\t\t\tdirectionWC.z = cameraDirection[1];\r\n\r\n\t\t\tupWC.x = -cameraUp[0];\r\n\t\t\tupWC.y = cameraUp[2];\r\n\t\t\tupWC.z = cameraUp[1];\r\n\r\n\t\t\tframeState.mode = Cesium.SceneMode.SCENE3D;\r\n\t\t} else if (mode == this.sceneType.Scene_2D) {\r\n\t\t\tframeState.mapProjection = new Cesium.WebMercatorProjection();\r\n\t\t\tpositionWC.x = cameraPos[1];\r\n\t\t\tpositionWC.y = cameraPos[0];\r\n\t\t\tpositionWC.z = -cameraPos[2];\r\n\r\n\t\t\tlet pos = new Cesium.Cartesian3();\r\n\t\t\tpos.x = cameraPos[0];\r\n\t\t\tpos.y = -cameraPos[2];\r\n\t\t\tpos.z = cameraPos[1];\r\n\t\t\tframeState.positionCartographic = frameState.mapProjection.unproject(pos);\r\n\r\n\t\t\tdirectionWC.x = cameraDirection[1];\r\n\t\t\tdirectionWC.y = cameraDirection[0];\r\n\t\t\tdirectionWC.z = -cameraDirection[2];\r\n\r\n\t\t\tupWC.x = cameraUp[1];\r\n\t\t\tupWC.y = cameraUp[0];\r\n\t\t\tupWC.z = -cameraUp[2];\r\n\r\n\t\t\tframeState.mode = Cesium.SceneMode.COLUMBUS_VIEW;\r\n\t\t}\r\n\t\tframeState.positionWC = positionWC;\r\n\t\tlet width = viewPort.actualWidth, height = viewPort.actualHeight, aspectRatio = width / height, fovy;\r\n\t\tframeState.drawWidth = width;\r\n\t\tframeState.drawHeight = height;\r\n\t\tfov = this.getFov(aspectRatio, fov);\r\n\t\tfov = Math.PI * fov / 180;\r\n\t\tif (aspectRatio <= 1) {\r\n\t\t\tfovy = fov;\r\n\t\t} else {\r\n\t\t\tfovy = 2 * Math.atan(Math.tan(0.5 * fov) / aspectRatio);\r\n\t\t}\r\n\t\tframeState.fov = fov;\r\n\t\tframeState.fovy = fovy;\r\n\t\tframeState.aspectRatio = aspectRatio;\r\n\t\tframeState.sseDenominator = 2 * Math.tan(0.5 * fovy);\r\n\t\tframeState.perspectiveOffCenterFrustum.near = 1;\r\n\t\tframeState.perspectiveOffCenterFrustum.far = 500000000;\r\n\t\tframeState.perspectiveOffCenterFrustum.top = 1 * Math.tan(0.5 * fovy);\r\n\t\tframeState.perspectiveOffCenterFrustum.sseDenominator = frameState.sseDenominator;\r\n\t\tframeState.perspectiveOffCenterFrustum.bottom = -frameState.perspectiveOffCenterFrustum.top;\r\n\t\tframeState.perspectiveOffCenterFrustum.right = aspectRatio * frameState.perspectiveOffCenterFrustum.top;\r\n\t\tframeState.perspectiveOffCenterFrustum.left = -frameState.perspectiveOffCenterFrustum.right;\r\n\t\tframeState.directionWC = directionWC;\r\n\t\tframeState.upWC = upWC;\r\n\r\n\t\tframeState.cullingVolume = frameState.perspectiveOffCenterFrustum.computeCullingVolume(frameState.positionWC, directionWC, upWC);\r\n\t\tframeState.context = {};\r\n\t\tframeState.frameNumber = Cesium.Math.incrementWrap(frameState.frameNumber, 15000000, 1);\r\n\t\tframeState.afterRender = [];\r\n\t\t// if (!frameState.time) {\r\n\t\t// \tframeState.time = Cesium.JulianDate.fromDate(new Date());\r\n\t\t// }\r\n\t\tframeState.camera = {\r\n\t\t\tpositionWC: frameState.positionWC,\r\n\t\t\tpositionCartographic: frameState.positionCartographic,\r\n\t\t\tdirectionWC: frameState.directionWC,\r\n\t\t\tfrustum: frameState.perspectiveOffCenterFrustum\r\n\t\t};\r\n\t\tframeState.context.drawingBufferWidth = frameState.drawWidth;\r\n\t\tframeState.context.drawingBufferHeight = frameState.drawHeight;\r\n\t\tframeState.shadowState.shadowsEnabled = false;\r\n\t\t//return frameState;\r\n\t}\r\n\t// sub(a, b, c) {\r\n\t// \tif(c === null || c === undefined) {\r\n\t// \t\tc = [0, 0, 0];\r\n\t// \t}\r\n\t// \tc[0] = a[0] - b[0];\r\n\t// \tc[1] = a[1] - b[1];\r\n\t// \tc[2] = a[2] - b[2];\r\n\t// \treturn c;\r\n\t// }\r\n\t// subtractVectors(a, b, c) {\r\n\t// \tif(a.isVector3) {\r\n\t// \t\ta = [a.x, a.y, a.z];\r\n\t// \t}\r\n\t// \tif(b.isVector3) {\r\n\t// \t\tb = [b.x, b.y, b.z];\r\n\t// \t}\r\n\t// \treturn this.sub(a, b, c);\r\n\t// }\r\n\t// length(vec) {\r\n\t// \treturn Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\r\n\t// }\r\n\t// vectorLength(vec) {\r\n\t// \treturn this.length(vec);\r\n\t// }\r\n\t// vectorDistance(a, b) {\r\n\t// \tlet pos = this.subtractVectors(a, b);\r\n    //     return this.vectorLength(pos);\r\n\t// }\r\n\tupdateCamera() {\r\n\t\tlet rs, pos = this.camera.getPosition();\r\n\t\t//console.log('pos', pos);\r\n\t\tif (this.mode === this.sceneType.Scene_2D) {\r\n\t\t\trs = pos[1];\r\n\t\t} else if (this.mode === this.sceneType.Scene_3D) {\r\n\t\t\trs = Utils.vectorDistance([0, 0, 0], pos);\r\n\t\t\trs = rs - this.radius;\r\n\t\t}\r\n\t\tthis.camera.setFarClipDistance(50000000);\r\n//console.log('rs', rs, typeof rs);\r\n\t\tif (rs > 10000 && rs <= 100000) {\r\n\t\t\tthis.camera.setNearClipDistance(100);\r\n\t\t} else if (rs > 1000 && rs <= 10000) {\r\n\t\t\tthis.camera.setNearClipDistance(10);\r\n\t\t} else if (rs > 100 && rs <= 1000) {\r\n\t\t\tthis.camera.setNearClipDistance(1);\r\n\t\t} else if (rs > 1 && rs <= 100) {\r\n\t\t\tthis.camera.setNearClipDistance(0.1);\r\n\t\t} else if (rs <= 1) {\r\n\t\t\tthis.camera.setNearClipDistance(0.01);\r\n\t\t} else {\r\n\t\t\tthis.camera.setNearClipDistance(rs / 20);\r\n\t\t}\r\n\t}\r\n\tupdate() {\r\n\t\t// if (!this._surface) {\r\n\t\t// \treturn;\r\n\t\t// }\r\n\t\t//this.camera.setFarClipDistance(50000000);\r\n\t\tthis.updateCamera();\r\n\t\tthis.curOrbit.update();\r\n\t\tif (this._imageryLayerCollection.length > 0) {\r\n\t\t\tlet camera = {\r\n\t\t\t\tcameraPos: this.camera.getPosition(),\r\n\t\t\t\tviewPort: this.camera.getViewport(),\r\n\t\t\t\tfov: this.camera.getFov(),\r\n\t\t\t\tcameraDirection: this.camera.getDirection(),\r\n\t\t\t\tcameraUp: this.camera.getUp()\r\n\t\t\t};\r\n\t\t\tthis.getFrameState(camera, this.mode);\r\n\t\t\tthis._surface.beginFrame(this._frameState);\r\n\t\t\tthis._surface.render(this._frameState);\r\n\t\t\tCesium.RequestScheduler.update();\r\n\t\t\tthis._surface.endFrame(this._frameState);\r\n\t\t\tthis.draw(this._surface.tileProvider._tilesToRenderByTextureCount);\r\n\t\t}\r\n\t\t\r\n\t\t//this.renderer.render(this.scene, this.renderCamera);\r\n\t\t//requestAnimationFrame(this.update);\r\n\t}\r\n\tdraw(tilesToRender) {\r\n\t\tif (this.isRender(tilesToRender) || this.dirty) {\r\n\t\t\tthis.node.children.length = 0;\r\n\t\t\tfor (let i = 0; i < tilesToRender.length; i++) {\r\n\t\t\t\tlet quadtreeTiles = tilesToRender[i];\r\n\t\t\t\tif (quadtreeTiles !== undefined && quadtreeTiles !== null ) {\r\n\t\t\t\t\tfor (let j = 0; j < quadtreeTiles.length; j++) {\r\n\t\t\t\t\t\tlet terrainMesh, imagery, titleName = '', tileMaterialName = '', s = '';\r\n\t\t\t\t\t\tlet quadtreeTile = quadtreeTiles[j];\r\n\t\t\t\t\t\tif (quadtreeTile.data.terrainData) {\r\n\t\t\t\t\t\t\tterrainMesh = quadtreeTile.data.terrainData._mesh;\r\n\t\t\t\t\t\t\tif (terrainMesh !== undefined && terrainMesh !== null) {\r\n\t\t\t\t\t\t\t\timagery = quadtreeTile.data.imagery;\r\n\t\t\t\t\t\t\t\ttitleName = this.tileNameCreater(quadtreeTile);\r\n\t\t\t\t\t\t\t\ttileMaterialName = s = titleName + \"--\" + terrainMesh.boundingSphere3D.radius;\r\n\t\t\t\t\t\t\t\tif (this.mode === this.sceneType.Scene_2D) {\r\n\t\t\t\t\t\t\t\t\ts += \"_p\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlet isNeedUpdate = this.isNeedUpdate(this.quadTileRadius[titleName], terrainMesh, titleName);\r\n\t\t\t\t\t\t\t\tif (!this.quadTileMatrial[titleName]) {\r\n\t\t\t\t\t\t\t\t\tthis.quadTileMatrial[titleName] = {};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.quadTileMatrial[titleName].textureCount = imagery.length;\r\n\t\t\t\t\t\t\t\tthis.quadTileMatrial[titleName].textureName = [];\r\n\t\t\t\t\t\t\t\tfor (let z = 0; z < imagery.length; z++) {\r\n\t\t\t\t\t\t\t\t\tif (imagery[z].readyImagery) {\r\n\t\t\t\t\t\t\t\t\t\tthis.quadTileMatrial[titleName].textureName[z] = this.createImageUrl(imagery[z].readyImagery);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.quadTileRadius[titleName] = terrainMesh.boundingSphere3D.radius;\r\n\t\t\t\t\t\t\t\tif (isNeedUpdate) {\r\n\t\t\t\t\t\t\t\t\tthis.updateMesh(quadtreeTile, titleName, s, tileMaterialName);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t//console.log(titleName);\r\n\t\t\t\t\t\t\t\t\tthis.renderEarthTexure(imagery, titleName, this.quadTileRelativePos[titleName], this.quadTileEncode[titleName], tileMaterialName);\r\n\t\t\t\t\t\t\t\t\tthis.cacheShow(titleName, tileMaterialName, this.node);\r\n\t\t\t\t\t\t\t\t\tthis.renderEarthShader(imagery, titleName, this.quadTileRelativePos[titleName], tileMaterialName);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.dirty = false;\r\n\t\t}\r\n\t}\r\n\tupdateMesh(quadtreeTile, titleName, s, materialName) {\r\n\t\tlet terrainMesh = quadtreeTile.data.terrainData._mesh,\r\n\t\t\timagery = quadtreeTile.data.imagery,\r\n\t\t\tvertices = terrainMesh.vertices,\r\n\t\t\tindices = terrainMesh.indices,\r\n\t\t\tencoding = terrainMesh.encoding,\r\n\t\t\tstride = encoding.getStride(),\r\n\t\t\tcount = vertices.length / stride,\r\n\t\t\tpos = [-terrainMesh.center.x, terrainMesh.center.z, terrainMesh.center.y],\r\n\t\t\tinterleavedBuffer;\r\n\t\tthis.quadTileRelativePos[titleName] = pos;\r\n\t\tlet geometry = new THREE.BufferGeometry();\r\n\t\tinterleavedBuffer = new THREE.InterleavedBuffer(vertices, stride);\r\n\t\tgeometry.setIndex(new THREE.BufferAttribute(indices, 1));\r\n\t\tif (encoding.quantization === Cesium.TerrainQuantization.BITS12) {\r\n\t\t\tlet arr = new Float32Array(2 * count);\r\n            for (let i = 0; i < vertices.length / stride; i++) {\r\n\t\t\t\tlet x, \r\n\t\t\t\t\ty, \r\n\t\t\t\t\tz, \r\n\t\t\t\t\ts, \r\n\t\t\t\t\tu, \r\n\t\t\t\t\tf = vertices[stride * i] / 4096, \r\n\t\t\t\t\td = Math.floor(f) / 4096, \r\n\t\t\t\t\tp = f - Math.floor(f), \r\n\t\t\t\t\tm = vertices[stride * i + 1] / 4096;\r\n                m = Math.floor(m) / 4096;\r\n\t\t\t\tlet g = new Cesium.Cartesian3(d, p, m), v = new Cesium.Cartesian3();\r\n                Cesium.Matrix4.multiplyByPoint(encoding.fromScaledENU, g, v);\r\n                x = v.x - terrainMesh.center.x;\r\n                y = v.y - terrainMesh.center.y;\r\n                z = v.z - terrainMesh.center.z;\r\n                let pos = vertices[stride * i + 2] / 4096;\r\n                s = Math.floor(pos) / 4096;\r\n                u = pos - Math.floor(pos);\r\n                vertices[i * stride] = -x;\r\n                vertices[i * stride + 1] = z;\r\n                vertices[i * stride + 2] = y;\r\n                arr[2 * i] = s;\r\n                arr[2 * i + 1] = u;\r\n                interleavedBuffer = new THREE.InterleavedBuffer(vertices, stride);\r\n            }\r\n            geometry.setAttribute(\"position\", new THREE.InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\r\n            geometry.setAttribute(\"uv\", new THREE.BufferAttribute(arr, 2));\r\n\t\t} else {\r\n\t\t\tgeometry.setAttribute(\"position\", new THREE.InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\r\n\t\t\tgeometry.setAttribute(\"uv\", new THREE.InterleavedBufferAttribute(interleavedBuffer, 2, 4, false));\r\n\t\t}\r\n\t\tthis.renderEarthTexure(imagery, titleName, this.quadTileRelativePos[titleName], this.quadTileEncode[titleName], materialName);\r\n\t\tthis.renderEarthShader(imagery, titleName, this.quadTileRelativePos[titleName], materialName);\r\n\t\t//const obj = Cache.get('nodeBuffer', titleName);\r\n\t\t// if (obj) {\r\n\t\t// \tobj.parent.remove(obj);\r\n\t\t// \t// obj.geometry.dispose();\r\n\t\t// \t// obj.material.dispose();\r\n\t\t// \t// obj.geometry = null;\r\n\t\t// \t// obj.material = null;\r\n\t\t// \t// obj = null;\r\n\t\t// }\r\n\t\tconst material = Cache.get('tileMaterialBuffer', materialName);\r\n\t\tconst mesh = new THREE.Mesh(geometry, material);\r\n\t\t//mesh.renderLayer = 1;\r\n\t\t//mesh.receiveShadow = true;\r\n\t\t//mesh.visibilityFlags = 1024;\r\n\t\tmesh.name = titleName;\r\n\t\tmesh.materialName = materialName;\r\n\t\tCache.save('nodeBuffer', titleName, mesh);\r\n\t\tthis.node.add(mesh);\r\n//mesh.visible = false;\r\n\t\tmesh.position.x = pos[0];\r\n\t\tmesh.position.y = pos[1];\r\n\t\tmesh.position.z = pos[2];\r\n\t\tmesh.tile = quadtreeTile;\r\n\t\tterrainMesh = null;\r\n\t\tvertices = null;\r\n\t\tindices = null;\r\n\t\tencoding = null;\r\n\t}\r\n\trenderEarthTexure(tileImagerys, tileName, pos, n, tileMaterialName) {\r\n\t\tlet len = tileImagerys.length,\r\n\t\t\ttileMaterial = Cache.get('tileMaterialBuffer', tileMaterialName),\r\n\t\t\tmaterialDirty = this.materialDirty,\r\n\t\t\tgm;\r\n\t\t// if (tileMaterial) {\r\n\t\t// \tif (tileMaterial._textureCount !== tileImagerys.length) {\r\n\t\t// \t\tCache.delete('tileMaterialBuffer', tileMaterialName);\r\n\t\t// \t\ttileMaterial = this.globeMaterials[len - 1];\r\n\t\t// \t\t//tileMaterial = tileMaterial.getTechnique(0).getPass(0).material.clone();\r\n\t\t// \t\ttileMaterial = tileMaterial.clone();\r\n\t\t// \t\ttileMaterial._textureCount = len;\r\n\t\t// \t\tCache.save('tileMaterialBuffer', tileMaterialName, tileMaterial);\r\n\t\t// \t\tmaterialDirty = true;\r\n\t\t// \t}\r\n\t\t// } else {\r\n\t\t// \ttileMaterial = this.globeMaterials[len - 1];\r\n\t\t// \t//tileMaterial = tileMaterial.getTechnique(0).getPass(0).material.clone();\r\n\t\t// \ttileMaterial = tileMaterial.clone();\r\n\t\t// \ttileMaterial.name = \"tile\";\r\n\t\t// \ttileMaterial._textureCount = len;\r\n\t\t// \tCache.save('tileMaterialBuffer', tileMaterialName, tileMaterial);\r\n\t\t// \tmaterialDirty = true;\r\n\t\t// }\r\ngm = this.globeMaterials[len - 1];\r\nif(gm) {\r\n\ttileMaterial = gm.clone();\r\n\ttileMaterial.name = \"tile\";\r\n\t//tileMaterial._textureCount = len;\r\n\tCache.save('tileMaterialBuffer', tileMaterialName, tileMaterial);\r\n\tmaterialDirty = true;\r\n}\r\n\t\tlet _tileMaterial = tileMaterial;\r\n\t\t_tileMaterial.polygonOffset = true;\r\n\t\t_tileMaterial.polygonOffsetFactor = 1;\r\n\t\t_tileMaterial.polygonOffsetUnits = 100;\r\n\t\tlet level = tileName.split(\"_\")[1];\r\n\t\tthis.updateShader(_tileMaterial, \"czm_fogDensity\", this._fogDensity);\r\n\t\tif (materialDirty) {\r\n\t\t\tthis.updateShader(_tileMaterial, \"isReProjection\", level < 9 ? 1 : 0);\r\n\t\t}\r\n\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\tif (tileImagerys[i].readyImagery) {\r\n\t\t\t\tlet textureName = tileImagerys[i].readyImagery.image.name;\r\n\t\t\t\t_tileMaterial.uniforms[\"TexSampler\" + i].value = Cache.get('textureBuffer', textureName);\r\n\t\t\t\tif (materialDirty) {\r\n\t\t\t\t\tlet layerIndex = tileImagerys[i].readyImagery.imageryLayer._layerIndex,\r\n\t\t\t\t\t\ttextureTranslationAndScale = tileImagerys[i].textureTranslationAndScale,\r\n\t\t\t\t\t\ttextureTransAndScale = [textureTranslationAndScale.x, textureTranslationAndScale.y, textureTranslationAndScale.z, textureTranslationAndScale.w],\r\n\t\t\t\t\t\ttextureCoordinateRectangle = tileImagerys[i].textureCoordinateRectangle,\r\n\t\t\t\t\t\ttextureRectangle = [textureCoordinateRectangle.x, textureCoordinateRectangle.y, textureCoordinateRectangle.z, textureCoordinateRectangle.w];\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.textureRectangles[i], textureRectangle);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.textureTransAndScales[i], textureTransAndScale);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.alphaIndexs[i], layerIndex);\r\n\t\t\t\t}\r\n\t\t\t\tif (materialDirty) {\r\n\t\t\t\t\tlet south = tileImagerys[i].readyImagery.rectangle.south,\r\n\t\t\t\t\t\tnorth = tileImagerys[i].readyImagery.rectangle.north,\r\n\t\t\t\t\t\ts = Math.sin(south),\r\n\t\t\t\t\t\tsouthMercatorY = 0.5 * Math.log((1 + s) / (1 - s));\r\n\t\t\t\t\ts = Math.sin(north);\r\n\t\t\t\t\tlet oneOverMercatorHeight = 1 / (0.5 * Math.log((1 + s) / (1 - s)) - southMercatorY);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.souths[i], south);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.norths[i], north);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.southMercatorYs[i], southMercatorY);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.oneOverMercatorHeights[i], oneOverMercatorHeight);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"objectPos\", [pos[0], pos[1], pos[2], 0]);\r\n\t\t\t\t}\r\n\t\t\t\tif (materialDirty) {\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"v3LightPosInput\", [1, 1, 1]);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"fInnerRadius\", this.radius);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"fOuterRadius\", 6696900);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"ESun\", 20);\r\n\t\t\t\t}\r\n\t\t\t} else if (tileImagerys[i].loadingImagery) {\r\n\t\t\t\t_tileMaterial.uniforms[\"TexSampler\" + i].value = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// __LL(shaderMaterial, grayFilterPerBar, grayFilterColorBar) {\r\n\t// \tif (!shaderMaterial) {\r\n\t// \t\tconsole.warn(\"please check your material\");\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tvar name = grayFilterPerBar.toString() + \"_\" + grayFilterColorBar.toString(), value = this.R.get(name);\r\n\t// \tif (!value) {\r\n\t// \t\tvalue = n.a._generateGradientTextureByGray(grayFilterPerBar, grayFilterColorBar);\r\n\t// \t\tthis.R.set(name, value);\r\n\t// \t}\r\n\t// \tshaderMaterial.uniforms.colorMapping.value = value;\r\n\t// }\r\n\trenderEarthShader(tileImagerys, tileName, pos, tileMaterialName) {\r\n\t\tlet is = false,\r\n\t\t\tlen = tileImagerys.length,\r\n\t\t\ttileMaterial = Cache.get('tileMaterialBuffer', tileMaterialName);\r\n\t\tif (tileMaterial) {\r\n\t\t\t// if (tileImagerys[0].readyImagery) {\r\n\t\t\t// \tlet grayFilterPerBar = tileImagerys[0].readyImagery.imageryLayer.grayFilterPerBar,\r\n\t\t\t// \t\tgrayFilterColorBar = tileImagerys[0].readyImagery.imageryLayer.grayFilterColorBar;\r\n\t\t\t// \tthis.updateShader(tileMaterial, \"grayFilterEnable\", tileImagerys[0].readyImagery.imageryLayer.grayFilterEnable);\r\n\t\t\t// \tthis.__LL(tileMaterial, grayFilterPerBar, grayFilterColorBar);\r\n\t\t\t// }\r\n\t\t\tif (tileMaterial._tileNeedUpdate === undefined) {\r\n\t\t\t\ttileMaterial._tileNeedUpdate = true;\r\n\t\t\t}\r\n\t\t\tif (tileMaterial._tileNeedUpdate) {\r\n\t\t\t\tlet _tileMaterial = tileMaterial;\r\n\t\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t\tif (!tileImagerys[i].readyImagery) {\r\n\t\t\t\t\t\tis = true;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet brightness = tileImagerys[i].readyImagery.imageryLayer.brightness,\r\n\t\t\t\t\t\tcolor = tileImagerys[i].readyImagery.imageryLayer.filterColor,\r\n\t\t\t\t\t\taddEffect = tileImagerys[i].readyImagery.imageryLayer.addEffect,\r\n\t\t\t\t\t\thue = tileImagerys[i].readyImagery.imageryLayer.hue,\r\n\t\t\t\t\t\tcontrast = tileImagerys[i].readyImagery.imageryLayer.contrast,\r\n\t\t\t\t\t\tsaturation = tileImagerys[i].readyImagery.imageryLayer.saturation,\r\n\t\t\t\t\t\tgamma = tileImagerys[i].readyImagery.imageryLayer.gamma,\r\n\t\t\t\t\t\ttextureGamma = 0 === gamma ? 1 : 1 / gamma,\r\n\t\t\t\t\t\tnight = tileImagerys[i].readyImagery.imageryLayer.night;\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.brightnesses[i], brightness);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.addEffects[i], addEffect ? 1 : 0);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, this.earthColors[i], this.color || color);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"contrast\", contrast);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"hue\", hue);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"saturation\", saturation);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"textureGamma\", textureGamma);\r\n\t\t\t\t\tthis.updateShader(_tileMaterial, \"night\", night);\r\n\t\t\t\t}\r\n\t\t\t\tif (!is) {\r\n\t\t\t\t\ttileMaterial._tileNeedUpdate = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tupdateShader(shaderMaterial, name, value, type) {\r\n\t\tif (shaderMaterial) {\r\n\t\t\tif (\"grayFilterPerBar\" !== type) {\r\n\t\t\t\tif (\"grayFilterColorBar\" !== type) {\r\n\t\t\t\t\tif (value instanceof Array) {\r\n\t\t\t\t\t\tif (value.length === 1) {\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value = value;\r\n\t\t\t\t\t\t} else if (value.length === 2) {\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.x = value[0];\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.y = value[1];\r\n\t\t\t\t\t\t} else if (value.length === 3) {\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.x = value[0];\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.y = value[1];\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.z = value[2];\r\n\t\t\t\t\t\t} else if (value.length === 4) {\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.x = value[0];\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.y = value[1];\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.z = value[2];\r\n\t\t\t\t\t\t\tshaderMaterial.uniforms[name].value.w = value[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshaderMaterial.uniforms[name].value = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\t\t\tshaderMaterial.uniforms[name].value[i].x = value[i][0];\r\n\t\t\t\t\t\tshaderMaterial.uniforms[name].value[i].y = value[i][1];\r\n\t\t\t\t\t\tshaderMaterial.uniforms[name].value[i].z = value[i][2];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvalue.map((item, index) => {\r\n\t\t\t\t\tshaderMaterial.uniforms[name].value[index] = item;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tisRender(tilesToRender) {\r\n\t\tlet len = tilesToRender.length;\r\n\t\tif (len === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet rs = [], names = [], _name = '';\r\n\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\tlet tiles = tilesToRender[i];\r\n\t\t\tif (tiles !== undefined && tiles !== null) {\r\n\t\t\t\tfor (let j = 0; j < tiles.length; j++) {\r\n\t\t\t\t\tlet tile = tiles[j], name = this.tileNameCreater(tile);\r\n\t\t\t\t\tif (this.isNeedUpdateTexture(this.quadTileMatrial[name], tile)) {\r\n\t\t\t\t\t\trs.push(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this._useTerrain && tile.data.terrainData) {\r\n\t\t\t\t\t\tthis.mesh = tile.data.terrainData._mesh;\r\n\t\t\t\t\t\tif (this.mesh !== undefined && this.mesh !== null && this.isNeedUpdate(this.quadTileRadius[name], this.mesh, name)) {\r\n\t\t\t\t\t\t\tnames.push(name);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_name += name + \",\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet item = this._recorder.push(_name);\r\n\t\t//console.log(item);\r\n\t\tif (item.length === 1 || (item[0] === item[1] && names.length === 0 && rs.length === 0)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tisNeedUpdateTexture(matrial, tile) {\r\n\t\tlet r = tile.data ? tile.data.imagery : tile;\r\n\t\tif (matrial) {\r\n\t\t\tlet textureName = matrial.textureName;\r\n\t\t\tif (textureName.length !== r.length) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tfor (let i = 0; i < textureName.length; i++) {\r\n\t\t\t\tlet imagery = r[i].readyImagery;\r\n\t\t\t\tlet name = this.createImageUrl(imagery);\r\n\t\t\t\tif (textureName[i] !== name) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tisNeedUpdate(radius, mesh, tileName, pNode) {\r\n\t\tif (radius && radius === mesh.boundingSphere3D.radius) {\r\n\t\t\tlet tile = Cache.get('nodeBuffer', tileName);\r\n\t\t\tif (tile) {\r\n\t\t\t\tif(pNode) {\r\n\t\t\t\t\tpNode.add(tile);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tcacheShow(name, mName, pNode) {\r\n\t\tlet node = Cache.get('nodeBuffer', name);\r\n\t\tif(node) {\r\n\t\t\tconst material = Cache.get('tileMaterialBuffer', mName);\r\n\t\t\tnode.material = material;\r\n\t\t\tif(pNode) {\r\n\t\t\t\tpNode.add(node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\ttileNameCreater(tile) {\r\n\t\treturn `EarthTile_${ tile._level }_${ tile._x }_${ tile._y }`;\r\n\t}\r\n\tcreateImageUrl(imagery) {\r\n\t\tif (imagery) {\r\n\t\t\treturn imagery.image ? imagery.image.currentSrc : '';\r\n\t\t}\r\n\t}\r\n}","import * as THREE from 'three';\r\n// const ol = function() {\r\n// \t// var e = THING.App.current ? THING.App.current.level.current : null;\r\n// \t// return e ? e._getBaseMatrix() : null\r\n// \treturn null;\r\n// };\r\nclass CombinedCamera extends THREE.Camera {\r\n\tconstructor(width, height, fov, near, far, orthoNear, orthoFar) {\r\n\t\tsuper();\r\n\t\tthis.fov = fov;\r\n\t\tthis.left = - width / 2;\r\n\t\tthis.right = width / 2;\r\n\t\tthis.top = height / 2;\r\n\t\tthis.bottom = - height / 2;\r\n\t\tthis.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, \torthoNear, orthoFar );\r\n\t\tthis.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );\r\n\t\tthis.zoom = 1;\r\n\t\tthis.view = null;\r\n\t\tthis.matrixTween = null;\r\n\t\tthis.toPerspective();\r\n\t}\r\n\ttoPerspective() {\r\n\t\tthis.near = this.cameraP.near;\r\n\t\tthis.far = this.cameraP.far;\r\n\t\tthis.cameraP.updateProjectionMatrix();\r\n\t\tthis.projectionMatrix.copy(this.cameraP.projectionMatrix);\r\n\t\tthis.projectionMatrixInverse.copy(this.cameraP.projectionMatrixInverse);\r\n\t\tthis.inPerspectiveMode = true;\r\n\t\tthis.inOrthographicMode = false;\r\n\t}\r\n\ttoOrthographic() {\r\n\t\tlet e = this.cameraP.aspect, \r\n\t\t\tt = this.orthoSize.z, \r\n\t\t\ti = this.orthoSize.depth, \r\n\t\t\tr = i * t * e / 2, \r\n\t\t\tn = i * t / 2;\r\n\t\tn /= this.zoom;\r\n\t\tr /= this.zoom;\r\n\t\tthis.cameraO.left = -r;\r\n\t\tthis.cameraO.right = r;\r\n\t\tthis.cameraO.top = n;\r\n\t\tthis.cameraO.bottom = -n;\r\n\t\tthis.cameraO.updateProjectionMatrix();\r\n\t\tthis.near = this.cameraO.near;\r\n\t\tthis.far = this.cameraO.far;\r\n\t\tthis.projectionMatrix.copy(this.cameraO.projectionMatrix);\r\n\t\tthis.projectionMatrixInverse.copy(this.cameraO.projectionMatrixInverse);\r\n\t\tthis.inPerspectiveMode = false;\r\n\t\tthis.inOrthographicMode = true;\r\n\t}\r\n\tsetSize(width, height) {\r\n\t\tthis.cameraP.aspect = width / height;\r\n\t\tthis.left = -width / 2;\r\n\t\tthis.right = width / 2;\r\n\t\tthis.top = height / 2;\r\n\t\tthis.bottom = -height / 2;\r\n\t\tthis.updateProjectionMatrix();\r\n\t}\r\n\tsetFov(fov) {\r\n\t\tthis.fov = fov;\r\n\t\tif(this.inPerspectiveMode) {\r\n\t\t\tthis.cameraP.fov = this.fov;\r\n\t\t\tthis.toPerspective();\r\n\t\t} else {\r\n\t\t\tthis.toOrthographic();\r\n\t\t}\r\n\t}\r\n\tsetViewOffset(e, t, i, r, n, o) {\r\n\t\tthis.cameraP.setViewOffset(e, t, i, r, n, o);\r\n\t\tthis.cameraO.setViewOffset(e, t, i, r, n, o);\r\n\t}\r\n\tclearViewOffset() {\r\n\t\tthis.cameraP.clearViewOffset();\r\n\t\tthis.cameraO.clearViewOffset();\r\n\t}\r\n\tupdateProjectionMatrix() {\r\n\t\tif(this.inPerspectiveMode) {\r\n\t\t\tthis.toPerspective()\r\n\t\t} else {\r\n\t\t\tthis.toPerspective();\r\n\t\t\tthis.toOrthographic();\r\n\t\t}\r\n\t}\r\n\tsetLens(e, t, i, r) {\r\n\t\tif(t === undefined) {\r\n\t\t\tt = 24;\r\n\t\t}\r\n\t\tlet n = 0;\r\n\t\tif (i) {\r\n\t\t\tlet o = parseInt(\"42EF\", 16);\r\n\t\t\tn = parseInt(r || \"nahoanehc\") & o;\r\n\t\t} else {\r\n\t\t\tn = 2 * THREE.Math.radToDeg(Math.atan(t / (2 * e)));\r\n\t\t}\r\n\t\tthis.setFov(n);\r\n\t\treturn n;\r\n\t}\r\n\tsetZoom(zoom) {\r\n\t\tthis.zoom = zoom;\r\n\t\tthis.inPerspectiveMode ? this.toPerspective() : this.toOrthographic();\r\n\t}\r\n\ttoFrontView() {\r\n\t\tthis.rotation.x = 0;\r\n\t\tthis.rotation.y = 0;\r\n\t\tthis.rotation.z = 0;\r\n\t\tthis.rotationAutoUpdate = false;\r\n\t}\r\n\ttoBackView() {\r\n\t\tthis.rotation.x = 0;\r\n\t\tthis.rotation.y = Math.PI;\r\n\t\tthis.rotation.z = 0;\r\n\t\tthis.rotationAutoUpdate = false;\r\n\t}\r\n\ttoLeftView() {\r\n\t\tthis.rotation.x = 0;\r\n\t\tthis.rotation.y = -Math.PI / 2;\r\n\t\tthis.rotation.z = 0;\r\n\t\tthis.rotationAutoUpdate = false;\r\n\t}\r\n\ttoRightView() {\r\n\t\tthis.rotation.x = 0;\r\n\t\tthis.rotation.y = Math.PI / 2;\r\n\t\tthis.rotation.z = 0;\r\n\t\tthis.rotationAutoUpdate = false;\r\n\t}\r\n\ttoTopView() {\r\n\t\tthis.rotation.x = -Math.PI / 2;\r\n\t\tthis.rotation.y = 0;\r\n\t\tthis.rotation.z = 0;\r\n\t\tthis.rotationAutoUpdate = false;\r\n\t}\r\n\ttoBottomView() {\r\n\t\tthis.rotation.x = Math.PI / 2;\r\n\t\tthis.rotation.y = 0;\r\n\t\tthis.rotation.z = 0;\r\n\t\tthis.rotationAutoUpdate = false;\r\n\t}\r\n\tsetNear(e) {\r\n\t\tthis.cameraP.near = e;\r\n\t\tthis.cameraO.near = e;\r\n\t\tthis.updateProjectionMatrix();\r\n\t}\r\n\tsetFar(e) {\r\n\t\tthis.cameraP.far = e;\r\n\t\tthis.cameraO.far = e;\r\n\t\tthis.updateProjectionMatrix();\r\n\t}\r\n\tgetProjectionMatrixAlways() {\r\n\t\treturn this._backupProjectionMatrix && (this.isOrthoLerping || this.isOrthographicCamera) ? this._backupProjectionMatrix : this.projectionMatrix\r\n\t}\r\n\ttoPerspectiveCamera() {\r\n\t\tlet e = new THREE.CombinedCamera(1,1,1,1,1,1,1);\r\n\t\te.fov = this.fov;\r\n\t\te.left = this.left;\r\n\t\te.right = this.right;\r\n\t\te.top = this.top;\r\n\t\te.bottom = this.bottom;\r\n\t\te.cameraO = new THREE.OrthographicCamera(1,1,1,1,1,1);\r\n\t\te.cameraO.copy(this.cameraO);\r\n\t\te.cameraP = new THREE.PerspectiveCamera(1,1,1,1);\r\n\t\te.cameraP.copy(this.cameraP);\r\n\t\te.zoom = this.zoom;\r\n\t\te.toPerspective();\r\n\t\treturn e;\r\n\t}\r\n\ttoOrthoCamera(e, t) {\r\n\t\tlet i = this.cameraP.orthoSize(e, t), r = new THREE.CombinedCamera(i.x,i.y,this.fov,this.near,this.far,this.cameraO.near,this.cameraO.far);\r\n\t\tr.orthoSize = i;\r\n\t\tr.toOrthographic();\r\n\t\treturn r;\r\n\t}\r\n\t// lerpMatrix(e) {\r\n\t// \tlet t = (e = e || {}).fromMatrix, \r\n\t// \t\ti = e.toMatrix, \r\n\t// \t\tr = e.time, \r\n\t// \t\tn = e.lerpType || A.Quintic.Out, \r\n\t// \t\to = e.start, \r\n\t// \t\ta = e.stop, \r\n\t// \t\ts = e.complete, \r\n\t// \t\tl = ke.toMatrixElementsArray(t), \r\n\t// \t\tu = ke.toMatrixElementsArray(i);\r\n\t// \tif(this.matrixTween) {\r\n\t// \t\tthis.matrixTween.stop();\r\n\t// \t}\r\n\t// \tthis.matrixTween = new TWEEN.Tween(l).to(u, r).easing(n).onStart((function() {\r\n\t// \t\to && o();\r\n\t// \t}\r\n\t// \t)).onUpdate((function() {\r\n\t// \t\tke.elementsArrayToMatrix(t, this._object);\r\n\t// \t}\r\n\t// \t)).onStop((function() {\r\n\t// \t\ta && a();\r\n\t// \t}\r\n\t// \t)).onComplete((function() {\r\n\t// \t\ts && s();\r\n\t// \t}\r\n\t// \t)).start();\r\n\t// }\r\n\t// lerpToOrthographic(e, t, i, r) {\r\n\t// \tlet n = this.toOrthoCamera(e, t);\r\n\t// \tthis.orthoSize = n.orthoSize,\r\n\t// \tthis.zoom = 1,\r\n\t// \tthis.isOrthoLerping = true,\r\n\t// \tthis._backupProjectionMatrix = this.projectionMatrix.clone();\r\n\t// \tlet o = this;\r\n\t// \tthis.lerpMatrix({\r\n\t// \t\tlerpType: A.Cubic.InOut,\r\n\t// \t\tfromMatrix: this.projectionMatrix,\r\n\t// \t\ttoMatrix: n.projectionMatrix,\r\n\t// \t\ttime: i,\r\n\t// \t\tstop: function() {\r\n\t// \t\t\to.isOrthoLerping = false,\r\n\t// \t\t\tr && r()\r\n\t// \t\t},\r\n\t// \t\tcomplete: function() {\r\n\t// \t\t\to.isOrthoLerping = false,\r\n\t// \t\t\to.toOrthographic(),\r\n\t// \t\t\tr && r()\r\n\t// \t\t}\r\n\t// \t})\r\n\t// }\r\n\tlerpToPerspective(e, t) {\r\n\t\tvar i = this.toPerspectiveCamera();\r\n\t\tthis.isPerspectiveLerping = true;\r\n\t\tvar r = this;\r\n\t\tthis.lerpMatrix({\r\n\t\t\tfromMatrix: this.projectionMatrix,\r\n\t\t\ttoMatrix: i.projectionMatrix,\r\n\t\t\ttime: e,\r\n\t\t\tstop: function() {\r\n\t\t\t\tr.isPerspectiveLerping = false;\r\n\t\t\t\tif(t) {\r\n\t\t\t\t\tt();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcomplete: function() {\r\n\t\t\t\tr.isPerspectiveLerping = false;\r\n\t\t\t\tr.toPerspective();\r\n\t\t\t\tif(t) {\r\n\t\t\t\t\tt();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\tgetEffectiveFOV() {\r\n\t\treturn this.cameraP.getEffectiveFOV();\r\n\t}\r\n\tisInView(e) {\r\n\t\tvar t = new THREE.Matrix4;\r\n\t\tt.multiplyMatrices(this.projectionMatrix, this.matrixWorldInverse);\r\n\t\tvar i = new THREE.Frustum;\r\n\t\ti.setFromMatrix(t);\r\n\t\treturn i.intersectsBox(e);\r\n\t}\r\n\tupdateMatrixWorld(e) {\r\n\t\tthis.matrixAutoUpdate && this.updateMatrix();\r\n\t\tif(this.matrixWorldNeedsUpdate || e) {\r\n\t\t\tthis.matrixWorld.copy(this.matrix);\r\n\t\t}\r\n\t\t//let t = ol();\r\n\t\t//if(t) {\r\n\t\t\t//this.matrixWorld.premultiply(t);\r\n\t\t//}\r\n\t\tthis.matrixWorldInverse.getInverse(this.matrixWorld);\r\n\t}\r\n\t// localToWorldPos(e) {\r\n\t// \tlet t;\r\n\t// \te.isVector3 ? e.clone() : new THREE.Vector3(e[0],e[1],e[2]);\r\n\t// \tt = new THREE.Vector3(e[0],e[1],e[2]);\r\n\t// \tvar r = this.localToWorld(t);\r\n\t// \treturn [r.x, r.y, r.z];\r\n\t// }\r\n\tget isPerspectiveCamera() {\r\n\t\treturn this.inPerspectiveMode;\r\n\t}\r\n\tget isOrthographicCamera() {\r\n\t\treturn this.inOrthographicMode;\r\n\t}\r\n\tget isLerping() {\r\n\t\treturn this.isPerspectiveLerping || this.isOrthoLerping;\r\n\t}\r\n}\r\nexport default CombinedCamera;","export default class Viewport {\r\n    constructor(props) {\r\n        const { camera, el } = props;\r\n        this._camera = camera;\r\n        this.el = el;\r\n        //this.name = \"0\";\r\n        this.init();\r\n    }\r\n    init() {\r\n        let width = this.el.offsetWidth, height = this.el.offsetHeight;\r\n        this.top = this.el.clientTop;\r\n        this.left = this.el.clientLeft;\r\n        this.bottom = this.top + height;\r\n        this.right = this.left + width;\r\n        this.actualHeight = height;\r\n        this.actualWidth = width;\r\n    }\r\n    // isPointInside(point2d) {\r\n    //     return this.left <= point2d[0] && this.right >= point2d[0] && this.top <= point2d[1] && this.bottom >= point2d[1];\r\n    //     /*let vec = new THREE.Vector3(0, 0, -10); //in front of camera\r\n    //     let camera = this._camera;\r\n    //     //check if within camera's view:\r\n    //     camera.updateMatrix(); // make sure camera's local matrix is updated\r\n    //     camera.updateMatrixWorld(); // make sure camera's world matrix is updated\r\n    //     camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n    //     let frustum = new THREE.Frustum();\r\n    //     frustum.setFromMatrix(new THREE.Matrix4().multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));\r\n    //       if (frustum.containsPoint(vec)) {\r\n    //         //console.log('within camera view');\r\n    //         return true;\r\n    //     } else {\r\n    //         //console.log('outside camera view');\r\n    //         return false;\r\n    //     }*/\r\n    // }\r\n    isPointInside(pos) {\r\n        return this.left <= pos[0] && this.right >= pos[0] && this.top <= pos[1] && this.bottom >= pos[1];\r\n    }\r\n}","import * as THREE from 'three';\r\nimport Viewport from './Viewport';\r\nexport default class Camera {\r\n    constructor(props) {\r\n        Object.assign(this, props);\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.width = this.el.offsetWidth;\r\n        this.height = this.el.offsetHeight;\r\n        this.lookAtArr = [0, 0, 0];\r\n        this.lastPos = [];\r\n        this.lastRay = {};\r\n    }\r\n    getFov() {\r\n        return this.camera.fov;\r\n    }\r\n    setPosition(inX, inY, inZ) {\r\n        let x, y, z;\r\n        if (Array.isArray(arguments[0])) {\r\n            x = inX[0];\r\n            y = inX[1];\r\n            z = inX[2];\r\n        } else {\r\n            x = inX;\r\n            y = inY;\r\n            z = inZ;\r\n        }\r\n        let cameraPos = new THREE.Vector3(x, y, z);\r\n        this.camera.position.copy(cameraPos);\r\n    }\r\n    // setPosition(a, b, c) {\r\n    //     let x, y, z;\r\n    //     if (Array.isArray(arguments[0])) {\r\n    //         x = a[0];\r\n    //         y = a[1];\r\n    //         z = a[2];\r\n    //     } else {\r\n    //         x = a;\r\n    //         y = b;\r\n    //         z = c;\r\n    //     }\r\n    //     let pos = new THREE.Vector3(x, y, z);\r\n    //     this.camera.position.copy(pos);\r\n    // }\r\n    getPosition() {\r\n        let pos = new THREE.Vector3();\r\n        pos.copy(this.camera.position);\r\n        return [pos.x, pos.y, pos.z];\r\n    }\r\n    getLookAt() {\r\n        return this.lookAtArr;\r\n    }\r\n    // setLookAt(x, y, z) {\r\n    //     this.lookAt(x, y, z);\r\n    // }\r\n    lookAt(a, b, c) {\r\n        let x, y, z;\r\n        if (Array.isArray(arguments[0])) {\r\n            x = a[0];\r\n            y = a[1];\r\n            z = a[2];\r\n        } else {\r\n            x = a;\r\n            y = b;\r\n            z = c;\r\n        }\r\n        this.lookAtArr = [x, y, z];\r\n        let pos = new THREE.Vector3(x, y, z);\r\n        this.camera.lookAt(pos);\r\n    }\r\n    // getSceneManager() { }\r\n    // setAutoTracking() { }\r\n    getDerivedPosition() {\r\n        let pos = this.camera.position;\r\n        return [pos.x, pos.y, pos.z];\r\n    }\r\n    getDerivedDirection() {\r\n        let direction = new THREE.Vector3();\r\n        this.camera.getWorldDirection(direction);\r\n        return [direction.x, direction.y, direction.z];\r\n    }\r\n    getCameraToViewportRay(pos) {\r\n\r\n        // let mouse = new THREE.Vector2(Number(pos[0]), Number(pos[1]));\r\n        // \r\n        if (this.lastPos.toString() == pos.toString()) {\r\n            return this.lastRay;\r\n        }\r\n        let x = pos[0];\r\n        let y = pos[1];\r\n        let mouse = new THREE.Vector2();\r\n        mouse.x = x / this.width * 2 - 1;\r\n        mouse.y = -y / this.height * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera(mouse, this.camera);\r\n        let ray = {\r\n            ori: [this.raycaster.ray.origin.x, this.raycaster.ray.origin.y, this.raycaster.ray.origin.z],\r\n            dir: [this.raycaster.ray.direction.x, this.raycaster.ray.direction.y, this.raycaster.ray.direction.z]\r\n        };\r\n        this.lastRay = ray;\r\n        return ray;\r\n    }\r\n    // getCameraToViewportRay(e) {\r\n    //     if (this.lastPos.toString() == e.toString()) {\r\n    //         return this.lastRay;\r\n    //     }\r\n    //     let t = e[0],\r\n    //         r = e[1],\r\n    //         n = new THREE.Vector2();\r\n    //     n.x = t / this.width * 2 - 1;\r\n    //     n.y = -r / this.height * 2 + 1;\r\n    //     this.raycaster.setFromCamera(n, this.camera);\r\n    //     var i = {\r\n    //         ori: [this.raycaster.ray.origin.x, this.raycaster.ray.origin.y, this.raycaster.ray.origin.z],\r\n    //         dir: [this.raycaster.ray.direction.x, this.raycaster.ray.direction.y, this.raycaster.ray.direction.z]\r\n    //     };\r\n    //     this.lastRay = i;\r\n    //     return i;\r\n    // }\r\n    getViewport() {\r\n        return new Viewport({\r\n            camera: this.camera,\r\n            el: this.el\r\n        });\r\n    }\r\n    // isGoing() {\r\n    //     return true;\r\n    // }\r\n    // stopGoing() { }\r\n    moveRelative(inX, inY, inZ) {\r\n        let x, y, z;\r\n        if (Array.isArray(arguments[0])) {\r\n            x = inX[0];\r\n            y = inX[1];\r\n            z = inX[2];\r\n        } else {\r\n            x = inX;\r\n            y = inY;\r\n            z = inZ;\r\n        }\r\n        this.camera.translateX(x);\r\n        this.camera.translateY(y);\r\n        this.camera.translateZ(z);\r\n        /*\r\n        let old = this.getPosition();\r\n        let nx = old[0] + dx;\r\n        let ny = old[1] + dy;\r\n        let nz = old[2] + dz;\r\n        this.setPosition(nx, ny, nz);*/\r\n    }\r\n    getScreenCoords(pos) {\r\n        let vector = new THREE.Vector3(pos[0], pos[1], pos[2]);\r\n        vector.project(this.camera);\r\n\r\n        let widthHalf = this.width / 2,\r\n            heightHalf = this.height / 2;\r\n        vector.x = vector.x * widthHalf + widthHalf;\r\n        vector.y = -vector.y * heightHalf + heightHalf;\r\n        return [vector.x, vector.y];\r\n    }\r\n    getSpriteScreenCoords(pos) {\r\n        let vector = new THREE.Vector3(pos[0], pos[1], pos[2]);\r\n        vector.project(this.camera);\r\n\r\n        let widthHalf = this.width / 2,\r\n            heightHalf = this.height / 2;\r\n        vector.x = vector.x * widthHalf;\r\n        vector.y = vector.y * heightHalf;\r\n        return [vector.x, vector.y];\r\n    }\r\n    // getScreenCoords(e) {\r\n    //     let t = new THREE.Vector3(e[0], e[1], e[2]);\r\n    //     t.project(this.camera);\r\n    //     let r = this.width / 2, n = this.height / 2;\r\n    //     t.x = t.x * r + r;\r\n    //     t.y = -t.y * n + n;\r\n    //     return [t.x, t.y];\r\n    // }\r\n    // getSpriteScreenCoords(e) {\r\n    //     let t = new THREE.Vector3(e[0], e[1], e[2]);\r\n    //     t.project(this.camera);\r\n    //     let r = this.width / 2, n = this.height / 2;\r\n    //     t.x = t.x * r;\r\n    //     t.y = t.y * n;\r\n    //     return [t.x, t.y];\r\n    // }\r\n    localToWorldPos(mesh, pos) {\r\n        let p;\r\n        if (pos.isVector3) {\r\n            p = pos.clone();\r\n        } else {\r\n            p = new THREE.Vector3(pos[0], pos[1], pos[2]);\r\n        }\r\n        let rs = mesh.localToWorld(p);\r\n        return [rs.x, rs.y, rs.z];\r\n    }\r\n    getDirection() {\r\n        let direction = new THREE.Vector3();\r\n        this.camera.getWorldDirection(direction);\r\n        return [direction.x, direction.y, direction.z];\r\n    }\r\n    getUp() {\r\n        let p1 = this.localToWorldPos(this.camera, [0, 1, 0]),\r\n            p2 = this.localToWorldPos(this.camera, [0, 0, 0]);\r\n        return [p1[0] - p2[0], p1[1] - p2[1], p1[2] - p2[2]];\r\n    }\r\n    setNear(near) {\r\n        if (this.camera.type === \"PerspectiveCamera\") {\r\n            this.camera.near = near;\r\n        } else {\r\n            this.camera.setNear(near);\r\n        }\r\n        if (this.camera.updateProjectionMatrix) {\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n    }\r\n    setFar(far) {\r\n        if (this.camera.type === \"PerspectiveCamera\") {\r\n            this.camera.far = far;\r\n        } else {\r\n            this.camera.setFar(far);\r\n        }\r\n        if (this.camera.updateProjectionMatrix) {\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n    }\r\n    setNearClipDistance(near) {\r\n        if (this.camera.type === \"PerspectiveCamera\") {\r\n            this.camera.near = near;\r\n        } else {\r\n            this.camera.setNear(near);\r\n        }\r\n        if (this.camera.updateProjectionMatrix) {\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n    }\r\n    setFarClipDistance(far) {\r\n        if (this.camera.type === \"PerspectiveCamera\") {\r\n            this.camera.far = far;\r\n        } else {\r\n            this.camera.setFar(far);\r\n        }\r\n        if (this.camera.updateProjectionMatrix) {\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n    }\r\n    setFixedYawAxis(useFixed, fixedAxis) {\r\n        if (useFixed) {\r\n            this.camera.up.set(fixedAxis[0], fixedAxis[1], fixedAxis[2]);\r\n        } else {\r\n            this.camera.up.set(0, 1, 0);\r\n        }\r\n    }\r\n    // getCameraInfo() {\r\n    //     let pos = this.camera._getWorldPosition(),\r\n    //         cameraPos = [pos.x, pos.y, pos.z],\r\n    //         viewPort = this.getViewport(),\r\n    //         fov = this.getFov(),\r\n    //         matrixWorld = this.camera._getMatrixWorld(),\r\n    //         direction = new THREE.Vector3(),\r\n    //         element = this.camera._getMatrixWorld().elements;\r\n    //     direction.set(element[8], element[9], element[10]).normalize();\r\n    //     let cameraDirection = [-direction.x, -direction.y, -direction.z],\r\n    //         p1 = new THREE.Vector3(0, 1, 0).applyMatrix4(matrixWorld),\r\n    //         p2 = new THREE.Vector3(0, 0, 0).applyMatrix4(matrixWorld);\r\n    //     return {\r\n    //         cameraPos,\r\n    //         viewPort,\r\n    //         fov,\r\n    //         cameraDirection,\r\n    //         cameraUp: [p1.x - p2.x, p1.y - p2.y, p1.z - p2.z]\r\n    //     }\r\n    // }\r\n    set target(target) {\r\n        this.control.target.fromArray(target);\r\n    }\r\n    get target() {\r\n        return this.control.target.toArray();\r\n    }\r\n    set position(position) {\r\n        this.camera.position.fromArray(position);\r\n    }\r\n    get position() {\r\n        return this.camera.position.toArray();\r\n    }\r\n    get direction() {\r\n        let rs = new THREE.Vector3();\r\n        rs.subVectors({\r\n            x: this.target[0],\r\n            y: this.target[1],\r\n            z: this.target[2]\r\n        }, {\r\n            x: this.position[0],\r\n            y: this.position[1],\r\n            z: this.position[2]\r\n        });\r\n        rs.normalize();\r\n        return rs.toArray();\r\n    }\r\n    set up(up) {\r\n        this.camera.up.fromArray(up);\r\n    }\r\n    get up() {\r\n        return this.camera.up.toArray();\r\n    }\r\n}","import * as THREE from 'three';\r\nimport Utils from '../Common/Utils';\r\nexport default class CameraControl {\r\n    constructor(props) {\r\n        this.radius = Utils.radius;\r\n        Object.assign(this, props);\r\n    }\r\n    flyTo(param) {\r\n        let camera = this.camera, opt = param || {};\r\n        let uniformSpeed = opt.uniformSpeed !== undefined && opt.uniformSpeed;\r\n        if (opt.position && opt.target) {\r\n            Object.assign(opt, this.getEarthCameraInfoByPositionAndTarget(opt.position, opt.target));\r\n        }\r\n        if (opt.time === undefined || opt.time === null) {\r\n            opt.time = 2000;\r\n        }\r\n        opt.heading = opt.heading || 0;\r\n        if (opt.pitch !== undefined && opt.pitch !== null) {\r\n            opt.tilt = opt.pitch;\r\n        }\r\n        opt.tilt = opt.tilt || 45;\r\n        opt.lonLat = opt.lonLat || [116.390834, 39.916353];\r\n        //let height = opt.height;\r\n\r\n        if (opt.object && opt.object.boundingBox) {\r\n            opt.lonLat = this.worldToLonLat(opt.object.boundingBox.center);\r\n            opt.height = opt.object.boundingBox.radius;\r\n        }\r\n        //  else if (opt.height !== undefined && opt.height !== null) {\r\n        //     opt.height = 10000;\r\n        // }\r\n        // if(height || opt.height === 0) {\r\n        //     opt.height = height;\r\n        // }\r\n        let cameraInfo = this.getEarthCameraInfo(),\r\n            a = (e) => {\r\n                return e / 10;\r\n            },\r\n            s = (h) => {\r\n                let target = camera.target,\r\n                    pos = this.lonLatToWorld(opt.lonLat),\r\n                    from = new THREE.Vector3().fromArray(target),\r\n                    to = new THREE.Vector3().fromArray(pos);\r\n                return from.angleTo(to) * (h + this.radius);\r\n            },\r\n            u = (t) => {\r\n                opt.speed = t / (opt.time / 1000) / 20;\r\n            },\r\n            c = null,\r\n            _h = () => {\r\n                let pos = this.lonLatToWorld(opt.lonLat);\r\n                return new THREE.Vector3().fromArray(camera.target).distanceTo(new THREE.Vector3().fromArray(pos)) / this.radius * 2000000;\r\n            },\r\n            h = _h(),\r\n            f = new THREE.Vector3().fromArray(camera.position).length() - this.radius,\r\n            d = this.getCameraPositionAndTargetByLonLat(opt.lonLat, opt.height, opt.heading, opt.tilt),\r\n            p = new THREE.Vector3().fromArray(camera.direction),\r\n            m = new THREE.Vector3().subVectors(new THREE.Vector3().fromArray(camera.target), new THREE.Vector3().fromArray(d)),\r\n            g = p.angleTo(m),\r\n            v = this.lonLatToWorld(opt.lonLat),\r\n            y = new THREE.Vector3().fromArray(d).distanceTo(new THREE.Vector3().fromArray(camera.position)),\r\n            _ = new THREE.Vector3().fromArray(v).distanceTo(new THREE.Vector3().fromArray(camera.target));\r\n        if (opt.time === 0) {\r\n            camera.position = d;\r\n            camera.target = v;\r\n            this.correctUp();\r\n            if (opt.complete) {\r\n                opt.complete();\r\n            }\r\n            return;\r\n        }\r\n        if (y < 0.1 && _ < 0.1) {\r\n            if (opt.complete) {\r\n                opt.complete();\r\n            }\r\n        } else if (uniformSpeed) {\r\n            this.directFlyTo(opt);\r\n        } else {\r\n            let x = Math.abs(opt.height - cameraInfo.height),\r\n                b = 0,\r\n                E = 0,\r\n                w = 0;\r\n            if (g < 0.8 && x > 0.5 * y || opt.directFly) {\r\n                u((b = y / a((opt.height + f) / 2)) + E + w);\r\n                this.directFlyTo(opt);\r\n                return;\r\n            }\r\n            if (f < h) {\r\n                if (opt.height < h) {\r\n                    c = h;\r\n                    u((b = Math.abs(c - f) / a((c + f) / 2)) + (E = s(c) / a(c)) + (w = Math.abs(c - opt.height) / a((c + opt.height) / 2)));\r\n                } else {\r\n                    c = opt.height;\r\n                    u((b = Math.abs(c - f) / a((c + f) / 2)) + (E = s(c) / a(c)) + w);\r\n                }\r\n                this.directFlyTo({\r\n                    lonLat: cameraInfo.lonLat,\r\n                    height: c,\r\n                    tilt: 45,\r\n                    heading: cameraInfo.heading,\r\n                    speed: opt.speed,\r\n                    complete: () => {\r\n                        this.rotateFlyTo(opt);\r\n                    }\r\n                })\r\n            } else {\r\n                u(b + (E = s(c = f) / a(c)) + (w = Math.abs(c - opt.height) / a((c + opt.height) / 2)));\r\n                this.rotateFlyTo(opt);\r\n            }\r\n        }\r\n    }\r\n    normalizeVector(vec) {\r\n        let a, b;\r\n        if (vec.length === 4) {\r\n            a = vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2];\r\n            b = Math.sqrt(a);\r\n            vec[0] = vec[0] !== 0 ? vec[0] / b : 0;\r\n            vec[1] = vec[1] !== 0 ? vec[1] / b : 0;\r\n            vec[2] = vec[2] !== 0 ? vec[2] / b : 0;\r\n            vec[3] = vec[3] !== 0 ? vec[2] / b : 0;\r\n        } else {\r\n            a = vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2];\r\n            b = Math.sqrt(a);\r\n            vec[0] = vec[0] !== 0 ? vec[0] / b : 0;\r\n            vec[1] = vec[1] !== 0 ? vec[1] / b : 0;\r\n            vec[2] = vec[2] !== 0 ? vec[2] / b : 0;\r\n        }\r\n        return vec;\r\n    }\r\n    lonlatToWorldHeight(lonLat, radius) {\r\n        let lon = lonLat[0];\r\n        let lat = lonLat[1];\r\n        let theta = lon / 180 * Math.PI;\r\n        let phi = lat / 180 * Math.PI;\r\n        if(radius === null || radius === undefined) {\r\n            radius = 0;\r\n        }\r\n        let s = radius * Math.cos(phi);\r\n        let y = radius * Math.sin(phi);\r\n        let x = -s * Math.cos(theta);\r\n        let z = s * Math.sin(theta);\r\n        return [x, y, z];\r\n    }\r\n    lonLatToWorld(lonLat, radius) {\r\n        return this.lonlatToWorldHeight(lonLat, this.radius + (radius || 0));\r\n        // let lon = lonLat[0];\r\n        // let lat = lonLat[1];\r\n        // let theta = lon / 180 * Math.PI;\r\n        // let phi = lat / 180 * Math.PI;\r\n        // if(radius === null || radius === undefined) {\r\n        //     radius = this.radius;\r\n        // } else {\r\n        //     radius = this.radius + radius;\r\n        // }\r\n        // let s = radius * Math.cos(phi);\r\n        // let y = radius * Math.sin(phi);\r\n        // let x = -s * Math.cos(theta);\r\n        // let z = s * Math.sin(theta);\r\n        // return [x, y, z];\r\n    }\r\n    worldToLonLat(pos, op) {\r\n        let t = op;\r\n        if(!t) {\r\n            t = [0, 0, 0];\r\n        }\r\n        let r = this.subtractVectors(pos, t), \r\n            n = r[1], \r\n            i = r[2], \r\n            o = [r[0], 0, r[2]];\r\n        r = this.normalizeVector(r);\r\n        o = this.normalizeVector(o);\r\n        let a = 180 - this.getAngleBetweenVectors(o, [1, 0, 0]), \r\n            s = this.getAngleBetweenVectors(o, r);\r\n        if(i < 0) {\r\n            a = -a;\r\n        }    \r\n        if(n < 0) {\r\n            s = -s;\r\n        }\r\n        return [a, s, this.vectorDistance(pos, t) - this.radius];\r\n    }\r\n    // convertLonLatToWorld(a, b = 0) {\r\n    //     // if(b === null || b === undefined) {\r\n    //     //     b = 0;\r\n    //     // }\r\n    //     return this.lonLatToWorld(a, b + this.radius);\r\n    // }\r\n    vectorDotProduct(a, b) {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n    }\r\n    sub(a, b, c) {\r\n        if (c === null || c === undefined) {\r\n            c = [0, 0, 0];\r\n        }\r\n        c[0] = a[0] - b[0];\r\n        c[1] = a[1] - b[1];\r\n        c[2] = a[2] - b[2];\r\n        return c;\r\n    }\r\n    subtractVectors(a, b, c) {\r\n        if (a.isVector3) {\r\n            a = [a.x, a.y, a.z];\r\n        }\r\n        if (b.isVector3) {\r\n            b = [b.x, b.y, b.z];\r\n        }\r\n        return this.sub(a, b, c);\r\n    }\r\n    vectorDistance(a, b) {\r\n        let pos = this.subtractVectors(a, b);\r\n        return this.vectorLength(pos);\r\n    }\r\n    vectorLength(vec) {\r\n        return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1] + vec[2] * vec[2]);\r\n    }\r\n    cross(a, b, rs) {\r\n        if (rs === null || rs === undefined) {\r\n            rs = [0, 0, 0];\r\n        }\r\n        rs[0] = a[1] * b[2] - a[2] * b[1];\r\n        rs[1] = a[2] * b[0] - a[0] * b[2];\r\n        rs[2] = a[0] * b[1] - a[1] * b[0];\r\n        return rs;\r\n    }\r\n    vectorCrossProduct(a, b, c) {\r\n        return this.cross(a, b, c);\r\n    }\r\n    radiansToDegrees(radians) {\r\n        return radians / (Math.PI * 2) * 360;\r\n    }\r\n    getAngleBetweenVectors(aVec, bVec) {\r\n        let rs = this.vectorDotProduct(aVec, bVec);\r\n        if (rs > 1) {\r\n            rs = 1;\r\n        } else if (rs < -1) {\r\n            rs = -1;\r\n        }\r\n        // if (rs > 1 && rs < 1 + this.TOLERANCE) {\r\n        //     rs = 1;\r\n        // } else if (rs < -1 && rs > -1 - this.TOLERANCE) {\r\n        //     rs = -1;\r\n        // }\r\n        return this.radiansToDegrees(Math.acos(rs));\r\n    }\r\n    getEarthCameraInfo() {\r\n        let camera = this.camera,\r\n            target = camera.target,\r\n            pos = camera.position;\r\n        return this.getEarthCameraInfoByPositionAndTarget(pos, target);\r\n    }\r\n    rotateByVector(a, b, c) {\r\n        let m = new THREE.Vector3(a[0], a[1], a[2]),\r\n            n = new THREE.Vector3(b[0], b[1], b[2]),\r\n            rs = m.applyAxisAngle(n, c);\r\n        return [rs.x, rs.y, rs.z];\r\n    }\r\n    getCameraPositionAndTargetByLonLat(lonLat, t, r, i) {\r\n        let o = this.lonLatToWorld(lonLat, t),\r\n            a = [o[0], o[1], o[2]],\r\n            s = new THREE.Vector3(a[0], a[1], a[2]).normalize(),\r\n            l = new THREE.Vector3(0, 1, 0).projectOnPlane(s);\r\n        l = l.normalize();\r\n        l = l.multiplyScalar(-1);\r\n        let u = t / Math.tan(i / 180 * Math.PI),\r\n            c = [o[0] + u * l.x, o[1] + u * l.y, o[2] + u * l.z],\r\n            h = [s.x, s.y, s.z];\r\n        c = this.rotateByVector(c, h, r / 180 * Math.PI);\r\n        return c;\r\n    }\r\n    getEarthCameraInfoByPositionAndTarget(target, pos) {\r\n        let rs = {};\r\n        rs.lonLat = this.worldToLonLat(pos);\r\n        rs.height = this.vectorDistance(target, [0, 0, 0]) - this.radius;\r\n        if (pos[0] === 0 || pos[1] === 0 || pos[2] === 0) {\r\n            return rs;\r\n        }\r\n        let distance = [target[0] - pos[0], target[1] - pos[1], target[2] - pos[2]];\r\n        distance = this.normalizeVector(distance);\r\n        let a = this.normalizeVector([pos[0], pos[1], pos[2]]),\r\n            s = this.getAngleBetweenVectors(distance, a),\r\n            l = [target[0] - pos[0], target[1] - pos[1], target[2] - pos[2]],\r\n            u = this.vectorCrossProduct(a, l);\r\n        u = this.normalizeVector(u);\r\n        let c = this.vectorDotProduct([0, 1, 0], a),\r\n            h = [a[0] * c, a[1] * c, a[2] * c],\r\n            f = [0 - h[0], 1 - h[1], 0 - h[2]],\r\n            d = this.normalizeVector(f),\r\n            p = this.vectorCrossProduct(d, a),\r\n            m = this.normalizeVector(p),\r\n            g = this.getAngleBetweenVectors(u, m);\r\n        if (this.getAngleBetweenVectors(u, d) < 90) {\r\n            g = -g;\r\n        }\r\n        rs.heading = -g;\r\n        rs.tilt = 90 - s;\r\n        rs.pitch = rs.tilt;\r\n        return rs;\r\n    }\r\n    getCameraUpByPositionAndTarget(a, b) {\r\n        let r = [b[0] - a[0], b[1] - a[1], b[2] - a[2]],\r\n            n = this.vectorCrossProduct(a, r),\r\n            rs = this.vectorCrossProduct(r, n);\r\n        rs = this.normalizeVector(rs);\r\n        return rs;\r\n    }\r\n    correctUp() {\r\n        let camera = this.camera;\r\n        camera.up = this.normalizeVector(camera.position);\r\n    }\r\n    getSpeed(a, b) {\r\n        let camera = this.camera;\r\n        return (new THREE.Vector3().fromArray(camera.position).length() - b + 10) / 10 * a;\r\n    }\r\n    directFlyTo(param) {\r\n        let camera = this.camera, opt = param || {};\r\n        opt.speed = opt.speed || 1;\r\n        opt.heading = opt.heading || 0;\r\n        opt.tilt = opt.tilt || 45;\r\n        opt.lonLat = opt.lonLat || [116.390834, 39.916353];\r\n        opt.height = opt.height || 10000;\r\n        let r = undefined === opt.disablePick || opt.disablePick;\r\n        let i = opt.uniformSpeed, cameraInfo = this.getEarthCameraInfo();\r\n        function a(e, t, r) {\r\n            return Math.abs(e - t) < r;\r\n        }\r\n        if (a(cameraInfo.lonLat[0], opt.lonLat[0], 0.0001)\r\n            && a(cameraInfo.lonLat[1], opt.lonLat[1], 0.0001)\r\n            && a(cameraInfo.height, opt.height, 5)\r\n            && a(cameraInfo.tilt, opt.tilt, 10)\r\n            && a(cameraInfo.heading, opt.heading, 5)\r\n        ) {\r\n            if (opt.complete) {\r\n                opt.complete();\r\n            }\r\n            return;\r\n        }\r\n\r\n        let s = camera.position, \r\n            u = camera.target, \r\n            c = this.lonLatToWorld(opt.lonLat), \r\n            h;\r\n        if (opt.target) {\r\n            c = opt.target;\r\n        }\r\n        if (opt.position) {\r\n            h = opt.position;\r\n        } else {\r\n            let f = this.lonLatToWorld(opt.lonLat, opt.height),\r\n                d = new THREE.Vector3(f[0], f[1], f[2]).normalize(),\r\n                p = new THREE.Vector3(0, 1, 0).projectOnPlane(d);\r\n            p = p.normalize();\r\n            p = p.multiplyScalar(-1);\r\n            let m = opt.height / Math.tan(opt.tilt / 180 * Math.PI);\r\n            h = [f[0] + m * p.x, f[1] + m * p.y, f[2] + m * p.z];\r\n            let g = [d.x, d.y, d.z];\r\n            h = this.rotateByVector(h, g, opt.heading / 180 * Math.PI);\r\n        }\r\n        let v = [h[0] - s[0], h[1] - s[1], h[2] - s[2]],\r\n            y = [c[0] - u[0], c[1] - u[1], c[2] - u[2]],\r\n            _ = new THREE.Vector3().fromArray(v).length(),\r\n            x = camera.up,\r\n            b = this.getCameraUpByPositionAndTarget(h, c),\r\n            E = [b[0] - x[0], b[1] - x[1], b[2] - x[2]];\r\n        function w(e) {\r\n            let r = [s[0] + v[0] * e, s[1] + v[1] * e, s[2] + v[2] * e],\r\n                n = [u[0] + y[0] * e, u[1] + y[1] * e, u[2] + y[2] * e],\r\n                i = [x[0] + E[0] * e, x[1] + E[1] * e, x[2] + E[2] * e];\r\n                camera.position = r;\r\n                camera.up = i;\r\n                camera.target = n;\r\n        }\r\n        let T = 0, M = 0;\r\n        //camera.inputEnabled = false;\r\n        //camera.onStart();\r\n        let R = this.vectorLength(c), S = new Date().getTime();\r\n        this.onUpdate = () => {\r\n            //camera.onChange();\r\n            //camera.cameraObject.controls[0].control._flying = true;\r\n            //if (r) {\r\n                //this.picker._state.lock(false, \"earthFlyParam\");\r\n            //}\r\n            let n = 0;\r\n            if (i) {\r\n                let t = new Date().getTime();\r\n                M = _ * (t - S) / opt.time;\r\n            } else {\r\n                n = this.getSpeed(opt.speed, R);\r\n                M += n;\r\n            }\r\n            T = M / _;\r\n            if (T < 1) {\r\n                w(T);\r\n            } else if (T >= 1) {\r\n                //camera.onEnd();\r\n                //camera.cameraObject.controls[0].control._flying = false;\r\n                w(1);\r\n                //camera.inputEnabled = true;\r\n                //if (r) {\r\n                    //this.picker._state.unlock(\"earthFlyParam\");\r\n                //}\r\n                if (opt.complete) {\r\n                    opt.complete();\r\n                }\r\n                this.onUpdate = null;\r\n                //this.off(\"update\", null, \"directFlyToGeoPositionLoop\");\r\n            }\r\n        }\r\n        // this.on(\"update\", function () {\r\n        //     camera.onChange();\r\n        //     camera.cameraObject.controls[0].control._flying = true;\r\n        //     if (r) {\r\n        //         this.picker._state.lock(false, \"earthFlyParam\");\r\n        //     }\r\n        //     let n = 0;\r\n        //     if (i) {\r\n        //         let t = new Date().getTime();\r\n        //         M = _ * (t - S) / e.time;\r\n        //     } else {\r\n        //         n = this.getSpeed(e.speed, R);\r\n        //         M += n;\r\n        //     }\r\n        //     T = M / _;\r\n        //     if (T < 1) {\r\n        //         w(T);\r\n        //     } else if (T >= 1) {\r\n        //         camera.onEnd();\r\n        //         camera.cameraObject.controls[0].control._flying = false;\r\n        //         w(1);\r\n        //         camera.inputEnabled = true;\r\n        //         if (r) {\r\n        //             this.picker._state.unlock(\"earthFlyParam\");\r\n        //         }\r\n        //         if (opt.complete) {\r\n        //             opt.complete();\r\n        //         }\r\n        //         this.off(\"update\", null, \"directFlyToGeoPositionLoop\");\r\n        //     }\r\n        // }, \"directFlyToGeoPositionLoop\")\r\n    }\r\n    rotateFlyTo(param) {\r\n        let camera = this.camera, opt = param || {};\r\n        opt.speed = opt.speed || 1;\r\n        let r = camera.getPosition(),\r\n            o = camera.target,\r\n            a = this.lonLatToWorld(opt.lonLat),\r\n            s = new THREE.Vector3().fromArray(o),\r\n            u = new THREE.Vector3().fromArray(a),\r\n            c = s.angleTo(u),\r\n            h = new THREE.Vector3().crossVectors(s, u).normalize().toArray(),\r\n            f = 0;\r\n        //camera.inputEnabled = false;\r\n        //camera.onStart();\r\n        let d = new THREE.Vector3().fromArray(camera.position).length();\r\n        let _p = () => {\r\n            let r = new THREE.Vector3().fromArray(camera.position).length() - this.radius;\r\n            if(r < 10) {\r\n                r = 10;\r\n            }\r\n            return r / 10 * opt.speed;\r\n        }\r\n        let p = _p() / d;\r\n        //console.log(p);\r\n        this.preUpdate = () => {\r\n            //camera.onChange();\r\n            //camera.cameraObject.controls[0].control._flying = true;\r\n            f += p;\r\n            if (Math.abs(f) < Math.abs(c)) {\r\n                let s = this.rotateByVector(r, h, f),\r\n                    u = this.rotateByVector(o, h, f);\r\n                camera.position = s;\r\n                let e = this.getCameraUpByPositionAndTarget(s, u);\r\n                camera.up = e;\r\n                camera.target = u;\r\n            } else if(Math.abs(f) >= Math.abs(c)) {\r\n                this.preUpdate = null;\r\n                //this.delete(\"earthFlyLoop\");\r\n                //camera.onEnd();\r\n                //camera.cameraObject.controls[0].control._flying = false;\r\n                camera.target = a;\r\n                //camera.inputEnabled = true;\r\n                this.directFlyTo(opt);\r\n            }\r\n        }\r\n    }\r\n    update() {\r\n        if(this.preUpdate) {\r\n            this.preUpdate();\r\n        }\r\n        if(this.onUpdate) {\r\n            this.onUpdate();\r\n        }\r\n    }\r\n}","import Utils from '../Common/Utils';\r\nimport * as THREE from 'three';\r\nimport { visible } from '../Common/Utils';\r\nimport Cache from '../Common/Cache';\r\nclass EarthOrbitControls extends THREE.EventDispatcher {\r\n    constructor(view, camera, dom) {\r\n        super();\r\n        this.radius = Utils.radius;\r\n        let i,\r\n            b = new THREE.Vector2(),\r\n            _ = new THREE.Vector2(),\r\n            x = new THREE.Vector2(),\r\n            p = new THREE.Vector2(),\r\n            g = new THREE.Vector2(),\r\n            E = new THREE.Vector2(),\r\n            w = new THREE.Vector2(),\r\n            T = new THREE.Vector2(),\r\n            S = new THREE.Vector2(),\r\n            A = new THREE.Vector2(),\r\n            v = new THREE.Vector2(),\r\n            y = new THREE.Vector2(),\r\n            f = 1,\r\n            c = new THREE.Spherical(),\r\n            h = new THREE.Spherical(),\r\n            F = new THREE.Sphere(new THREE.Vector3(0, 0, 0), this.radius),\r\n            P = new THREE.Ray(),\r\n            j = new THREE.Raycaster(),\r\n            d = new THREE.Spherical(),\r\n            O = new THREE.BoxGeometry(1000, 1000, 1000),\r\n            k = new THREE.MeshBasicMaterial({\r\n                color: 65280\r\n            }),\r\n            L = new THREE.Mesh(O, k),\r\n            l = {\r\n                NONE: -1,\r\n                ROTATE: 0,\r\n                DOLLY: 1,\r\n                PAN: 2,\r\n                TOUCH_ROTATE: 3,\r\n                TOUCH_DOLLY: 4,\r\n                TOUCH_PAN: 5\r\n            },\r\n            u = l.NONE,\r\n            M = false,\r\n            B = false,\r\n            C = false,\r\n            R = false,\r\n            D = false,\r\n            m = new THREE.Vector3(),\r\n            H = new THREE.Quaternion(),\r\n            I = new THREE.Quaternion(),\r\n            N = {};\r\n        const U = () => {\r\n            return Math.pow(0.95, this.zoomSpeed);\r\n        }\r\n        const V = (e) => {\r\n            let t = new THREE.Vector3(0, this.radius * 10, 0);\r\n            t.unproject(this.object);\r\n            t.normalize();\r\n            p.x = e;\r\n            e *= 1 - Math.sin(h.phi);\r\n            I.setFromAxisAngle(t, -e);\r\n        }\r\n        const z = (e) => {\r\n            let t = new THREE.Vector3(this.radius, 0, 0);\r\n            t.unproject(this.object);\r\n            t.normalize();\r\n            p.y = e;\r\n            H.setFromAxisAngle(t, -e);\r\n        }\r\n        const q = (e) => {\r\n            if (h.phi <= -0.001) {\r\n                h.theta -= e;\r\n                if (h.theta > 2 * Math.PI) {\r\n                    h.theta = h.theta - 2 * Math.PI;\r\n                }\r\n                if (h.theta < 0) {\r\n                    h.theta = 2 * Math.PI + h.theta;\r\n                }\r\n            }\r\n        }\r\n        const W = (e) => {\r\n            C = true;\r\n            h.phi += e;\r\n            if (h.phi >= -0.01) {\r\n                h.phi = -0.01;\r\n            }\r\n            if (h.phi < -this.maxPolarAngle) {\r\n                h.phi = -this.maxPolarAngle;\r\n            }\r\n            if (h.phi > -this.minPolarAngle) {\r\n                h.phi = -this.minPolarAngle;\r\n            }\r\n        }\r\n        const G = (e, t) => {\r\n            let i = this.domElement === document ? this.domElement.body : this.domElement;\r\n            if (this.object.isPerspectiveCamera) {\r\n                q(2 * Math.PI * e / i.clientWidth * this.mousePanSpeed);\r\n                W(2 * Math.PI * t / i.clientHeight * this.mousePanSpeed);\r\n            } else if (this.object.isOrthographicCamera) {\r\n                q(e * (this.object.right - this.object.left) / this.object.zoom / i.clientWidth, this.object.matrix);\r\n                W(t * (this.object.top - this.object.bottom) / this.object.zoom / i.clientHeight, this.object.matrix);\r\n            } else {\r\n                //console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\r\n                this.enablePan = false;\r\n            }\r\n        }\r\n        const X = (e) => {\r\n            D = true;\r\n            if (this.object.isPerspectiveCamera) {\r\n                f /= e;\r\n            } else if (this.object.isOrthographicCamera) {\r\n                this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom * e));\r\n                this.object.updateProjectionMatrix();\r\n                //true\r\n            } else {\r\n                //console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\r\n                this.enableZoom = false;\r\n            }\r\n        }\r\n        const Y = (e) => {\r\n            R = true;\r\n            if (this.object.isPerspectiveCamera) {\r\n                f *= e;\r\n            } else if (this.object.isOrthographicCamera) {\r\n                this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / e));\r\n                this.object.updateProjectionMatrix();\r\n                //true\r\n            } else {\r\n                //console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\r\n                this.enableZoom = false;\r\n            }\r\n        }\r\n        const J = (e) => {\r\n            b.set(e.touches[0].pageX, e.touches[0].pageY);\r\n        }\r\n        const Q = (e) => {\r\n            _.set(e.touches[0].pageX, e.touches[0].pageY);\r\n            x.subVectors(_, b);\r\n            G(x.x, x.y);\r\n            b.copy(_);\r\n            this.update();\r\n        }\r\n        const mouseDown = (e) => {\r\n            if (this.enabled !== false) {\r\n                e.preventDefault();\r\n                switch (e.button) {\r\n                    case this.mouseButtons.ORBIT:\r\n                        if (this.enableRotate === false) {\r\n                            return;\r\n                        }\r\n                        g.set(e.clientX, e.clientY);\r\n                        u = l.ROTATE;\r\n                        break;\r\n                    case this.mouseButtons.ZOOM:\r\n                        if (this.enableZoom === false) {\r\n                            return;\r\n                        }\r\n                        E.set(e.clientX, e.clientY);\r\n                        u = l.DOLLY;\r\n                        break;\r\n                    case this.mouseButtons.PAN:\r\n                        if (this.enablePan === false) {\r\n                            return;\r\n                        }\r\n                        b.set(e.clientX, e.clientY);\r\n                        u = l.PAN;\r\n                }\r\n                if (u !== l.NONE) {\r\n                    document.addEventListener(\"mousemove\", mouseMove, false);\r\n                    document.addEventListener(\"mouseup\", mouseUp, false);\r\n                    this.dispatchEvent({\r\n                        type: \"start\"\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        const mouseMove = (e) => {\r\n            if (this.enabled !== false) {\r\n                e.preventDefault();\r\n                switch (u) {\r\n                    case l.ROTATE:\r\n                        if (this.enableRotate === false) {\r\n                            return;\r\n                        }\r\n                        M = true;\r\n                        v.set(e.clientX, e.clientY);\r\n                        y.subVectors(v, g);\r\n                        let t = this.domElement === document ? this.domElement.body : this.domElement;\r\n                        V(2 * Math.PI * y.x / t.clientWidth * this.rotateSpeed);\r\n                        z(2 * Math.PI * y.y / t.clientHeight * this.rotateSpeed);\r\n                        g.copy(v);\r\n                        this.update();\r\n                        break;\r\n                    case l.DOLLY:\r\n                        if (this.enableZoom === false) {\r\n                            return;\r\n                        }\r\n                        w.set(e.clientX, e.clientY);\r\n                        T.subVectors(w, E);\r\n                        if (T.y > 0) {\r\n                            X(U());\r\n                        } else if (T.y < 0) {\r\n                            Y(U());\r\n                        }\r\n                        E.copy(w);\r\n                        this.update();\r\n                        break;\r\n                    case l.PAN:\r\n                        if (this.enablePan === false) {\r\n                            return;\r\n                        }\r\n                        _.set(e.clientX, e.clientY);\r\n                        x.subVectors(_, b);\r\n                        G(x.x, x.y);\r\n                        b.copy(_);\r\n                        this.update();\r\n                }\r\n            }\r\n        }\r\n        const mouseUp = (e) => {\r\n            if (this.enabled === false) {\r\n                document.removeEventListener(\"mousemove\", mouseMove, false);\r\n                document.removeEventListener(\"mouseup\", mouseUp, false);\r\n            } else {\r\n                document.removeEventListener(\"mousemove\", mouseMove, false);\r\n                document.removeEventListener(\"mouseup\", mouseUp, false);\r\n                this.dispatchEvent({\r\n                    type: \"end\"\r\n                });\r\n                u = l.NONE;\r\n            }\r\n        }\r\n        let self = this;\r\n        const ee = function () {\r\n            let e, t = false;\r\n            return function () {\r\n                t = true;\r\n                if (e && t) {\r\n                    clearTimeout(e);\r\n                }\r\n                e = setTimeout(function () {\r\n                    self.dispatchEvent({\r\n                        type: \"end\"\r\n                    });\r\n                    t = false;\r\n                }, 300);\r\n            }\r\n        }();\r\n        const wheel = (e) => {\r\n            if (!(this.enabled === false || this.enableZoom === false || u !== l.NONE && u !== l.ROTATE)) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.dispatchEvent({\r\n                    type: \"start\"\r\n                });\r\n                N.x = e.clientX / window.innerWidth * 2 - 1;\r\n                N.y = -e.clientY / window.innerHeight * 2 + 1;\r\n                if (e.deltaY < 0) {\r\n                    Y(U());\r\n                    this.dispatchEvent({\r\n                        type: \"wheel\"\r\n                    });\r\n                } else if (e.deltaY > 0) {\r\n                    X(U());\r\n                    this.dispatchEvent({\r\n                        type: \"wheel\"\r\n                    });\r\n                }\r\n                this.update();\r\n                ee();\r\n            }\r\n        }\r\n        const keyDown = (e) => {\r\n            if (this.enabled === false && this.enableKeys !== false && this.enablePan !== false) {\r\n                switch (e.keyCode) {\r\n                    case this.keys.UP:\r\n                        G(0, this.keyPanSpeed);\r\n                        this.update();\r\n                        break;\r\n                    case this.keys.BOTTOM:\r\n                        G(0, -this.keyPanSpeed);\r\n                        this.update();\r\n                        break;\r\n                    case this.keys.LEFT:\r\n                        G(this.keyPanSpeed, 0);\r\n                        this.update();\r\n                        break;\r\n                    case this.keys.RIGHT:\r\n                        G(-this.keyPanSpeed, 0);\r\n                        this.update();\r\n                }\r\n            }\r\n        }\r\n        const touchStart = (e) => {\r\n            if (this.enabled !== false) {\r\n                switch (e.touches.length) {\r\n                    case 1:\r\n                        if (this.enableRotate === false) {\r\n                            return;\r\n                        }\r\n                        g.set(e.touches[0].pageX, e.touches[0].pageY);\r\n                        u = l.TOUCH_ROTATE;\r\n                        break;\r\n                    case 3:\r\n                        if (this.enableZoom === false) {\r\n                            return;\r\n                        }\r\n                        J(e);\r\n                        u = l.TOUCH_PAN;\r\n                        break;\r\n                    case 2:\r\n                        S.set(e.touches[0].pageX, e.touches[0].pageY);\r\n                        A.set(e.touches[1].pageX, e.touches[1].pageY);\r\n                        if (this.enablePan === false) {\r\n                            return;\r\n                        }\r\n                        J(e);\r\n                        let t = e.touches[0].pageX - e.touches[1].pageX,\r\n                            i = e.touches[0].pageY - e.touches[1].pageY,\r\n                            r = Math.sqrt(t * t + i * i);\r\n                        E.set(0, r);\r\n                        u = l.TOUCH_PAN;\r\n                        break;\r\n                    default:\r\n                        u = l.NONE;\r\n                }\r\n                if (u !== l.NONE) {\r\n                    this.dispatchEvent({\r\n                        type: \"start\"\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        const touchMove = (e) => {\r\n            if (this.enabled !== false) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                switch (e.touches.length) {\r\n                    case 1:\r\n                        if (this.enableRotate === false) {\r\n                            return;\r\n                        }\r\n                        if (u !== l.TOUCH_ROTATE) {\r\n                            return;\r\n                        }\r\n                        M = true;\r\n                        v.set(e.touches[0].pageX, e.touches[0].pageY);\r\n                        y.subVectors(v, g);\r\n                        let t = this.domElement === document ? this.domElement.body : this.domElement;\r\n                        V(2 * Math.PI * y.x / t.clientWidth * this.rotateSpeed);\r\n                        z(2 * Math.PI * y.y / t.clientHeight * this.rotateSpeed);\r\n                        g.copy(v);\r\n                        this.update();\r\n                        break;\r\n                    case 3:\r\n                        if (this.enableZoom === false) {\r\n                            return;\r\n                        }\r\n                        if (u !== l.TOUCH_PAN) {\r\n                            return;\r\n                        }\r\n                        Q(e);\r\n                        break;\r\n                    case 2:\r\n                        var a = new THREE.Vector2(e.touches[0].pageX, e.touches[0].pageY),\r\n                            i = new THREE.Vector2(e.touches[1].pageX, e.touches[1].pageY),\r\n                            n = a.sub(S).normalize(),\r\n                            o = i.sub(A).normalize();\r\n                        if (n.dot(o) > 0) {\r\n                            u = l.TOUCH_PAN;\r\n                            if (this.enablePan === false) {\r\n                                return;\r\n                            }\r\n                            Q(e);\r\n                        } else {\r\n                            u = l.TOUCH_DOLLY;\r\n                            if (this.enableZoom === false) {\r\n                                return;\r\n                            }\r\n                            let t = e.touches[0].pageX - e.touches[1].pageX,\r\n                                i = e.touches[0].pageY - e.touches[1].pageY,\r\n                                n = Math.sqrt(t * t + i * i);\r\n                            w.set(0, n);\r\n                            T.subVectors(w, E);\r\n                            if (T.y > 0) {\r\n                                Y(U());\r\n                            } else if (T.y < 0) {\r\n                                X(U());\r\n                            }\r\n                            E.copy(w);\r\n                            this.update();\r\n                        }\r\n                        break;\r\n                    default:\r\n                        u = l.NONE;\r\n                }\r\n            }\r\n        }\r\n        const touchEnd = (e) => {\r\n            if (this.enabled !== false) {\r\n                this.dispatchEvent({\r\n                    type: \"end\"\r\n                });\r\n                u = l.NONE;\r\n            }\r\n        }\r\n        const contextMenu = (e) => {\r\n            if (this.enabled !== false) {\r\n                e.preventDefault();\r\n            }\r\n        }\r\n\r\n        this.object = camera;\r\n        this.domElement = undefined !== dom ? dom : document;\r\n        this.enabled = true;\r\n        this.isEarth = true;\r\n        this.target = new THREE.Vector3();\r\n        this._leftInteractive = true;\r\n        this._keepTarget = false;\r\n        this.minDistance = 10;\r\n        this.maxDistance = 11079114.2;\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n        this.maxPitchAngle = 87;\r\n        this._minPolarAngle = 0;\r\n        this._maxPolarAngle = THREE.Math.degToRad(this.maxPitchAngle);\r\n        this.minAzimuthAngle = -Infinity;\r\n        this.maxAzimuthAngle = Infinity;\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.88;\r\n        this.dampingZoomFactor = 0.5;\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1;\r\n        this.zoomFactor = 1;\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1;\r\n        this.enablePan = true;\r\n        this.keyPanSpeed = 7;\r\n        this.mousePanSpeed = 1;\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2;\r\n        this.enableKeys = true;\r\n        this.keys = {\r\n            LEFT: 37,\r\n            UP: 38,\r\n            RIGHT: 39,\r\n            BOTTOM: 40\r\n        };\r\n        this.mouseButtons = {\r\n            ORBIT: THREE.MOUSE.LEFT,\r\n            ZOOM: THREE.MOUSE.MIDDLE,\r\n            PAN: THREE.MOUSE.RIGHT\r\n        };\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n        this.standardRadius = 10216133.731679259;\r\n        this.targetMaxOffset = 60000000;\r\n        this.panStander = this.maxDistance - this.radius;\r\n        this.isDispatchEvent = true;\r\n        this.enableZoomOnTarget = true;\r\n        this.options = {};\r\n        this._isCameraStatic = true;\r\n        this.setOptions = (option) => {\r\n            this.options = option;\r\n            this.mouseButtons = {\r\n                ORBIT: this._parseToThreeMouseKey(option.moveKey),\r\n                ZOOM: this._parseToThreeMouseKey(option.zoomKey),\r\n                PAN: this._parseToThreeMouseKey(option.rotationKey)\r\n            };\r\n            this.enableZoomOnTarget = option.enableZoomOnTarget;\r\n        }\r\n        this._parseToThreeMouseKey = (key) => {\r\n            let rs;\r\n            switch (key) {\r\n                case \"left\":\r\n                    rs = THREE.MOUSE.LEFT;\r\n                    break;\r\n                case \"right\":\r\n                    rs = THREE.MOUSE.RIGHT;\r\n                    break;\r\n                case \"middle\":\r\n                    rs = THREE.MOUSE.MIDDLE;\r\n            }\r\n            return rs;\r\n        }\r\n        this._parseToThingMouseKey = (key) => {\r\n            let rs;\r\n            switch (key) {\r\n                case THREE.MOUSE.LEFT:\r\n                    rs = \"left\";\r\n                    break;\r\n                case THREE.MOUSE.RIGHT:\r\n                    rs = \"right\";\r\n                    break;\r\n                case THREE.MOUSE.MIDDLE:\r\n                    rs = \"middle\"\r\n            }\r\n            return rs;\r\n        }\r\n        this.getOptions = () => {\r\n            this.options.rotationKey = this._parseToThingMouseKey(this.mouseButtons.PAN);\r\n            this.options.zoomKey = this._parseToThingMouseKey(this.mouseButtons.ZOOM);\r\n            this.options.moveKey = this._parseToThingMouseKey(this.mouseButtons.ORBIT);\r\n            this.options.enableZoomOnTarget = this.enableZoomOnTarget;\r\n            return this.options;\r\n        }\r\n        this.getPolarAngle = () => {\r\n            return c.phi;\r\n        }\r\n        this.getAzimuthalAngle = () => {\r\n            return c.theta;\r\n        }\r\n        this.getRotationSpherePhi = () => {\r\n            return h.phi;\r\n        }\r\n        this.getSphericalRadius = () => {\r\n            return c.radius;\r\n        }\r\n        this.saveState = () => {\r\n            this.target0.copy(this.target);\r\n            this.position0.copy(this.object.position);\r\n            this.zoom0 = this.object.zoom;\r\n        }\r\n        this.reset = () => {\r\n            this.target.copy(this.target0);\r\n            this.object.position.copy(this.position0);\r\n            this.object.zoom = this.zoom0;\r\n            this.object.updateProjectionMatrix();\r\n            this.dispatchEvent({\r\n                type: \"change\"\r\n            });\r\n            this.update();\r\n            u = l.NONE;\r\n        }\r\n        this.goHome = () => {\r\n            M = true;\r\n            this.object.up.set(0, 1, 0);\r\n            this.object.position.set(4890109.86328125, 9295980.46875, 13943610.3515625);\r\n            //c.radius;\r\n            h.phi = -0.01;\r\n            h.theta = Math.PI / 2;\r\n            h.radius = c.radius - this.radius;\r\n            this._isCameraStatic = false;\r\n            this.update();\r\n            this._isCameraStatic = true;\r\n        }\r\n        this.setState = (state) => {\r\n            if (this.enabled) {\r\n                let t = this._getIntersectPoint();\r\n                this.target.copy(t);\r\n                let i = this.target,\r\n                    n = this.object.position,\r\n                    o = (new THREE.Vector3()).subVectors(i, n),\r\n                    a = (new THREE.Vector3()).crossVectors(n, o),\r\n                    s = (new THREE.Vector3()).crossVectors(o, a);\r\n                s = s.normalize();\r\n                this.object.up.copy(s);\r\n                this.object.lookAt(i.x, i.y, i.z);\r\n            }\r\n        }\r\n        this.correctUp = (param) => {\r\n            let t = param.time || 3000,\r\n                i = param.callback,\r\n                n = this.target,\r\n                o = this.object.position,\r\n                a = new THREE.Vector3();\r\n            a.copy(this.object.up);\r\n            a.normalize();\r\n            let s = new THREE.Vector3();\r\n            s.copy(o);\r\n            s.normalize();\r\n            let l = null;\r\n            requestAnimationFrame(function e(o) {\r\n                if (!l) {\r\n                    l = o;\r\n                }\r\n                let u = o - l, c = a.lerp(s, u / t);\r\n                this.object.up = c;\r\n                this.object.lookAt(n);\r\n                if (u / t < 1) {\r\n                    requestAnimationFrame(e);\r\n                } else {\r\n                    if (i) {\r\n                        i();\r\n                    }\r\n                    console.log(\"end-correct\");\r\n                }\r\n            });\r\n        }\r\n        this._getIntersectPoint = (e) => {\r\n            if (e === undefined) {\r\n                e = true;\r\n            }\r\n            if (this._isCameraStatic || this._getState() === 0 || this._getState() === 2 || this._keepTarget) {\r\n                return this.target;\r\n            }\r\n            let t = new THREE.Vector3(), i = [];\r\n            this.object.getWorldDirection(t);\r\n            t.normalize();\r\n            j._camera = this.object;\r\n            j.set(this.object.position, t);\r\n            P.set(this.object.position, t);\r\n            if (e) {\r\n                let mesh = Cache.get('nodeBuffer', 'tiles-root');\r\n                if (mesh && Utils.visible(mesh)) {\r\n                    i = j.intersectObjects(mesh.children, true);\r\n                }\r\n                if (i.length) {\r\n                    return i[0].point;\r\n                }\r\n            }\r\n            let n = new THREE.Vector3();\r\n            P.intersectSphere(F, n);\r\n            return n.equals(new THREE.Vector3(0, 0, 0)) ? this.target : n;\r\n        }\r\n        this._getIntersectPointByMouse = (e, t) => {\r\n            let i = [];\r\n            if (this.isEarth) {\r\n                let n = new THREE.Vector3();\r\n                this.object.getWorldDirection(n);\r\n                n.normalize();\r\n                P.set(this.object.position, n);\r\n                j.setFromCamera(new THREE.Vector2(e, t), this.object);\r\n                let o = Cache.get('nodeBuffer', 'tiles-root');\r\n                if (o && Utils.visible(o)) {\r\n                    i = j.intersectObjects(o.children, true);\r\n                }\r\n                let a = new THREE.Vector3();\r\n                P.intersectSphere(F, a);\r\n                return i.length > 0 ? i[0].point : this._getIntersectPoint();\r\n            } else {\r\n                let e = window.innerWidth * (N.x + 1) / 2,\r\n                    t = (1 - N.y) * window.innerHeight / 2,\r\n                    i = this.view.camera.screenToWorld(e, t);\r\n                return new THREE.Vector3(i[0], i[1], i[2]);\r\n            }\r\n        }\r\n        this._getIntersectQuaternion = (e, t) => {\r\n            //(new THREE.Vector3()).copy(e);\r\n            let i = new THREE.Vector3();\r\n            i.copy(e);\r\n            i.normalize();\r\n            let r = new THREE.Quaternion();\r\n            r.setFromUnitVectors(new THREE.Vector3(0, 1, 0), i);\r\n            let n = new THREE.Quaternion();\r\n            n.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2 + t);\r\n            r.multiply(n);\r\n            r.normalize();\r\n            return r;\r\n        }\r\n        this._correctCube = () => {\r\n            let point = this._getIntersectPoint();\r\n            L.position.copy(point);\r\n            d.setFromVector3(point);\r\n            d.radius = 16378000;\r\n            let t = this._getIntersectQuaternion(point, d.theta);\r\n            L.rotation.set(0, 0, 0);\r\n            L.applyQuaternion(t);\r\n            L.updateMatrixWorld(true);\r\n        }\r\n        this._correctSphericalRotation = (point) => {\r\n            let t = new THREE.Vector3();\r\n            t.copy(point);\r\n            L.worldToLocal(t);\r\n            h.setFromVector3(t);\r\n            if (this.target.length() !== 0) {\r\n                let i = this.object.position.distanceTo(this._getIntersectPoint());\r\n                h.radius = i;\r\n            }\r\n            h.phi = -h.phi;\r\n            h.theta = Math.PI + h.theta;\r\n            return false;\r\n        }\r\n        this._getAngle = () => {\r\n            if (this.target.length() !== 0) {\r\n                let point = new THREE.Vector3();\r\n                point.copy(this.target);\r\n                point.normalize();\r\n                let t = new THREE.Vector3(0, this.radius, 0);\r\n                t.sub(this.object.position);\r\n                t.normalize();\r\n                let i = new THREE.Vector3();\r\n                this.object.getWorldDirection(i);\r\n                i.projectOnPlane(point);\r\n                t.projectOnPlane(point);\r\n                let n = t.angleTo(i);\r\n                i.cross(t);\r\n                i.sub(point);\r\n                if (i.length() <= 1) {\r\n                    n *= -1;\r\n                }\r\n                return n;\r\n            }\r\n        }\r\n        this.autoFixTarget = (e) => {\r\n            if (!B && this.view) {\r\n                this.view.scene.add(L);\r\n                L.visible = false;\r\n                B = true;\r\n            }\r\n            if (M) {\r\n                this.dispatchEvent({\r\n                    type: \"change\"\r\n                });\r\n                if (!this.enableDamping) {\r\n                    M = false;\r\n                }\r\n                I.multiply(H);\r\n                e.applyQuaternion(I);\r\n                this.object.updateMatrixWorld(true);\r\n                if (this.target.length() !== 0) {\r\n                    i = new THREE.Vector3();\r\n                    i.copy(e);\r\n                    i.normalize();\r\n                    this.object.up.copy(i);\r\n                    this.target.applyQuaternion(I);\r\n                } else {\r\n                    let t = this._getIntersectPoint();\r\n                    t.y += 100;\r\n                    this.target.copy(t);\r\n                }\r\n                this.object.lookAt(this.target);\r\n            } else if (C) {\r\n                this.dispatchEvent({\r\n                    type: \"change\"\r\n                });\r\n                C = false;\r\n                let i, n = this._getIntersectPoint();\r\n                i = new THREE.Vector3();\r\n                i.copy(L.position);\r\n                i.normalize();\r\n                let a = new THREE.Vector3();\r\n                a.setFromSpherical(h);\r\n                a.applyMatrix4(L.matrixWorld);\r\n                this.object.up.copy(i);\r\n                this.object.position.copy(a);\r\n                this.target.copy(n);\r\n                this.object.lookAt(this.target);\r\n            } else if (R || D) {\r\n                this.dispatchEvent({\r\n                    type: \"change\"\r\n                });\r\n                let s = this.object.position.distanceTo(this._getIntersectPoint());\r\n                if (s > this.maxDistance && D || s < this.minDistance && R) {\r\n                    h.radius = s;\r\n                    f = 1;\r\n                } else {\r\n                    let l;\r\n                    if (R && this.enableZoomOnTarget) {\r\n                        l = this._getIntersectPointByMouse(N.x, N.y);\r\n                    } else {\r\n                        l = this._getIntersectPointByMouse(0, 0);\r\n                    }\r\n                    let u = new THREE.Vector3();\r\n                    u.copy(this.object.position);\r\n                    u.sub(l);\r\n                    u.normalize();\r\n                    let p = c.radius * f - c.radius;\r\n                    h.radius += p;\r\n                    let d = new THREE.Vector3();\r\n                    d.setFromSpherical(h);\r\n                    u.multiplyScalar(p);\r\n                    this.object.position.add(u);\r\n                    this._correctCube();\r\n                    d.applyMatrix4(L.matrixWorld);\r\n                    this.object.position.copy(d);\r\n                    this.object.up.copy(this.object.position);\r\n                    this.target.copy(L.position);\r\n                    this.object.lookAt(this.target);\r\n                }\r\n                if (!this.enableDamping) {\r\n                    R = false;\r\n                    D = false;\r\n                }\r\n            }\r\n        }\r\n        this.addEventListener(\"start\", () => {\r\n            this._isCameraStatic = false;\r\n        });\r\n        this.addEventListener(\"end\", () => {\r\n            this._isCameraStatic = true;\r\n        });\r\n        this.update = () => {\r\n            i = new THREE.Vector3();\r\n            //return () => {\r\n            let e = this.object.position;\r\n            i.copy(e);\r\n            c.setFromVector3(i);\r\n            d.setFromVector3(this.target);\r\n            d.radius = this.radius;\r\n            if (this.enabled) {\r\n                this.autoFixTarget(e);\r\n            }\r\n            this.object.lookAt(this.target);\r\n            this._correctCube();\r\n            this._correctSphericalRotation(e);\r\n            let t = this.object.position.distanceTo(this._getIntersectPoint());\r\n            this.rotateSpeed = t / 30000000;\r\n            this.zoomSpeed = h.radius / 4000000 * this.zoomFactor;\r\n            this.mousePanSpeed = 1;\r\n            if (this.enableDamping === true) {\r\n                if (M) {\r\n                    p.x *= 1 - this.dampingFactor;\r\n                    p.y *= 1 - this.dampingFactor;\r\n                    V(p.x);\r\n                    z(p.y);\r\n                    if (C || R || D || p.x > -1e-10 && p.x < 1e-10 || p.y > -1e-10 && p.y < 1e-10) {\r\n                        M = false;\r\n                        p.set(0, 0);\r\n                    }\r\n\r\n                } else if (R) {\r\n                    f += (1 - f) * this.dampingZoomFactor;\r\n                    if (f > 0.99999999) {\r\n                        f = 1;\r\n                        R = false;\r\n                    }\r\n                } else if (D) {\r\n                    f -= (f - 1) * this.dampingZoomFactor;\r\n                    if (f < 1.0000001) {\r\n                        f = 1;\r\n                        D = false;\r\n                    }\r\n                }\r\n            } else {\r\n                p.set(0, 0);\r\n                f = 1;\r\n                M = false;\r\n                C = false;\r\n            }\r\n            m.set(0, 0, 0);\r\n            return false;\r\n            //}\r\n        }\r\n        this._getState = () => {\r\n            return u;\r\n        }\r\n        this.dispose = () => {\r\n            this.domElement.removeEventListener(\"contextmenu\", contextMenu, false);\r\n            this.domElement.removeEventListener(\"mousedown\", mouseDown, false);\r\n            this.domElement.removeEventListener(\"wheel\", wheel, false);\r\n            this.domElement.removeEventListener(\"touchstart\", touchStart, false);\r\n            this.domElement.removeEventListener(\"touchend\", touchEnd, false);\r\n            this.domElement.removeEventListener(\"touchmove\", touchMove, false);\r\n            document.removeEventListener(\"mousemove\", mouseMove, false);\r\n            document.removeEventListener(\"mouseup\", mouseUp, false);\r\n            window.removeEventListener(\"keydown\", keyDown, false);\r\n        }\r\n        this.rotate = (e, time) => {\r\n            let t = time || 1000;\r\n            t = t / 180 * Math.PI;\r\n            switch (e) {\r\n                case \"up\":\r\n                    this.pan(0, t);\r\n                    break;\r\n                case \"down\":\r\n                    this.pan(0, -t);\r\n                    break;\r\n                case \"left\":\r\n                    this.pan(t, 0);\r\n                    break;\r\n                case \"right\":\r\n                    this.pan(-t, 0)\r\n            }\r\n        }\r\n        this.move = (e, time) => {\r\n            e = e / 180 * Math.PI;\r\n            e *= this.rotateSpeed;\r\n            let t = time / 180 * Math.PI;\r\n            t *= this.rotateSpeed;\r\n            I.set(0, 0, 0, 1);\r\n            H.set(0, 0, 0, 1);\r\n            M = true;\r\n            V(e);\r\n            z(t);\r\n        }\r\n        this.zoom = (e, time) => {\r\n            let t = time || 0.95;\r\n            t = Math.pow(t, this.zoomSpeed);\r\n            switch (e) {\r\n                case \"in\":\r\n                    Y(t);\r\n                    break;\r\n                case \"out\":\r\n                    X(t);\r\n            }\r\n        }\r\n        this.earthRotate = (e, time) => {\r\n            let t = time || 10;\r\n            t = t / 180 * Math.PI;\r\n            t *= this.rotateSpeed;\r\n            I.set(0, 0, 0, 1);\r\n            H.set(0, 0, 0, 1);\r\n            M = true;\r\n            switch (e) {\r\n                case \"right\":\r\n                    V(-t);\r\n                    break;\r\n                case \"left\":\r\n                    V(t);\r\n                    break;\r\n                case \"up\":\r\n                    z(t);\r\n                    break;\r\n                case \"down\":\r\n                    z(-t);\r\n            }\r\n        }\r\n        this.domElement.addEventListener(\"contextmenu\", contextMenu, false);\r\n        this.domElement.addEventListener(\"mousedown\", mouseDown, false);\r\n        this.domElement.addEventListener(\"wheel\", wheel, false);\r\n        this.domElement.addEventListener(\"touchstart\", touchStart, false);\r\n        this.domElement.addEventListener(\"touchend\", touchEnd, false);\r\n        this.domElement.addEventListener(\"touchmove\", touchMove, false);\r\n        window.addEventListener(\"keydown\", keyDown, false);\r\n        this.setLeftInteractive = (e) => {\r\n            if (e) {\r\n                this.mouseButtons = {\r\n                    ORBIT: 0,\r\n                    ZOOM: 1,\r\n                    PAN: 2\r\n                }\r\n            } else {\r\n                this.mouseButtons = {\r\n                    ORBIT: 2,\r\n                    ZOOM: 1,\r\n                    PAN: 0\r\n                }\r\n            }\r\n            this._leftInteractive = e;\r\n        }\r\n        this.update();\r\n        this.pan = G;\r\n        this.panDelta = x;\r\n    }\r\n    get leftInteractive() {\r\n        return this._leftInteractive;\r\n    }\r\n    set leftInteractive(e) {\r\n        this.setLeftInteractive(e);\r\n    }\r\n    get center() {\r\n        //console.warn(\"THREE.EarthOrbitControls: .center has been renamed to .target\");\r\n        return this.target;\r\n    }\r\n    get noZoom() {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\");\r\n        return !this.enableZoom;\r\n    }\r\n    set noZoom(e) {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\");\r\n        this.enableZoom = !e;\r\n    }\r\n    get noRotate() {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\");\r\n        return !this.enableRotate;\r\n    }\r\n    set noRotate(e) {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\");\r\n        this.enableRotate = !e;\r\n    }\r\n    get noPan() {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noPan has been deprecated. Use .enablePan instead.\");\r\n        return !this.enablePan;\r\n    }\r\n    set noPan(e) {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noPan has been deprecated. Use .enablePan instead.\");\r\n        this.enablePan = !e;\r\n    }\r\n    get noKeys() {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\");\r\n        return !this.enableKeys;\r\n    }\r\n    set noKeys(e) {\r\n        //console.warn(\"THREE.EarthOrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\");\r\n        this.enableKeys = !e;\r\n    }\r\n    get staticMoving() {\r\n        //console.warn(\"THREE.EarthOrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\");\r\n        return !this.enableDamping;\r\n    }\r\n    set staticMoving(e) {\r\n        //console.warn(\"THREE.EarthOrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\");\r\n        this.enableDamping = !e;\r\n    }\r\n    get dynamicDampingFactor() {\r\n        //console.warn(\"THREE.EarthOrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\");\r\n        return this.dampingFactor;\r\n    }\r\n    set dynamicDampingFactor(e) {\r\n        //console.warn(\"THREE.EarthOrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\");\r\n        this.dampingFactor = e;\r\n    }\r\n    get minPolarAngle() {\r\n        return this._minPolarAngle;\r\n    }\r\n    set minPolarAngle(e) {\r\n        this._minPolarAngle = e;\r\n    }\r\n    get maxPolarAngle() {\r\n        return this._maxPolarAngle;\r\n    }\r\n    set maxPolarAngle(e) {\r\n        this._maxPolarAngle = e < this.maxPitchAngle * Math.PI / 180 ? e : this.maxPitchAngle * Math.PI / 180;\r\n    }\r\n}\r\nexport default EarthOrbitControls;","import * as THREE from 'three';\r\nimport Cache from './Common/Cache';\r\nimport CombinedCamera from './Cameras/CombinedCamera';\r\nimport Camera from './Cameras/Camera';\r\nimport CameraControl from './Controls/CameraControl';\r\nimport EarthOrbitControls from './Controls/EarthOrbitControls';\r\nimport { CSS2DRenderer } from './jsm/renderers/CSS2DRenderer';\r\n//import EffectManager from './EffectManager';\r\n//import Stats from '../jsm/stats.module';\r\nclass View {\r\n\tconstructor(props) {\r\n\t\tCache.init();\r\n\t\t//this.TOLERANCE = 0.00001;\r\n\t\tthis.alias = 1;\r\n\t\tthis.mouse = new THREE.Vector2();\r\n\t\tthis.raycaster = new THREE.Raycaster();\r\n\t\t// this.effectConfig = {\r\n\t\t// \t\"postEffect\": {\r\n\t\t// \t\t\"enable\": true,\r\n\t\t// \t\t\"bloom\": {\r\n\t\t// \t\t\t\"enable\": false,\r\n\t\t// \t\t\t\"strength\": 0.14,\r\n\t\t// \t\t\t\"radius\": 0.4,\r\n\t\t// \t\t\t\"threshold\": 0.7\r\n\t\t// \t\t},\r\n\t\t// \t\t\"screenSpaceAmbientOcclusion\": {\r\n\t\t// \t\t\t\"enable\": false,\r\n\t\t// \t\t\t\"radius\": 0.2,\r\n\t\t// \t\t\t\"quality\": \"medium\",\r\n\t\t// \t\t\t\"intensity\": 0.8,\r\n\t\t// \t\t\t\"temporalFilter\": true,\r\n\t\t// \t\t\t\"ignoreTransparent\": false\r\n\t\t// \t\t},\r\n\t\t// \t\t\"colorCorrection\": {\r\n\t\t// \t\t\t\"enable\": true,\r\n\t\t// \t\t\t\"exposure\": 0,\r\n\t\t// \t\t\t\"brightness\": 0,\r\n\t\t// \t\t\t\"contrast\": 1.1,\r\n\t\t// \t\t\t\"saturation\": 1.1,\r\n\t\t// \t\t\t\"gamma\": 1\r\n\t\t// \t\t},\r\n\t\t// \t\t\"vignette\": {\r\n\t\t// \t\t\t\"enable\": false,\r\n\t\t// \t\t\t\"type\": \"blur\",\r\n\t\t// \t\t\t\"color\": 0,\r\n\t\t// \t\t\t\"offset\": 1.5\r\n\t\t// \t\t},\r\n\t\t// \t\t\"blur\": {\r\n\t\t// \t\t\t\"enable\": false,\r\n\t\t// \t\t\t\"radius\": 5,\r\n\t\t// \t\t\t\"bounds\": [\r\n\t\t// \t\t\t\t[\r\n\t\t// \t\t\t\t\t0,\r\n\t\t// \t\t\t\t\t0,\r\n\t\t// \t\t\t\t\t0.5,\r\n\t\t// \t\t\t\t\t0.5\r\n\t\t// \t\t\t\t],\r\n\t\t// \t\t\t\t[\r\n\t\t// \t\t\t\t\t0.5,\r\n\t\t// \t\t\t\t\t0.5,\r\n\t\t// \t\t\t\t\t1,\r\n\t\t// \t\t\t\t\t1\r\n\t\t// \t\t\t\t]\r\n\t\t// \t\t\t]\r\n\t\t// \t\t},\r\n\t\t// \t\t\"FXAA\": {\r\n\t\t// \t\t\t\"enable\": true\r\n\t\t// \t\t},\r\n\t\t// \t\t\"MSAA\": {\r\n\t\t// \t\t\t\"enable\": true\r\n\t\t// \t\t}\r\n\t\t// \t},\r\n\t\t// \t\"temporalSuperSampling\": {\r\n\t\t// \t\t\"enable\": false,\r\n\t\t// \t\t\"size\": 30\r\n\t\t// \t}\r\n\t\t// };\r\n\t\tObject.assign(this, props);\r\n\t\tthis.init();\r\n\t}\r\n\tinit() {\r\n\t\tthis.objectManager = new Map();\r\n\t\tif(typeof this.el === 'string') {\r\n\t\t\tthis.el = document.getElementById(this.el);\r\n\t\t}\r\n\t\tthis.domElement = this.el;\r\n\t\tlet { width, height } = this.getSize();\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.renderCamera = new CombinedCamera(this.width, this.height, 45, 0.1, 10000, -10000, 10000);\r\n\t\tthis.renderCamera.setSize(this.width, this.height);\r\n\t\tif (!this.renderer) {\r\n\t\t\tthis.canvas = document.createElement('canvas');\r\n\t\t\tthis.context = this.canvas.getContext('webgl2', {\r\n\t\t\t\t//powerPreference: \"high-performance\",\r\n\t\t\t\tpreserveDrawingBuffer: false,\r\n\t\t\t\tantialias: true,\r\n\t\t\t\talpha: true,\r\n\t\t\t\t//stencil: true\r\n\t\t\t});\r\n\t\t\tthis.renderer = new THREE.WebGLRenderer({\r\n\t\t\t\tcanvas: this.canvas,\r\n\t\t\t\tcontext: this.context,\r\n\t\t\t\tlogarithmicDepthBuffer: true\r\n\t\t\t});\r\n\t\t\tthis.renderer.info.autoReset = false;\r\n\t\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\r\n\t\t\tthis.renderer.setSize(this.width, this.height);\r\n\t\t\tthis.renderer.autoClear = false;\r\n\t\t\tthis.renderer.sortObjects = true;\r\n\t\t\t// this.renderer.generateMipmaps = false;\r\n\r\n\t\t\t// this.renderer.gammaFactor = 1.5;\r\n\t\t\t// this.renderer.gammaInput = true;\r\n\t\t\t// this.renderer.gammaOutput = true;\r\n\t\t\tthis.renderer.shadowMap.enabled = true;\r\n\t\t\tthis.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\t\t\tthis.domElement.appendChild(this.renderer.domElement);\r\n\r\n\t\t\t//this.renderer.capabilities.logarithmicDepthBuffer = true;\r\n\t\t\t//this.renderCamera.autoAdjustNear = false;\r\n\r\n\t\t\t//this.stats = new Stats();\r\n\t\t\t//this.domElement.appendChild(this.stats.domElement);\r\n\t\t}\r\n\t\t//this.configureCanvasSize();\r\n\t\tthis.scene = new THREE.Scene();\r\n\t\tthis.scene.background = new THREE.Color(0, 0, 0);\r\n\t\t//this.scene.fog = new THREE.Fog(0xcce0ff, 800, 10000);\r\n\t\t//this.initBox();\r\n\r\n\t\tthis.node = new THREE.Group();\r\n\t\tthis.scene.add(this.node);\r\n\t\t// this.camera = new Camera({\r\n\t\t// \tcamera: this.renderCamera,\r\n\t\t// \tel: this.domElement\r\n\t\t// });\r\n\r\n// const gridHelper = new THREE.GridHelper( 400, 40, 0x0000ff, 0x808080 );\r\n// this.scene.add( gridHelper );\r\n// const polarGridHelper = new THREE.PolarGridHelper( 200, 16, 8, 64, 0x0000ff, 0x808080 );\r\n// this.scene.add( polarGridHelper );\r\n\r\n\t\tthis.curOrbit = new EarthOrbitControls(this, this.renderCamera, this.domElement);\r\n\t\tthis.curOrbit.enableDamping = true;\r\n\t\tthis._camera = new Camera({\r\n\t\t\tcamera: this.renderCamera,\r\n\t\t\tcontrol: this.curOrbit,\r\n\t\t\tel: this.domElement\r\n\t\t});\r\n\t\tthis.textureLoader = new THREE.TextureLoader();\r\n\t\tthis.camera = new CameraControl({\r\n\t\t\tcamera: this._camera,\r\n\t\t\tpicker: {},\r\n\t\t\tonAfterUpdate: () => {\r\n\t\t\t\t//\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.CSSRender = new CSS2DRenderer();\r\n\t\tthis.CSSRender.setSize(this.width, this.height);\r\n\t\tthis.CSSRender.domElement.style.position = 'absolute';\r\n\t\tthis.CSSRender.domElement.style.top = 0;\r\n\t\tthis.domElement.appendChild(this.CSSRender.domElement);\r\n\t\tthis.initLight();\r\n\t\tthis.initEffect();\r\n\t\tthis.initEvent();\r\n\t\tthis.tick = this.tick.bind(this);\r\n\t\tthis.renderer.setAnimationLoop(this.tick);\r\n\t}\r\n\tinitEvent() {\r\n\t\tthis.curOrbit.addEventListener(\"change\", (e) => {\r\n\t\t\t//console.log('change event', this.compositorRender);\r\n\t\t\t\r\n\t\t\t//if(!this.is) {\r\n\t\t\t//setTimeout(() => {\r\n\t\t\t\t//this.compositorRender.update();\r\n\t\t\t//}, 500)\r\n\t\t\t\t//this.compositorRender.update();\r\n\t\t\t\t//this.is = true;\r\n\t\t\t//}\r\n\t\t});\r\n\t\tthis.handleResize = this.handleResize.bind(this);\r\n\t\twindow.addEventListener(\"resize\", this.handleResize, false);\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t\tthis.domElement.addEventListener('click', this.handleClick, false);\r\n\t}\r\n\thandleResize(e) {\r\n\t\te.preventDefault();\r\n\t\tthis.resize();\r\n\t}\r\n\thandleClick(e) {\r\n\t\te.preventDefault();\r\n\t\tthis.onBeforeSelect(e);\r\n\t\tconst { clientX, clientY, changedTouches } = e;\r\n\t\tlet x = clientX;\r\n\t\tlet y = clientY;\r\n\t\tif(changedTouches) {\r\n\t\t\tconst [ changedTouche ] = changedTouches;\r\n\t\t\tif(changedTouche) {\r\n\t\t\t\ty = changedTouche.pageX;\r\n\t\t\t\ty = changedTouche.pageY;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.mouse.x = (x / this.domElement.offsetWidth) * 2 - 1;\r\n\t\tthis.mouse.y = -(y / this.domElement.offsetHeight) * 2 + 1;\r\n\t\tthis.raycaster.setFromCamera(this.mouse, this.rendererCamera);\r\n\t\tlet intersects = this.raycaster.intersectObject(this.scene, true);\r\n\r\n\t\tlet selectedObject = null;\r\n\t\tif(intersects && intersects.length > 0) {\r\n\t\t\tselectedObject = intersects[0].object;\r\n\t\t\tthis.onSelect(e, selectedObject);\r\n\t\t} else {\r\n\r\n\t\t}\r\n\t\tthis.onAfterSelect(e, selectedObject);\r\n\t}\r\n\tonBeforeSelect(e) {}\r\n\tonSelect(e, objs) {}\r\n\tonAfterSelect(e, objs) {}\r\n\tinitBox() {\r\n\t\t// this.scene.background = new THREE.CubeTextureLoader().setPath('images/cube/').load([\r\n\t\t// \t'negx.jpg',\r\n\t\t// \t'posy.jpg',\r\n\t\t// \t'negy.jpg',\r\n\t\t// \t'posz.jpg',\r\n\t\t// \t'negz.jpg'\r\n\t\t// ]);\r\n\r\n\t\tvar cubeTextureLoader = new THREE.CubeTextureLoader();\r\n\t\tcubeTextureLoader.setPath('images/cube/2/');\r\n\t\t//6张图 朝前(posz)，朝后(negz)，朝上(posy)，朝下(negy)，朝右(posx)，朝左(negx)\r\n\t\tvar cubeTexture = cubeTextureLoader.load([\r\n\t\t\t'negx.jpg',\r\n\t\t\t'posy.jpg',\r\n\t\t\t'negy.jpg',\r\n\t\t\t'posz.jpg',\r\n\t\t\t'negz.jpg'\r\n\t\t]);\r\n\t\tthis.scene.background = cubeTexture;\r\n\t}\r\n\tinitLight() {\r\n\t\tlet light = new THREE.DirectionalLight();\r\n\t\tlight.position.x = 0;\r\n\t\tlight.position.y = 1000;\r\n\t\tlight.position.z = 0;\r\n\t\tthis.scene.add(light);\r\n\r\n\t\tlight = new THREE.DirectionalLight();\r\n\t\tlight.position.x = 1000;\r\n\t\tlight.position.y = 0;\r\n\t\tlight.position.z = 0;\r\n\t\tthis.scene.add(light);\r\n\r\n\t\tlight = new THREE.DirectionalLight();\r\n\t\tlight.position.x = 0;\r\n\t\tlight.position.y = 0;\r\n\t\tlight.position.z = 1000;\r\n\t\tthis.scene.add(light);\r\n\t}\r\n\tinitEffect() {\r\n\t\tthis.compositorRender = new window.THREEx.EffectManager(this.renderer, this.scene, this.renderCamera, this.alias);\r\n\t\t//this.compositorRender.setConfig(this.effectConfig);\r\n\t\t//let compositorManager = this.compositorRender.compositorManager;\r\n\t\t//compositorManager.setParameter(\"urealBloom\", \"bright\", \"scale\", 8, 1);\r\n\t\t//compositorManager.setCompositorEnabled(\"\", \"\", \"SimpleBlur\", true);\r\n\t}\r\n\tgetSize() {\r\n\t\tlet width = this.domElement.offsetWidth;\r\n\t\tlet height = this.domElement.offsetHeight;\r\n\t\treturn {\r\n\t\t\twidth,\r\n\t\t\theight\r\n\t\t};\r\n\t}\r\n\t// configureCanvasSize() {\r\n\t// \tlet canvas = this.canvas;\r\n\t// \tlet width = this.width;\r\n\t// \tlet height = this.height;\r\n\r\n\t// \tlet pixelRatio = this.configurePixelRatio();\r\n\r\n\t// \tthis._canvasClientWidth = width;\r\n\t// \tthis._canvasClientHeight = height;\r\n\r\n\t// \twidth *= pixelRatio;\r\n\t// \theight *= pixelRatio;\r\n\r\n\t// \tcanvas.width = width;\r\n\t// \tcanvas.height = height;\r\n\r\n\t// \tthis._canRender = width !== 0 && height !== 0;\r\n\t// \tthis._lastDevicePixelRatio = window.devicePixelRatio;\r\n\t// }\r\n\t// configurePixelRatio() {\r\n\t// \tvar pixelRatio = this._useBrowserRecommendedResolution ? 1.0 : window.devicePixelRatio;\r\n\t// \tpixelRatio *= this._resolutionScale;\r\n\t// \tif (this._scene !== undefined) {\r\n\t// \t\tthis._scene.pixelRatio = pixelRatio;\r\n\t// \t}\r\n\t// \treturn pixelRatio;\r\n\t// }\r\n\t// set id(id) {\r\n\t// \tconsole.log('set');\r\n\t// \tthis._id = id;\r\n\t// }\r\n\t// get id() {\r\n\t// \tconsole.log('get');\r\n\t// \treturn this._id;\r\n\t// }\r\n\t// create(props) {\r\n\t// \tlet cls;\r\n\t// \tif (props.type === 'Globe') {\r\n\t// \t\tcls = require(`./Scene/${props.type}`).default;\r\n\t// \t} else {\r\n\t// \t\tcls = require(`./Layer/${props.type}`).default;\r\n\t// \t}\r\n\t// \tprops.view = this;\r\n\t// \tconst obj = new cls(props);\r\n\t// \tobj.uid = THREE.Math.generateUUID();\r\n\t// \treturn obj;\r\n\t// }\r\n\tresize() {\r\n\t\tlet { width, height } = this.getSize();\r\n\t\tthis.renderCamera.setSize(width, height);\r\n\t\tthis.renderCamera.aspect = width / height;\r\n\t\tthis.renderCamera.updateProjectionMatrix();\r\n\t\tthis.renderer.setSize(width, height);\r\n\t\tthis.CSSRender.setSize(width, height);\r\n\t\tthis.compositorRender.update();\r\n\t}\r\n\taddMap(props) {\r\n\t\tif(!this.map) {\r\n\t\t\tconst cls = require(`./Scene/Globe`).default;\r\n\t\t\tprops.view = this;\r\n\t\t\tprops.node = new THREE.Group();\r\n\t\t\tprops.uid = THREE.Math.generateUUID();\r\n\t\t\tthis.node.add(props.node);\r\n\t\t\tthis.map = new cls(props);\r\n\t\t\tthis.objectManager.set(this.map.uid, this.map);\r\n\t\t}\r\n\t\treturn this.map;\r\n\t}\r\n\tsetMap(mapConfig) {\r\n\t\tif(this.map) {\r\n\t\t\tthis.map.setMap(mapConfig);\r\n\t\t} else {\r\n\t\t\tthis.addMap(mapConfig);\r\n\t\t}\r\n\t}\r\n\tsetStyle(style) {\r\n\t\tthis.map.setStyle(style);\r\n\t}\r\n\taddLayer(props) {\r\n\t\tconst cls = require(`./Layer/${props.type}`).default;\r\n\t\tprops.view = this;\r\n\t\tprops.node = new THREE.Group();\r\n\t\tprops.uid = THREE.Math.generateUUID();\r\n\t\tthis.node.add(props.node);\r\n\t\tconst layer = new cls(props);\r\n\t\tthis.objectManager.set(layer.uid, layer);\r\n\t\treturn layer;\r\n\t}\r\n\t// add(layer) {\r\n\t// \tthis.objectManager.set(layer.uid, layer);\r\n\t// \tthis.node.add(layer.node);\r\n\t// \tlayer.init();\r\n\t// }\r\n\t// remove(layer) {\r\n\t// \tthis.node.remove(layer.node);\r\n\t// \tthis.objectManager.delete(layer.node);\r\n\t// }\r\n\ttick() {\r\n\t\t//this.stats.begin();\r\n\t\tthis.compositorRender.update();\r\n\t\tthis.compositorRender.render(this.renderer, this.scene, this.renderCamera);\r\n\t\t//this.stats.end();\r\n\t\tthis.objectManager.forEach(item => {\r\n\t\t\tif (item && item.update) {\r\n\t\t\t\titem.update();\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (this.camera.update) {\r\n\t\t\tthis.camera.update();\r\n\t\t}\r\n\t\tthis.CSSRender.render(this.scene, this.renderCamera);\r\n\t\tthis.update();\r\n\t\t//this.renderer.render(this.scene, this.renderCamera);\r\n\t\t//this.compositorRender.render(this.renderer, this.scene, this.renderCamera);\r\n\t}\r\n\tupdate() {\r\n\t\t\r\n\t}\r\n\tdestory() {\r\n\t\tthis.domElement.removeEventListener('click', this.handleClick);\r\n\t\tthis.renderer.setAnimationLoop(null);\r\n\t}\r\n}\r\n\r\nexport default View;"],"sourceRoot":""}